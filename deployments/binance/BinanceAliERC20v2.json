{
  "address": "0xfcCF7b2caEE328A02042Ac19f1B3970Ca683E806",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actual",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromVal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toVal",
          "type": "uint256"
        }
      ],
      "name": "VotingPowerChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CANCEL_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_BURNS_ON_BEHALF",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_DELEGATIONS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_DELEGATIONS_ON_BEHALF",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_EIP2612_PERMITS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_EIP3009_RECEPTIONS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_EIP3009_TRANSFERS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_ERC1363_APPROVALS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_ERC1363_TRANSFERS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_OWN_BURNS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_TRANSFERS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_TRANSFERS_ON_BEHALF",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_UNSAFE_TRANSFERS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ERC20_RECEIVER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ERC20_SENDER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_TOKEN_CREATOR",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_TOKEN_DESTROYER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_UID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "authorizationState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entireSupplyHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "k",
              "type": "uint64"
            },
            {
              "internalType": "uint192",
              "name": "v",
              "type": "uint192"
            }
          ],
          "internalType": "struct AliERC20v2Base.KV[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "desired",
          "type": "uint256"
        }
      ],
      "name": "evaluateBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "receiveWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyHistory",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "k",
          "type": "uint64"
        },
        {
          "internalType": "uint192",
          "name": "v",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyHistoryLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "transferFromAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFromAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "transferWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "unsafeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votingDelegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_of",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_blockNum",
          "type": "uint256"
        }
      ],
      "name": "votingPowerAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votingPowerHistory",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "k",
          "type": "uint64"
        },
        {
          "internalType": "uint192",
          "name": "v",
          "type": "uint192"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_of",
          "type": "address"
        }
      ],
      "name": "votingPowerHistoryLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_of",
          "type": "address"
        }
      ],
      "name": "votingPowerHistoryOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "k",
              "type": "uint64"
            },
            {
              "internalType": "uint192",
              "name": "v",
              "type": "uint192"
            }
          ],
          "internalType": "struct AliERC20v2Base.KV[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_of",
          "type": "address"
        }
      ],
      "name": "votingPowerOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x943fcebb2da5732236304ede5a05224175a2f9df374c263329d11730f5cf69d8",
  "receipt": {
    "to": null,
    "from": "0x6F803E00A8Ac0240e6B239D5D41f56Ab816ca8D8",
    "contractAddress": "0xfcCF7b2caEE328A02042Ac19f1B3970Ca683E806",
    "transactionIndex": 79,
    "gasUsed": "3234572",
    "logsBloom": "0x
    "blockHash": "0xb429e22fadc90ce0605d5ae838f1455ef74a3874c38f472c1235409e9b041052",
    "transactionHash": "0x943fcebb2da5732236304ede5a05224175a2f9df374c263329d11730f5cf69d8",
    "logs": [],
    "blockNumber": 26508594,
    "cumulativeGasUsed": "14451821",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0bcd2cf5421ac34be3c8645741dc274c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromVal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toVal\",\"type\":\"uint256\"}],\"name\":\"VotingPowerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_BURNS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_DELEGATIONS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_DELEGATIONS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_EIP2612_PERMITS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_EIP3009_RECEPTIONS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_EIP3009_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_ERC1363_APPROVALS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_ERC1363_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_OWN_BURNS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_UNSAFE_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ERC20_RECEIVER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ERC20_SENDER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_CREATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_DESTROYER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_UID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entireSupplyHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"v\",\"type\":\"uint192\"}],\"internalType\":\"struct AliERC20v2Base.KV[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desired\",\"type\":\"uint256\"}],\"name\":\"evaluateBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"receiveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplyHistory\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"v\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"unsafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNum\",\"type\":\"uint256\"}],\"name\":\"votingPowerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingPowerHistory\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"v\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"votingPowerHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"votingPowerHistoryOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"k\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"v\",\"type\":\"uint192\"}],\"internalType\":\"struct AliERC20v2Base.KV[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"votingPowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"A function to check an amount of tokens owner approved      to transfer on its behalf by some other address called \\\"spender\\\"\",\"params\":{\"_owner\":\"an address which approves transferring some tokens on its behalf\",\"_spender\":\"an address approved to transfer some tokens on behalf\"},\"returns\":{\"remaining\":\"an amount of tokens approved address `_spender` can transfer on behalf      of token owner `_owner`\"}},\"approve(address,uint256)\":{\"details\":\"Transaction sender must not necessarily own any tokens to grant the permission\",\"params\":{\"_spender\":\"an address approved by the caller (token owner)      to spend some tokens on its behalf\",\"_value\":\"an amount of tokens spender `_spender` is allowed to      transfer on behalf of the token owner\"},\"returns\":{\"success\":\"true on success, throws otherwise\"}},\"approveAndCall(address,uint256)\":{\"details\":\"Caller must not necessarily own any tokens to grant the permissionThrows if `_spender` is an EOA or a smart contract which doesn't support ERC1363Spender interface\",\"params\":{\"_spender\":\"an address approved by the caller (token owner)      to spend some tokens on its behalf\",\"_value\":\"an amount of tokens spender `_spender` is allowed to      transfer on behalf of the token owner\"},\"returns\":{\"_0\":\"success true on success, throws otherwise\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Caller must not necessarily own any tokens to grant the permission\",\"params\":{\"_data\":\"[optional] additional data with no specified format,      sent in onApprovalReceived call to `_spender`\",\"_spender\":\"an address approved by the caller (token owner)      to spend some tokens on its behalf\",\"_value\":\"an amount of tokens spender `_spender` is allowed to      transfer on behalf of the token owner\"},\"returns\":{\"_0\":\"success true on success, throws otherwise\"}},\"authorizationState(address,bytes32)\":{\"details\":\"Nonces are expected to be client-side randomly generated 32-byte values      unique to the authorizer's addressAlias for usedNonces(authorizer, nonce)\",\"params\":{\"_authorizer\":\"an address to check nonce for\",\"_nonce\":\"a nonce to check\"},\"returns\":{\"_0\":\"true if the nonce was used, false otherwise\"}},\"balanceOf(address)\":{\"params\":{\"_owner\":\"the address to query the the balance for\"},\"returns\":{\"balance\":\"an amount of tokens owned by the address specified\"}},\"burn(address,uint256)\":{\"details\":\"Burns (destroys) some tokens from the address specifiedThe value specified is treated as is without taking      into account what `decimals` value isRequires executor to have `ROLE_TOKEN_DESTROYER` permission      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabledCan be disabled by the contract creator forever by disabling      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking      its own roles to burn tokens and to enable burning features\",\"params\":{\"_from\":\"an address to burn some tokens from\",\"_value\":\"an amount of tokens to burn (destroy)\"},\"returns\":{\"_0\":\"true function always returns true as it's prerequisite of multichain-bridge.\"}},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_authorizer\":\"transaction authorizer\",\"_nonce\":\"unique random nonce to cancel (mark as used)\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"constructor\":{\"details\":\"Constructs/deploys Binance Smart Chain(BSC) ALI instance,      assigns initial token supply to the address specified\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)Throws if value to decrease by is zero or is greater than currently allowed value\",\"params\":{\"_spender\":\"an address approved by the caller (token owner)      to spend some tokens on its behalf\",\"_value\":\"an amount of tokens to decrease by\"},\"returns\":{\"_0\":\"success true on success, throws otherwise\"}},\"delegate(address)\":{\"details\":\"Accepts zero value address to delegate voting power to, effectively      removing the delegate in that case\",\"params\":{\"_to\":\"address to delegate voting power to\"}},\"delegateWithAuthorization(address,bytes32,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Accepts zero value address to delegate voting power to, effectively      removing the delegate in that caseCompliant with EIP-712: Ethereum typed structured data hashing and signing,      see https://eips.ethereum.org/EIPS/eip-712\",\"params\":{\"_exp\":\"signature expiration time\",\"_nonce\":\"nonce used to construct the signature, and used to validate it;      nonce is increased by one after successful signature validation and vote delegation\",\"_to\":\"address to delegate voting power to\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"entireSupplyHistory()\":{\"details\":\"Reads an entire total token supply history array\",\"returns\":{\"_0\":\"total token supply history array, a key-value pair array,      where key is a block number and value is total token supply at that block\"}},\"evaluateBy(address,uint256,uint256)\":{\"details\":\"Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011\",\"params\":{\"desired\":\"desired set of permissions operator would like to set\",\"operator\":\"address of the contract operator which is about to set the permissions\",\"target\":\"input set of permissions to operator is going to modify\"},\"returns\":{\"_0\":\"resulting set of permissions given operator will set\"}},\"features()\":{\"details\":\"Effectively reads userRoles role for the contract itself\",\"returns\":{\"_0\":\"256-bit bitmask of the features enabled\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)Throws if value to increase by is zero or too big and causes arithmetic overflow\",\"params\":{\"_spender\":\"an address approved by the caller (token owner)      to spend some tokens on its behalf\",\"_value\":\"an amount of tokens to increase by\"},\"returns\":{\"_0\":\"success true on success, throws otherwise\"}},\"isFeatureEnabled(uint256)\":{\"params\":{\"required\":\"set of features to check against\"},\"returns\":{\"_0\":\"true if all the features requested are enabled, false otherwise\"}},\"isOperatorInRole(address,uint256)\":{\"params\":{\"operator\":\"address of the user to check role for\",\"required\":\"set of permissions (role) to check\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isSenderInRole(uint256)\":{\"params\":{\"required\":\"set of permissions (role) to check against\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"mint(address,uint256)\":{\"details\":\"Mints (creates) some tokens to address specifiedThe value specified is treated as is without taking      into account what `decimals` value isRequires executor to have `ROLE_TOKEN_CREATOR` permissionThrows on overflow, if totalSupply + _value doesn't fit into uint256\",\"params\":{\"_to\":\"an address to mint tokens to\",\"_value\":\"an amount of tokens to mint (create)\"},\"returns\":{\"_0\":\"true function always returns true as it's prerequisite of multichain-bridge.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Executes approve(_spender, _value) on behalf of the owner who EIP-712      signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_value` as the allowance of `_spender` over `_owner` tokens,      given `_owner` EIP-712 signed approvalInherits the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)      vulnerability in the same way as ERC20 `approve`, use standard ERC20 workaround      if this might become an issue:      https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/editEmits `Approval` event(s) in the same way as `approve` doesRequires:     - `_spender` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `nonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification\",\"params\":{\"_exp\":\"signature expiration time (unix timestamp)\",\"_owner\":\"owner of the tokens to set approval on behalf of,      an address which signed the EIP-712 message\",\"_spender\":\"an address approved by the token owner      to spend some tokens on its behalf\",\"_value\":\"an amount of tokens spender `_spender` is allowed to      transfer on behalf of the token owner\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"This has an additional check to ensure that the payee's address      matches the caller of this function to prevent front-running attacks.\",\"params\":{\"_from\":\"token sender and transaction authorizer\",\"_nonce\":\"unique random nonce\",\"_to\":\"token receiver\",\"_validAfter\":\"signature valid after time (unix timestamp)\",\"_validBefore\":\"signature valid before time (unix timestamp)\",\"_value\":\"amount to be transferred\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Called by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise\",\"params\":{\"_data\":\"[optional] additional data with no specified format,      sent in onTransferReceived call to `_to` in case if its a smart contract\",\"_from\":\"token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf\",\"_to\":\"an address to transfer tokens to,      must be either an external address or a smart contract,      implementing ERC1363Receiver\",\"_value\":\"amount of tokens to be transferred,, zero      value is allowed\"},\"returns\":{\"_0\":\"true unless throwing\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"totalSupplyAt(uint256)\":{\"details\":\"Throws if `_blockNum` is not in the past (not the finalized block)\",\"params\":{\"_blockNum\":\"block number to get the total token supply at\"},\"returns\":{\"_0\":\"past total token supply at block number `_blockNum`\"}},\"totalSupplyHistoryLength()\":{\"details\":\"Returns length of the total token supply history array;      useful since reading an entire array just to get its length is expensive (gas cost)\",\"returns\":{\"_0\":\"total token supply history array\"}},\"transfer(address,uint256)\":{\"details\":\"Called by token owner (an address which has a      positive token balance tracked by this smart contract)Throws on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * self address or          * smart contract which doesn't support ERC20\",\"params\":{\"_to\":\"an address to transfer tokens to,      must be either an external address or a smart contract,      compliant with the ERC20 standard\",\"_value\":\"amount of tokens to be transferred,, zero      value is allowed\"},\"returns\":{\"success\":\"true on success, throws otherwise\"}},\"transferAndCall(address,uint256)\":{\"details\":\"Called by token owner (an address which has a      positive token balance tracked by this smart contract)Throws on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * EOA or smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise\",\"params\":{\"_to\":\"an address to transfer tokens to,      must be a smart contract, implementing ERC1363Receiver\",\"_value\":\"amount of tokens to be transferred,, zero      value is allowed\"},\"returns\":{\"_0\":\"true unless throwing\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Called by token owner (an address which has a      positive token balance tracked by this smart contract)Throws on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * EOA or smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise\",\"params\":{\"_data\":\"[optional] additional data with no specified format,      sent in onTransferReceived call to `_to`\",\"_to\":\"an address to transfer tokens to,      must be a smart contract, implementing ERC1363Receiver\",\"_value\":\"amount of tokens to be transferred,, zero      value is allowed\"},\"returns\":{\"_0\":\"true unless throwing\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Called by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * smart contract which doesn't support ERC20\",\"params\":{\"_from\":\"token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf\",\"_to\":\"an address to transfer tokens to,      must be either an external address or a smart contract,      compliant with the ERC20 standard\",\"_value\":\"amount of tokens to be transferred,, zero      value is allowed\"},\"returns\":{\"success\":\"true on success, throws otherwise\"}},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Called by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * EOA or smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise\",\"params\":{\"_from\":\"token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf\",\"_to\":\"an address to transfer tokens to,      must be a smart contract, implementing ERC1363Receiver\",\"_value\":\"amount of tokens to be transferred,, zero      value is allowed\"},\"returns\":{\"_0\":\"true unless throwing\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Called by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * EOA or smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise\",\"params\":{\"_data\":\"[optional] additional data with no specified format,      sent in onTransferReceived call to `_to`\",\"_from\":\"token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf\",\"_to\":\"an address to transfer tokens to,      must be a smart contract, implementing ERC1363Receiver\",\"_value\":\"amount of tokens to be transferred,, zero      value is allowed\"},\"returns\":{\"_0\":\"true unless throwing\"}},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_from\":\"token sender and transaction authorizer\",\"_nonce\":\"unique random nonce\",\"_to\":\"token receiver\",\"_validAfter\":\"signature valid after time (unix timestamp)\",\"_validBefore\":\"signature valid before time (unix timestamp)\",\"_value\":\"amount to be transferred\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"unsafeTransferFrom(address,address,uint256)\":{\"details\":\"In contrast to `transferFromAndCall` doesn't check recipient      smart contract to support ERC20 tokens (ERC1363Receiver)Designed to be used by developers when the receiver is known      to support ERC20 tokens but doesn't implement ERC1363Receiver interfaceCalled by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)Returns silently on success, throws otherwise\",\"params\":{\"_from\":\"token sender, token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf\",\"_to\":\"token receiver, an address to transfer tokens to\",\"_value\":\"amount of tokens to be transferred,, zero      value is allowed\"}},\"updateFeatures(uint256)\":{\"details\":\"Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions\",\"params\":{\"_mask\":\"bitmask representing a set of features to enable/disable\"}},\"updateRole(address,uint256)\":{\"details\":\"Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission\",\"params\":{\"operator\":\"address of a user to alter permissions for or zero      to alter global features of the smart contract\",\"role\":\"bitmask representing a set of permissions to      enable/disable for a user specified\"}},\"votingPowerAt(address,uint256)\":{\"details\":\"Throws if `_blockNum` is not in the past (not the finalized block)\",\"params\":{\"_blockNum\":\"block number to get the voting power at\",\"_of\":\"the address of account to get voting power of\"},\"returns\":{\"_0\":\"past cumulative voting power of the account,      sum of token balances of all its voting delegators at block number `_blockNum`\"}},\"votingPowerHistoryLength(address)\":{\"details\":\"Returns length of the voting power history array for the delegate specified;      useful since reading an entire array just to get its length is expensive (gas cost)\",\"params\":{\"_of\":\"delegate to query voting power history length for\"},\"returns\":{\"_0\":\"voting power history array length for the delegate of interest\"}},\"votingPowerHistoryOf(address)\":{\"details\":\"Reads an entire voting power history array for the delegate specified\",\"params\":{\"_of\":\"delegate to query voting power history for\"},\"returns\":{\"_0\":\"voting power history array for the delegate of interest\"}},\"votingPowerOf(address)\":{\"params\":{\"_of\":\"the address of account to get voting power of\"},\"returns\":{\"_0\":\"current cumulative voting power of the account,      sum of token balances of all its voting delegators\"}}},\"stateVariables\":{\"underlying\":{\"details\":\"\\\"underlying\\\" is a dummy variable. Multichain frontend      recognizes our token via \\\"underlying\\\"\"}},\"title\":\"Artificial Liquid Intelligence ERC20 Token (With BSC Bridging Support)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CANCEL_AUTHORIZATION_TYPEHASH()\":{\"notice\":\"EIP-712 CancelAuthorization (EIP-3009) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"DELEGATION_TYPEHASH()\":{\"notice\":\"EIP-712 delegation struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"DOMAIN_SEPARATOR()\":{\"notice\":\"EIP-712 contract's domain separator,      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"EIP-712 contract's domain typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"FEATURE_BURNS_ON_BEHALF()\":{\"notice\":\"Enables approved operators to burn tokens on behalf of their owners\"},\"FEATURE_DELEGATIONS()\":{\"notice\":\"Enables delegators to elect delegates\"},\"FEATURE_DELEGATIONS_ON_BEHALF()\":{\"notice\":\"Enables delegators to elect delegates on behalf      (via an EIP712 signature)\"},\"FEATURE_EIP2612_PERMITS()\":{\"notice\":\"Enables approvals on behalf (EIP2612 permits      via an EIP712 signature)\"},\"FEATURE_EIP3009_RECEPTIONS()\":{\"notice\":\"Enables meta transfers on behalf (EIP3009 transfers      via an EIP712 signature)\"},\"FEATURE_EIP3009_TRANSFERS()\":{\"notice\":\"Enables meta transfers on behalf (EIP3009 transfers      via an EIP712 signature)\"},\"FEATURE_ERC1363_APPROVALS()\":{\"notice\":\"Enables ERC-1363 approvals with callback\"},\"FEATURE_ERC1363_TRANSFERS()\":{\"notice\":\"Enables ERC-1363 transfers with callback\"},\"FEATURE_OWN_BURNS()\":{\"notice\":\"Enables token owners to burn their own tokens\"},\"FEATURE_TRANSFERS()\":{\"notice\":\"Enables ERC20 transfers of the tokens      (transfer by the token owner himself)\"},\"FEATURE_TRANSFERS_ON_BEHALF()\":{\"notice\":\"Enables ERC20 transfers on behalf      (transfer by someone else on behalf of token owner)\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"EIP-712 permit (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH()\":{\"notice\":\"EIP-712 ReceiveWithAuthorization (EIP-3009) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"ROLE_ACCESS_MANAGER()\":{\"notice\":\"Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features\"},\"ROLE_ERC20_RECEIVER()\":{\"notice\":\"ERC20 receivers are allowed to receive tokens without ERC20 safety checks,      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\"},\"ROLE_ERC20_SENDER()\":{\"notice\":\"ERC20 senders are allowed to send tokens without ERC20 safety checks,      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\"},\"ROLE_TOKEN_CREATOR()\":{\"notice\":\"Token creator is responsible for creating (minting)      tokens to an arbitrary address\"},\"ROLE_TOKEN_DESTROYER()\":{\"notice\":\"Token destroyer is responsible for destroying (burning)      tokens owned by an arbitrary address\"},\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH()\":{\"notice\":\"EIP-712 TransferWithAuthorization (EIP-3009) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"allowance(address,address)\":{\"notice\":\"Returns the amount which _spender is still allowed to withdraw from _owner.\"},\"approve(address,uint256)\":{\"notice\":\"Approves address called `_spender` to transfer some amount      of tokens on behalf of the owner (transaction sender)\"},\"approveAndCall(address,uint256)\":{\"notice\":\"Approves address called `_spender` to transfer some amount      of tokens on behalf of the owner, then executes a `onApprovalReceived` callback on `_spender`\"},\"approveAndCall(address,uint256,bytes)\":{\"notice\":\"Approves address called `_spender` to transfer some amount      of tokens on behalf of the owner, then executes a callback on `_spender`\"},\"authorizationState(address,bytes32)\":{\"notice\":\"Checks if specified nonce was already used\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of a particular address\"},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Attempt to cancel an authorization\"},\"decimals()\":{\"notice\":\"Decimals of the token: 18\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decreases the allowance granted to `spender` by the caller.\"},\"delegate(address)\":{\"notice\":\"Delegates voting power of the delegator `msg.sender` to the delegate `_to`\"},\"delegateWithAuthorization(address,bytes32,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates voting power of the delegator (represented by its signature) to the delegate `_to`\"},\"evaluateBy(address,uint256,uint256)\":{\"notice\":\"Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions\"},\"features()\":{\"notice\":\"Retrieves globally set of features enabled\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increases the allowance granted to `spender` by the transaction sender\"},\"isFeatureEnabled(uint256)\":{\"notice\":\"Checks if requested set of features is enabled globally on the contract\"},\"isOperatorInRole(address,uint256)\":{\"notice\":\"Checks if operator has all the permissions (role) required\"},\"isSenderInRole(uint256)\":{\"notice\":\"Checks if transaction sender `msg.sender` has all the permissions required\"},\"name()\":{\"notice\":\"Name of the token: Artificial Liquid Intelligence TokenERC20 name of the token (long name)\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"For all addresses owner, spender, uint256s value, deadline and nonce, uint8 v, bytes32 r and s,      a call to permit(owner, spender, value, deadline, v, r, s) will set approval[owner][spender] to value,      increment nonces[owner] by 1, and emit a corresponding Approval event,      if and only if the following conditions are met:        - The current blocktime is less than or equal to deadline.        - owner is not the zero address.        - nonces[owner] (before the state update) is equal to nonce.        - r, s and v is a valid secp256k1 signature from owner of the message:\"},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Receive a transfer with a signed authorization from the payer\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to` and then executes `onTransferReceived` callback      on the receiver if it is a smart contract (not an EOA)\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"symbol()\":{\"notice\":\"Symbol of the token: ALIERC20 symbol of that token (short name)\"},\"totalSupply()\":{\"notice\":\"Total supply of the token: initially 10,000,000,000,      with the potential to decline over time as some tokens may get burnt but not minted\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Gets past total token supply value at some block `_blockNum`\"},\"totalSupplyHistory(uint256)\":{\"notice\":\"A record of total token supply historical data\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers some tokens to an external address or a smart contract\"},\"transferAndCall(address,uint256)\":{\"notice\":\"Transfers some tokens and then executes `onTransferReceived` callback on the receiver\"},\"transferAndCall(address,uint256,bytes)\":{\"notice\":\"Transfers some tokens and then executes `onTransferReceived` callback on the receiver\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to`\"},\"transferFromAndCall(address,address,uint256)\":{\"notice\":\"Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to` and then executes `onTransferReceived` callback on the receiver\"},\"transferFromAndCall(address,address,uint256,bytes)\":{\"notice\":\"Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to` and then executes a `onTransferReceived` callback on the receiver\"},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Execute a transfer with a signed authorization\"},\"unsafeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to`\"},\"updateFeatures(uint256)\":{\"notice\":\"Updates set of the globally enabled features (`features`),      taking into account sender's permissions\"},\"updateRole(address,uint256)\":{\"notice\":\"Updates set of permissions (role) for a given user,      taking into account sender's permissions.\"},\"userRoles(address)\":{\"notice\":\"Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on\"},\"votingDelegates(address)\":{\"notice\":\"A record of each account's voting delegate\"},\"votingPowerAt(address,uint256)\":{\"notice\":\"Gets past voting power of the account `_of` at some block `_blockNum`\"},\"votingPowerHistory(address,uint256)\":{\"notice\":\"A record of each account's voting power historical data\"},\"votingPowerOf(address)\":{\"notice\":\"Gets current voting power of the account `_of`\"}},\"notice\":\"Binance Smart Chain (BSC) extension contract ads the functions required to bridge original      ALI token on Ethereum L1; these are mint and burn functions executed      when the tokens are deposited from from Ethereum L1 into BSC L2 (mint),      and when the tokens are withdrawn back from BSC L2 into Ethereum L1 (burn).Read more:      https://docs.multichain.org/developer-guide/how-to-develop-under-anyswap-erc20-standards\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/BinanceAliERC20v2.sol\":\"BinanceAliERC20v2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/EIP2612.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title EIP-2612: permit - 712-signed approvals\\n *\\n * @notice A function permit extending ERC-20 which allows for approvals to be made via secp256k1 signatures.\\n *      This kind of \\u201caccount abstraction for ERC-20\\u201d brings about two main benefits:\\n *        - transactions involving ERC-20 operations can be paid using the token itself rather than ETH,\\n *        - approve and pull operations can happen in a single transaction instead of two consecutive transactions,\\n *        - while adding as little as possible over the existing ERC-20 standard.\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-2612#specification\\n */\\ninterface EIP2612 {\\n\\t/**\\n\\t * @notice EIP712 domain separator of the smart contract. It should be unique to the contract\\n\\t *      and chain to prevent replay attacks from other domains, and satisfy the requirements of EIP-712,\\n\\t *      but is otherwise unconstrained.\\n\\t */\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\t/**\\n\\t * @notice Counter of the nonces used for the given address; nonce are used sequentially\\n\\t *\\n\\t * @dev To prevent from replay attacks nonce is incremented for each address after a successful `permit` execution\\n\\t *\\n\\t * @param owner an address to query number of used nonces for\\n\\t * @return number of used nonce, nonce number to be used next\\n\\t */\\n\\tfunction nonces(address owner) external view returns (uint);\\n\\n\\t/**\\n\\t * @notice For all addresses owner, spender, uint256s value, deadline and nonce, uint8 v, bytes32 r and s,\\n\\t *      a call to permit(owner, spender, value, deadline, v, r, s) will set approval[owner][spender] to value,\\n\\t *      increment nonces[owner] by 1, and emit a corresponding Approval event,\\n\\t *      if and only if the following conditions are met:\\n\\t *        - The current blocktime is less than or equal to deadline.\\n\\t *        - owner is not the zero address.\\n\\t *        - nonces[owner] (before the state update) is equal to nonce.\\n\\t *        - r, s and v is a valid secp256k1 signature from owner of the message:\\n\\t *\\n\\t * @param owner token owner address, granting an approval to spend its tokens\\n\\t * @param spender an address approved by the owner (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param value an amount of tokens spender `spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x12067c13c4b7fc54ce717d047f076b6ad4a26c6f9010a8987c5e328a4edfee1e\",\"license\":\"MIT\"},\"contracts/interfaces/EIP3009.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title EIP-3009: Transfer With Authorization\\n *\\n * @notice A contract interface that enables transferring of fungible assets via a signed authorization.\\n *      See https://eips.ethereum.org/EIPS/eip-3009\\n *      See https://eips.ethereum.org/EIPS/eip-3009#specification\\n */\\ninterface EIP3009 {\\n\\t/**\\n\\t * @dev Fired whenever the nonce gets used (ex.: `transferWithAuthorization`, `receiveWithAuthorization`)\\n\\t *\\n\\t * @param authorizer an address which has used the nonce\\n\\t * @param nonce the nonce used\\n\\t */\\n\\tevent AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n\\n\\t/**\\n\\t * @dev Fired whenever the nonce gets cancelled (ex.: `cancelAuthorization`)\\n\\t *\\n\\t * @dev Both `AuthorizationUsed` and `AuthorizationCanceled` imply the nonce\\n\\t *      cannot be longer used, the only difference is that `AuthorizationCanceled`\\n\\t *      implies no smart contract state change made (except the nonce marked as cancelled)\\n\\t *\\n\\t * @param authorizer an address which has cancelled the nonce\\n\\t * @param nonce the nonce cancelled\\n\\t */\\n\\tevent AuthorizationCanceled(address indexed authorizer, bytes32 indexed nonce);\\n\\n\\t/**\\n\\t * @notice Returns the state of an authorization, more specifically\\n\\t *      if the specified nonce was already used by the address specified\\n\\t *\\n\\t * @dev Nonces are expected to be client-side randomly generated 32-byte data\\n\\t *      unique to the authorizer's address\\n\\t *\\n\\t * @param authorizer    Authorizer's address\\n\\t * @param nonce         Nonce of the authorization\\n\\t * @return true if the nonce is used\\n\\t */\\n\\tfunction authorizationState(\\n\\t\\taddress authorizer,\\n\\t\\tbytes32 nonce\\n\\t) external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Execute a transfer with a signed authorization\\n\\t *\\n\\t * @param from          Payer's address (Authorizer)\\n\\t * @param to            Payee's address\\n\\t * @param value         Amount to be transferred\\n\\t * @param validAfter    The time after which this is valid (unix time)\\n\\t * @param validBefore   The time before which this is valid (unix time)\\n\\t * @param nonce         Unique nonce\\n\\t * @param v             v of the signature\\n\\t * @param r             r of the signature\\n\\t * @param s             s of the signature\\n\\t */\\n\\tfunction transferWithAuthorization(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value,\\n\\t\\tuint256 validAfter,\\n\\t\\tuint256 validBefore,\\n\\t\\tbytes32 nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Receive a transfer with a signed authorization from the payer\\n\\t *\\n\\t * @dev This has an additional check to ensure that the payee's address matches\\n\\t *      the caller of this function to prevent front-running attacks.\\n\\t * @dev See https://eips.ethereum.org/EIPS/eip-3009#security-considerations\\n\\t *\\n\\t * @param from          Payer's address (Authorizer)\\n\\t * @param to            Payee's address\\n\\t * @param value         Amount to be transferred\\n\\t * @param validAfter    The time after which this is valid (unix time)\\n\\t * @param validBefore   The time before which this is valid (unix time)\\n\\t * @param nonce         Unique nonce\\n\\t * @param v             v of the signature\\n\\t * @param r             r of the signature\\n\\t * @param s             s of the signature\\n\\t */\\n\\tfunction receiveWithAuthorization(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value,\\n\\t\\tuint256 validAfter,\\n\\t\\tuint256 validBefore,\\n\\t\\tbytes32 nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Attempt to cancel an authorization\\n\\t *\\n\\t * @param authorizer    Authorizer's address\\n\\t * @param nonce         Nonce of the authorization\\n\\t * @param v             v of the signature\\n\\t * @param r             r of the signature\\n\\t * @param s             s of the signature\\n\\t */\\n\\tfunction cancelAuthorization(\\n\\t\\taddress authorizer,\\n\\t\\tbytes32 nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xc27bf105cc1138613781011302f0e98144b091f622a662284d4198680d7f35b9\",\"license\":\"MIT\"},\"contracts/interfaces/ERC1363Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC20Spec.sol\\\";\\nimport \\\"./ERC165Spec.sol\\\";\\n\\n/**\\n * @title ERC1363 Interface\\n *\\n * @dev Interface defining a ERC1363 Payable Token contract.\\n *      Implementing contracts MUST implement the ERC1363 interface as well as the ERC20 and ERC165 interfaces.\\n */\\ninterface ERC1363 is ERC20, ERC165  {\\n\\t/*\\n\\t * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n\\t * 0xb0202a11 ===\\n\\t *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n\\t *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n\\t *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n\\t *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n\\t *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n\\t *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n\\t */\\n\\n\\t/**\\n\\t * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferAndCall(address to, uint256 value) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @param data bytes Additional data with no specified format, sent in call to `to`\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferAndCall(address to, uint256 value, bytes memory data) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\n\\t * @param from address The address which you want to send tokens from\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\t/**\\n\\t * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\\n\\t * @param from address The address which you want to send tokens from\\n\\t * @param to address The address which you want to transfer to\\n\\t * @param value uint256 The amount of tokens to be transferred\\n\\t * @param data bytes Additional data with no specified format, sent in call to `to`\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferFromAndCall(address from, address to, uint256 value, bytes memory data) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\n\\t * and then call `onApprovalReceived` on spender.\\n\\t * @param spender address The address which will spend the funds\\n\\t * @param value uint256 The amount of tokens to be spent\\n\\t */\\n\\tfunction approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n\\t/**\\n\\t * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\\n\\t * and then call `onApprovalReceived` on spender.\\n\\t * @param spender address The address which will spend the funds\\n\\t * @param value uint256 The amount of tokens to be spent\\n\\t * @param data bytes Additional data with no specified format, sent in call to `spender`\\n\\t */\\n\\tfunction approveAndCall(address spender, uint256 value, bytes memory data) external returns (bool);\\n}\\n\\n/**\\n * @title ERC1363Receiver Interface\\n *\\n * @dev Interface for any contract that wants to support `transferAndCall` or `transferFromAndCall`\\n *      from ERC1363 token contracts.\\n */\\ninterface ERC1363Receiver {\\n\\t/*\\n\\t * Note: the ERC-165 identifier for this interface is 0x88a7ca5c.\\n\\t * 0x88a7ca5c === bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))\\n\\t */\\n\\n\\t/**\\n\\t * @notice Handle the receipt of ERC1363 tokens\\n\\t *\\n\\t * @dev Any ERC1363 smart contract calls this function on the recipient\\n\\t *      after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\\n\\t *      transfer. Return of other than the magic value MUST result in the\\n\\t *      transaction being reverted.\\n\\t *      Note: the token contract address is always the message sender.\\n\\t *\\n\\t * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\\n\\t * @param from address The address which are token transferred from\\n\\t * @param value uint256 The amount of tokens transferred\\n\\t * @param data bytes Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))`\\n\\t *      unless throwing\\n\\t */\\n\\tfunction onTransferReceived(address operator, address from, uint256 value, bytes memory data) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC1363Spender Interface\\n *\\n * @dev Interface for any contract that wants to support `approveAndCall`\\n *      from ERC1363 token contracts.\\n */\\ninterface ERC1363Spender {\\n\\t/*\\n\\t * Note: the ERC-165 identifier for this interface is 0x7b04a2d0.\\n\\t * 0x7b04a2d0 === bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))\\n\\t */\\n\\n\\t/**\\n\\t * @notice Handle the approval of ERC1363 tokens\\n\\t *\\n\\t * @dev Any ERC1363 smart contract calls this function on the recipient\\n\\t *      after an `approve`. This function MAY throw to revert and reject the\\n\\t *      approval. Return of other than the magic value MUST result in the\\n\\t *      transaction being reverted.\\n\\t *      Note: the token contract address is always the message sender.\\n\\t *\\n\\t * @param owner address The address which called `approveAndCall` function\\n\\t * @param value uint256 The amount of tokens to be spent\\n\\t * @param data bytes Additional data with no specified format\\n\\t * @return `bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))`\\n\\t *      unless throwing\\n\\t */\\n\\tfunction onApprovalReceived(address owner, uint256 value, bytes memory data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x5a9800736f8d59f69ddeb59babcc71ec0ba439150ea1ecac1f4c30d8e4a98d5e\",\"license\":\"MIT\"},\"contracts/interfaces/ERC165Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title ERC-165 Standard Interface Detection\\n *\\n * @dev Interface of the ERC165 standard, as defined in the\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * @dev Implementers can declare support of contract interfaces,\\n *      which can then be queried by others.\\n *\\n * @author Christian Reitwie\\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\n */\\ninterface ERC165 {\\n\\t/**\\n\\t * @notice Query if a contract implements an interface\\n\\t *\\n\\t * @dev Interface identification is specified in ERC-165.\\n\\t *      This function uses less than 30,000 gas.\\n\\t *\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\n\\t * @return `true` if the contract implements `interfaceID` and\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9b8e0a0ee2ddff1014108266f62a95dab3f76f08deba2e6177ec2ed251128f9d\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title EIP-20: ERC-20 Token Standard\\n *\\n * @notice The ERC-20 (Ethereum Request for Comments 20), proposed by Fabian Vogelsteller in November 2015,\\n *      is a Token Standard that implements an API for tokens within Smart Contracts.\\n *\\n * @notice It provides functionalities like to transfer tokens from one account to another,\\n *      to get the current token balance of an account and also the total supply of the token available on the network.\\n *      Besides these it also has some other functionalities like to approve that an amount of\\n *      token from an account can be spent by a third party account.\\n *\\n * @notice If a Smart Contract implements the following methods and events it can be called an ERC-20 Token\\n *      Contract and, once deployed, it will be responsible to keep track of the created tokens on Ethereum.\\n *\\n * @notice See https://ethereum.org/en/developers/docs/standards/tokens/erc-20/\\n * @notice See https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface ERC20 {\\n\\t/**\\n\\t * @dev Fired in transfer(), transferFrom() to indicate that token transfer happened\\n\\t *\\n\\t * @param from an address tokens were consumed from\\n\\t * @param to an address tokens were sent to\\n\\t * @param value number of tokens transferred\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Fired in approve() to indicate an approval event happened\\n\\t *\\n\\t * @param owner an address which granted a permission to transfer\\n\\t *      tokens on its behalf\\n\\t * @param spender an address which received a permission to transfer\\n\\t *      tokens on behalf of the owner `_owner`\\n\\t * @param value amount of tokens granted to transfer on behalf\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @return name of the token (ex.: USD Coin)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @return symbol of the token (ex.: USDC)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t *      For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t *      be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * @dev Tokens usually opt for a value of 18, imitating the relationship between\\n\\t *      Ether and Wei. This is the value {ERC20} uses, unless this function is\\n\\t *      overridden;\\n\\t *\\n\\t * @dev NOTE: This information is only used for _display_ purposes: it in\\n\\t *      no way affects any of the arithmetic of the contract, including\\n\\t *      {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t *\\n\\t * @return token decimals\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function decimals() external view returns (uint8);\\n\\n\\t/**\\n\\t * @return the amount of tokens in existence\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Gets the balance of a particular address\\n\\t *\\n\\t * @param _owner the address to query the the balance for\\n\\t * @return balance an amount of tokens owned by the address specified\\n\\t */\\n\\tfunction balanceOf(address _owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens to an external address or a smart contract\\n\\t *\\n\\t * @dev Called by token owner (an address which has a\\n\\t *      positive token balance tracked by this smart contract)\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * self address or\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transfer(address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to`\\n\\t *\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _from token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Approves address called `_spender` to transfer some amount\\n\\t *      of tokens on behalf of the owner (transaction sender)\\n\\t *\\n\\t * @dev Transaction sender must not necessarily own any tokens to grant the permission\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction approve(address _spender, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\n\\t *\\n\\t * @dev A function to check an amount of tokens owner approved\\n\\t *      to transfer on its behalf by some other address called \\\"spender\\\"\\n\\t *\\n\\t * @param _owner an address which approves transferring some tokens on its behalf\\n\\t * @param _spender an address approved to transfer some tokens on behalf\\n\\t * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\n\\t *      of token owner `_owner`\\n\\t */\\n\\tfunction allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\",\"keccak256\":\"0x8b8f6e1ad3b0c46f8c96743ccb4d2c851321c35d74f52dc903084e970c544b9a\",\"license\":\"MIT\"},\"contracts/lib/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Address Utils\\n *\\n * @dev Utility library of inline functions on addresses\\n *\\n * @dev Copy of the Zeppelin's library:\\n *      https://github.com/gnosis/openzeppelin-solidity/blob/master/contracts/AddressUtils.sol\\n */\\nlibrary AddressUtils {\\n\\n\\t/**\\n\\t * @notice Checks if the target address is a contract\\n\\t *\\n\\t * @dev It is unsafe to assume that an address for which this function returns\\n\\t *      false is an externally-owned account (EOA) and not a contract.\\n\\t *\\n\\t * @dev Among others, `isContract` will return false for the following\\n\\t *      types of addresses:\\n\\t *        - an externally-owned account\\n\\t *        - a contract in construction\\n\\t *        - an address where a contract will be created\\n\\t *        - an address where a contract lived, but was destroyed\\n\\t *\\n\\t * @param addr address to check\\n\\t * @return whether the target address is a contract\\n\\t */\\n\\tfunction isContract(address addr) internal view returns (bool) {\\n\\t\\t// a variable to load `extcodesize` to\\n\\t\\tuint256 size = 0;\\n\\n\\t\\t// XXX Currently there is no better way to check if there is a contract in an address\\n\\t\\t// than to check the size of the code at that address.\\n\\t\\t// See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\\n\\t\\t// TODO: Check this again before the Serenity release, because all addresses will be contracts.\\n\\t\\t// solium-disable-next-line security/no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// retrieve the size of the code at address `addr`\\n\\t\\t\\tsize := extcodesize(addr)\\n\\t\\t}\\n\\n\\t\\t// positive size indicates a smart contract address\\n\\t\\treturn size > 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe367faf60d308a5e9a11c8c8df7b39d3656d7cfdf711e083384c72c02302ad65\",\"license\":\"MIT\"},\"contracts/lib/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n *\\n * @dev Copy of the Zeppelin's library:\\n *      https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b0cf6fbb7a70f31527f36579ad644e1cf12fdf4e/contracts/utils/cryptography/ECDSA.sol\\n */\\nlibrary ECDSA {\\n\\t/**\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\n\\t * `signature`. This address can then be used for verification purposes.\\n\\t *\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\n\\t * half order, and the `v` value to be either 27 or 28.\\n\\t *\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n\\t * verification to be secure: it is possible to craft signatures that\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n\\t * this is by receiving a hash of the original message (which may otherwise\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\n\\t *\\n\\t * Documentation for signature generation:\\n\\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n\\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n\\t */\\n\\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n\\t\\t// Divide the signature in r, s and v variables\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\tuint8 v;\\n\\n\\t\\t// Check the signature length\\n\\t\\t// - case 65: r,s,v signature (standard)\\n\\t\\t// - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n\\t\\tif (signature.length == 65) {\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\n\\t\\t\\t// currently is to use assembly.\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := mload(add(signature, 0x40))\\n\\t\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse if (signature.length == 64) {\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\n\\t\\t\\t// currently is to use assembly.\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet vs := mload(add(signature, 0x40))\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n\\t\\t\\t\\tv := add(shr(255, vs), 27)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\trevert(\\\"invalid signature length\\\");\\n\\t\\t}\\n\\n\\t\\treturn recover(hash, v, r, s);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal pure returns (address) {\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n\\t\\t// the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n\\t\\t//\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n\\t\\t// these malleable signatures as well.\\n\\t\\trequire(\\n\\t\\t\\tuint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n\\t\\t\\t\\\"invalid signature 's' value\\\"\\n\\t\\t);\\n\\t\\trequire(v == 27 || v == 28, \\\"invalid signature 'v' value\\\");\\n\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\n\\t\\trequire(signer != address(0), \\\"invalid signature\\\");\\n\\n\\t\\treturn signer;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n\\t * produces hash corresponding to the one signed with the\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n\\t * JSON-RPC method as part of EIP-191.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n\\t\\t// 32 is the length in bytes of hash,\\n\\t\\t// enforced by the type signature above\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Typed Data, created from a\\n\\t * `domainSeparator` and a `structHash`. This produces hash corresponding\\n\\t * to the one signed with the\\n\\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n\\t * JSON-RPC method as part of EIP-712.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\t}\\n}\\n\",\"keccak256\":\"0xadc0107053170d40a04da6f2da244286cb84a4dab28f8e50c1b4d386fc597f87\",\"license\":\"MIT\"},\"contracts/token/BinanceAliERC20v2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC1363Spec.sol\\\";\\nimport \\\"../interfaces/EIP2612.sol\\\";\\nimport \\\"../interfaces/EIP3009.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"../lib/AddressUtils.sol\\\";\\nimport \\\"../lib/ECDSA.sol\\\";\\n\\n/**\\n * @title Artificial Liquid Intelligence ERC20 Token (Alethea, ALI)\\n *\\n * @notice ALI is the native utility token of the Alethea AI Protocol.\\n *      It serves as protocol currency, participates in iNFTs lifecycle,\\n *      (locked when iNFT is created, released when iNFT is destroyed,\\n *      consumed when iNFT is upgraded).\\n *      ALI token powers up the governance protocol (Alethea DAO)\\n *\\n * @notice Token Summary:\\n *      - Symbol: ALI\\n *      - Name: Artificial Liquid Intelligence Token\\n *      - Decimals: 18\\n *      - Initial/maximum total supply: 10,000,000,000 ALI\\n *      - Initial supply holder (initial holder) address: 0x0738F702D1a7364d356729Cb8845701885C487A1 (configurable)\\n *      - Not mintable: new tokens cannot be created\\n *      - Burnable: existing tokens may get destroyed, total supply may decrease\\n *      - DAO Support: supports voting delegation\\n *\\n * @notice Features Summary:\\n *      - Supports atomic allowance modification, resolves well-known ERC20 issue with approve (arXiv:1907.00903)\\n *      - Voting delegation and delegation on behalf via EIP-712 (like in Compound CMP token) - gives ALI token\\n *        powerful governance capabilities by allowing holders to form voting groups by electing delegates\\n *      - Unlimited approval feature (like in 0x ZRX token) - saves gas for transfers on behalf\\n *        by eliminating the need to update \\u201cunlimited\\u201d allowance value\\n *      - ERC-1363 Payable Token - ERC721-like callback execution mechanism for transfers,\\n *        transfers on behalf and approvals; allows creation of smart contracts capable of executing callbacks\\n *        in response to transfer or approval in a single transaction\\n *      - EIP-2612: permit - 712-signed approvals - improves user experience by allowing to use a token\\n *        without having an ETH to pay gas fees\\n *      - EIP-3009: Transfer With Authorization - improves user experience by allowing to use a token\\n *        without having an ETH to pay gas fees\\n *\\n * @dev Even though smart contract has mint() function which is used to mint initial token supply,\\n *      the function is disabled forever after smart contract deployment by revoking `TOKEN_CREATOR`\\n *      permission from the deployer account\\n *\\n * @dev Token balances and total supply are effectively 192 bits long, meaning that maximum\\n *      possible total supply smart contract is able to track is 2^192 (close to 10^40 tokens)\\n *\\n * @dev Smart contract doesn't use safe math. All arithmetic operations are overflow/underflow safe.\\n *      Additionally, Solidity 0.8.7 enforces overflow/underflow safety.\\n *\\n * @dev Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903) - resolved\\n *      Related events and functions are marked with \\\"arXiv:1907.00903\\\" tag:\\n *        - event Transfer(address indexed _by, address indexed _from, address indexed _to, uint256 _value)\\n *        - event Approve(address indexed _owner, address indexed _spender, uint256 _oldValue, uint256 _value)\\n *        - function increaseAllowance(address _spender, uint256 _value) public returns (bool)\\n *        - function decreaseAllowance(address _spender, uint256 _value) public returns (bool)\\n *      See: https://arxiv.org/abs/1907.00903v1\\n *           https://ieeexplore.ieee.org/document/8802438\\n *      See: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n *\\n * @dev Reviewed\\n *      ERC-20   - according to https://eips.ethereum.org/EIPS/eip-20\\n *      ERC-1363 - according to https://eips.ethereum.org/EIPS/eip-1363\\n *      EIP-2612 - according to https://eips.ethereum.org/EIPS/eip-2612\\n *      EIP-3009 - according to https://eips.ethereum.org/EIPS/eip-3009\\n *\\n * @dev ERC20: contract has passed\\n *      - OpenZeppelin ERC20 tests\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/ERC20.behavior.js\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/ERC20.test.js\\n *      - Ref ERC1363 tests\\n *        https://github.com/vittominacori/erc1363-payable-token/blob/master/test/token/ERC1363/ERC1363.behaviour.js\\n *      - OpenZeppelin EIP2612 tests\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/extensions/draft-ERC20Permit.test.js\\n *      - Coinbase EIP3009 tests\\n *        https://github.com/CoinbaseStablecoin/eip-3009/blob/master/test/EIP3009.test.ts\\n *      - Compound voting delegation tests\\n *        https://github.com/compound-finance/compound-protocol/blob/master/tests/Governance/CompTest.js\\n *        https://github.com/compound-finance/compound-protocol/blob/master/tests/Utils/EIP712.js\\n *      - OpenZeppelin voting delegation tests\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/extensions/ERC20Votes.test.js\\n *      See adopted copies of all the tests in the project test folder\\n *\\n * @dev Compound-like voting delegation functions', public getters', and events' names\\n *      were changed for better code readability (Alethea Name <- Comp/Zeppelin name):\\n *      - votingDelegates           <- delegates\\n *      - votingPowerHistory        <- checkpoints\\n *      - votingPowerHistoryLength  <- numCheckpoints\\n *      - totalSupplyHistory        <- _totalSupplyCheckpoints (private)\\n *      - usedNonces                <- nonces (note: nonces are random instead of sequential)\\n *      - DelegateChanged (unchanged)\\n *      - VotingPowerChanged        <- DelegateVotesChanged\\n *      - votingPowerOf             <- getCurrentVotes\\n *      - votingPowerAt             <- getPriorVotes\\n *      - totalSupplyAt             <- getPriorTotalSupply\\n *      - delegate (unchanged)\\n *      - delegateWithAuthorization <- delegateBySig\\n * @dev Compound-like voting delegation improved to allow the use of random nonces like in EIP-3009,\\n *      instead of sequential; same `usedNonces` EIP-3009 mapping is used to track nonces\\n *\\n * @dev Reference implementations \\\"used\\\":\\n *      - Atomic allowance:    https://github.com/OpenZeppelin/openzeppelin-contracts\\n *      - Unlimited allowance: https://github.com/0xProject/protocol\\n *      - Voting delegation:   https://github.com/compound-finance/compound-protocol\\n *                             https://github.com/OpenZeppelin/openzeppelin-contracts\\n *      - ERC-1363:            https://github.com/vittominacori/erc1363-payable-token\\n *      - EIP-2612:            https://github.com/Uniswap/uniswap-v2-core\\n *      - EIP-3009:            https://github.com/centrehq/centre-tokens\\n *                             https://github.com/CoinbaseStablecoin/eip-3009\\n *      - Meta transactions:   https://github.com/0xProject/protocol\\n *\\n * @dev Includes resolutions for ALI ERC20 Audit by Miguel Palhas, https://hackmd.io/@naps62/alierc20-audit\\n *\\n */\\nabstract contract AliERC20v2Base is ERC1363, EIP2612, EIP3009, AccessControl {\\n\\t/**\\n\\t * @dev Smart contract unique identifier, a random number\\n\\t *\\n\\t * @dev Should be regenerated each time smart contact source code is changed\\n\\t *      and changes smart contract itself is to be redeployed\\n\\t *\\n\\t * @dev Generated using https://www.random.org/bytes/\\n\\t */\\n\\tuint256 public constant TOKEN_UID = 0x8d4fb97da97378ef7d0ad259aec651f42bd22c200159282baa58486bb390286b;\\n\\n\\t/**\\n\\t * @notice Name of the token: Artificial Liquid Intelligence Token\\n\\t *\\n\\t * @notice ERC20 name of the token (long name)\\n\\t *\\n\\t * @dev ERC20 `function name() public view returns (string)`\\n\\t *\\n\\t * @dev Field is declared public: getter name() is created when compiled,\\n\\t *      it returns the name of the token.\\n\\t */\\n\\tstring public constant name = \\\"Artificial Liquid Intelligence Token\\\";\\n\\n\\t/**\\n\\t * @notice Symbol of the token: ALI\\n\\t *\\n\\t * @notice ERC20 symbol of that token (short name)\\n\\t *\\n\\t * @dev ERC20 `function symbol() public view returns (string)`\\n\\t *\\n\\t * @dev Field is declared public: getter symbol() is created when compiled,\\n\\t *      it returns the symbol of the token\\n\\t */\\n\\tstring public constant symbol = \\\"ALI\\\";\\n\\n\\t/**\\n\\t * @notice Decimals of the token: 18\\n\\t *\\n\\t * @dev ERC20 `function decimals() public view returns (uint8)`\\n\\t *\\n\\t * @dev Field is declared public: getter decimals() is created when compiled,\\n\\t *      it returns the number of decimals used to get its user representation.\\n\\t *      For example, if `decimals` equals `6`, a balance of `1,500,000` tokens should\\n\\t *      be displayed to a user as `1,5` (`1,500,000 / 10 ** 6`).\\n\\t *\\n\\t * @dev NOTE: This information is only used for _display_ purposes: it in\\n\\t *      no way affects any of the arithmetic of the contract, including balanceOf() and transfer().\\n\\t */\\n\\tuint8 public constant decimals = 18;\\n\\n\\t/**\\n\\t * @notice Total supply of the token: initially 10,000,000,000,\\n\\t *      with the potential to decline over time as some tokens may get burnt but not minted\\n\\t *\\n\\t * @dev ERC20 `function totalSupply() public view returns (uint256)`\\n\\t *\\n\\t * @dev Field is declared public: getter totalSupply() is created when compiled,\\n\\t *      it returns the amount of tokens in existence.\\n\\t */\\n\\tuint256 public override totalSupply; // is set to 10 billion * 10^18 in the constructor\\n\\n\\t/**\\n\\t * @dev A record of all the token balances\\n\\t * @dev This mapping keeps record of all token owners:\\n\\t *      owner => balance\\n\\t */\\n\\tmapping(address => uint256) private tokenBalances;\\n\\n\\t/**\\n\\t * @notice A record of each account's voting delegate\\n\\t *\\n\\t * @dev Auxiliary data structure used to sum up an account's voting power\\n\\t *\\n\\t * @dev This mapping keeps record of all voting power delegations:\\n\\t *      voting delegator (token owner) => voting delegate\\n\\t */\\n\\tmapping(address => address) public votingDelegates;\\n\\n\\t/**\\n\\t * @notice Auxiliary structure to store key-value pair, used to store:\\n\\t *      - voting power record (key: block.timestamp, value: voting power)\\n\\t *      - total supply record (key: block.timestamp, value: total supply)\\n\\t * @notice A voting power record binds voting power of a delegate to a particular\\n\\t *      block when the voting power delegation change happened\\n\\t *         k: block.number when delegation has changed; starting from\\n\\t *            that block voting power value is in effect\\n\\t *         v: cumulative voting power a delegate has obtained starting\\n\\t *            from the block stored in blockNumber\\n\\t * @notice Total supply record binds total token supply to a particular\\n\\t *      block when total supply change happened (due to mint/burn operations)\\n\\t */\\n\\tstruct KV {\\n\\t\\t/*\\n\\t\\t * @dev key, a block number\\n\\t\\t */\\n\\t\\tuint64 k;\\n\\n\\t\\t/*\\n\\t\\t * @dev value, token balance or voting power\\n\\t\\t */\\n\\t\\tuint192 v;\\n\\t}\\n\\n\\t/**\\n\\t * @notice A record of each account's voting power historical data\\n\\t *\\n\\t * @dev Primarily data structure to store voting power for each account.\\n\\t *      Voting power sums up from the account's token balance and delegated\\n\\t *      balances.\\n\\t *\\n\\t * @dev Stores current value and entire history of its changes.\\n\\t *      The changes are stored as an array of checkpoints (key-value pairs).\\n\\t *      Checkpoint is an auxiliary data structure containing voting\\n\\t *      power (number of votes) and block number when the checkpoint is saved\\n\\t *\\n\\t * @dev Maps voting delegate => voting power record\\n\\t */\\n\\tmapping(address => KV[]) public votingPowerHistory;\\n\\n\\t/**\\n\\t * @notice A record of total token supply historical data\\n\\t *\\n\\t * @dev Primarily data structure to store total token supply.\\n\\t *\\n\\t * @dev Stores current value and entire history of its changes.\\n\\t *      The changes are stored as an array of checkpoints (key-value pairs).\\n\\t *      Checkpoint is an auxiliary data structure containing total\\n\\t *      token supply and block number when the checkpoint is saved\\n\\t */\\n\\tKV[] public totalSupplyHistory;\\n\\n\\t/**\\n\\t * @dev A record of nonces for signing/validating signatures in EIP-2612 `permit`\\n\\t *\\n\\t * @dev Note: EIP2612 doesn't imply a possibility for nonce randomization like in EIP-3009\\n\\t *\\n\\t * @dev Maps delegate address => delegate nonce\\n\\t */\\n\\tmapping(address => uint256) public override nonces;\\n\\n\\t/**\\n\\t * @dev A record of used nonces for EIP-3009 transactions\\n\\t *\\n\\t * @dev A record of used nonces for signing/validating signatures\\n\\t *      in `delegateWithAuthorization` for every delegate\\n\\t *\\n\\t * @dev Maps authorizer address => nonce => true/false (used unused)\\n\\t */\\n\\tmapping(address => mapping(bytes32 => bool)) private usedNonces;\\n\\n\\t/**\\n\\t * @notice A record of all the allowances to spend tokens on behalf\\n\\t * @dev Maps token owner address to an address approved to spend\\n\\t *      some tokens on behalf, maps approved address to that amount\\n\\t * @dev owner => spender => value\\n\\t */\\n\\tmapping(address => mapping(address => uint256)) private transferAllowances;\\n\\n\\t/**\\n\\t * @notice Enables ERC20 transfers of the tokens\\n\\t *      (transfer by the token owner himself)\\n\\t * @dev Feature FEATURE_TRANSFERS must be enabled in order for\\n\\t *      `transfer()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\\n\\n\\t/**\\n\\t * @notice Enables ERC20 transfers on behalf\\n\\t *      (transfer by someone else on behalf of token owner)\\n\\t * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\\n\\t *      `transferFrom()` function to succeed\\n\\t * @dev Token owner must call `approve()` first to authorize\\n\\t *      the transfer on behalf\\n\\t */\\n\\tuint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\\n\\n\\t/**\\n\\t * @dev Defines if the default behavior of `transfer` and `transferFrom`\\n\\t *      checks if the receiver smart contract supports ERC20 tokens\\n\\t * @dev When feature FEATURE_UNSAFE_TRANSFERS is enabled the transfers do not\\n\\t *      check if the receiver smart contract supports ERC20 tokens,\\n\\t *      i.e. `transfer` and `transferFrom` behave like `unsafeTransferFrom`\\n\\t * @dev When feature FEATURE_UNSAFE_TRANSFERS is disabled (default) the transfers\\n\\t *      check if the receiver smart contract supports ERC20 tokens,\\n\\t *      i.e. `transfer` and `transferFrom` behave like `transferFromAndCall`\\n\\t */\\n\\tuint32 public constant FEATURE_UNSAFE_TRANSFERS = 0x0000_0004;\\n\\n\\t/**\\n\\t * @notice Enables token owners to burn their own tokens\\n\\t *\\n\\t * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\n\\t *      `burn()` function to succeed when called by token owner\\n\\t */\\n\\tuint32 public constant FEATURE_OWN_BURNS = 0x0000_0008;\\n\\n\\t/**\\n\\t * @notice Enables approved operators to burn tokens on behalf of their owners\\n\\t *\\n\\t * @dev Feature FEATURE_BURNS_ON_BEHALF must be enabled in order for\\n\\t *      `burn()` function to succeed when called by approved operator\\n\\t */\\n\\tuint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0010;\\n\\n\\t/**\\n\\t * @notice Enables delegators to elect delegates\\n\\t * @dev Feature FEATURE_DELEGATIONS must be enabled in order for\\n\\t *      `delegate()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_DELEGATIONS = 0x0000_0020;\\n\\n\\t/**\\n\\t * @notice Enables delegators to elect delegates on behalf\\n\\t *      (via an EIP712 signature)\\n\\t * @dev Feature FEATURE_DELEGATIONS_ON_BEHALF must be enabled in order for\\n\\t *      `delegateWithAuthorization()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_DELEGATIONS_ON_BEHALF = 0x0000_0040;\\n\\n\\t/**\\n\\t * @notice Enables ERC-1363 transfers with callback\\n\\t * @dev Feature FEATURE_ERC1363_TRANSFERS must be enabled in order for\\n\\t *      ERC-1363 `transferFromAndCall` functions to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_ERC1363_TRANSFERS = 0x0000_0080;\\n\\n\\t/**\\n\\t * @notice Enables ERC-1363 approvals with callback\\n\\t * @dev Feature FEATURE_ERC1363_APPROVALS must be enabled in order for\\n\\t *      ERC-1363 `approveAndCall` functions to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_ERC1363_APPROVALS = 0x0000_0100;\\n\\n\\t/**\\n\\t * @notice Enables approvals on behalf (EIP2612 permits\\n\\t *      via an EIP712 signature)\\n\\t * @dev Feature FEATURE_EIP2612_PERMITS must be enabled in order for\\n\\t *      `permit()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_EIP2612_PERMITS = 0x0000_0200;\\n\\n\\t/**\\n\\t * @notice Enables meta transfers on behalf (EIP3009 transfers\\n\\t *      via an EIP712 signature)\\n\\t * @dev Feature FEATURE_EIP3009_TRANSFERS must be enabled in order for\\n\\t *      `transferWithAuthorization()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_EIP3009_TRANSFERS = 0x0000_0400;\\n\\n\\t/**\\n\\t * @notice Enables meta transfers on behalf (EIP3009 transfers\\n\\t *      via an EIP712 signature)\\n\\t * @dev Feature FEATURE_EIP3009_RECEPTIONS must be enabled in order for\\n\\t *      `receiveWithAuthorization()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_EIP3009_RECEPTIONS = 0x0000_0800;\\n\\n\\t/**\\n\\t * @notice Token creator is responsible for creating (minting)\\n\\t *      tokens to an arbitrary address\\n\\t * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\n\\t *      (calling `mint` function)\\n\\t */\\n\\tuint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\\n\\n\\t/**\\n\\t * @notice Token destroyer is responsible for destroying (burning)\\n\\t *      tokens owned by an arbitrary address\\n\\t * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\\n\\t *      (calling `burn` function)\\n\\t */\\n\\tuint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\\n\\n\\t/**\\n\\t * @notice ERC20 receivers are allowed to receive tokens without ERC20 safety checks,\\n\\t *      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\\n\\t * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled addresses having\\n\\t *      `ROLE_ERC20_RECEIVER` permission are allowed to receive tokens\\n\\t *      via `transfer` and `transferFrom` functions in the same way they\\n\\t *      would via `unsafeTransferFrom` function\\n\\t * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_RECEIVER` permission\\n\\t *      doesn't affect the transfer behaviour since\\n\\t *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\\n\\t * @dev ROLE_ERC20_RECEIVER is a shortening for ROLE_UNSAFE_ERC20_RECEIVER\\n\\t */\\n\\tuint32 public constant ROLE_ERC20_RECEIVER = 0x0004_0000;\\n\\n\\t/**\\n\\t * @notice ERC20 senders are allowed to send tokens without ERC20 safety checks,\\n\\t *      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\\n\\t * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled senders having\\n\\t *      `ROLE_ERC20_SENDER` permission are allowed to send tokens\\n\\t *      via `transfer` and `transferFrom` functions in the same way they\\n\\t *      would via `unsafeTransferFrom` function\\n\\t * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_SENDER` permission\\n\\t *      doesn't affect the transfer behaviour since\\n\\t *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\\n\\t * @dev ROLE_ERC20_SENDER is a shortening for ROLE_UNSAFE_ERC20_SENDER\\n\\t */\\n\\tuint32 public constant ROLE_ERC20_SENDER = 0x0008_0000;\\n\\n\\t/**\\n\\t * @notice EIP-712 contract's domain typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t *\\n\\t * @dev Note: we do not include version into the domain typehash/separator,\\n\\t *      it is implied version is concatenated to the name field, like \\\"AliERC20v2\\\"\\n\\t */\\n\\t// keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\")\\n\\tbytes32 public constant DOMAIN_TYPEHASH = 0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866;\\n\\n\\t/**\\n\\t * @notice EIP-712 contract's domain separator,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\n\\t */\\n\\tbytes32 public immutable override DOMAIN_SEPARATOR;\\n\\n\\t/**\\n\\t * @notice EIP-712 delegation struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"Delegation(address delegate,uint256 nonce,uint256 expiry)\\\")\\n\\tbytes32 public constant DELEGATION_TYPEHASH = 0xff41620983935eb4d4a3c7384a066ca8c1d10cef9a5eca9eb97ca735cd14a755;\\n\\n\\t/**\\n\\t * @notice EIP-712 permit (EIP-2612) struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n\\tbytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n\\t/**\\n\\t * @notice EIP-712 TransferWithAuthorization (EIP-3009) struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n\\tbytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\\n\\n\\t/**\\n\\t * @notice EIP-712 ReceiveWithAuthorization (EIP-3009) struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n\\tbytes32 public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH = 0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8;\\n\\n\\t/**\\n\\t * @notice EIP-712 CancelAuthorization (EIP-3009) struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"CancelAuthorization(address authorizer,bytes32 nonce)\\\")\\n\\tbytes32 public constant CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\\n\\n\\t/**\\n\\t * @dev Fired in mint() function\\n\\t *\\n\\t * @param by an address which minted some tokens (transaction sender)\\n\\t * @param to an address the tokens were minted to\\n\\t * @param value an amount of tokens minted\\n\\t */\\n\\tevent Minted(address indexed by, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Fired in burn() function\\n\\t *\\n\\t * @param by an address which burned some tokens (transaction sender)\\n\\t * @param from an address the tokens were burnt from\\n\\t * @param value an amount of tokens burnt\\n\\t */\\n\\tevent Burnt(address indexed by, address indexed from, uint256 value);\\n\\n\\t/**\\n\\t * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\n\\t *\\n\\t * @dev Similar to ERC20 Transfer event, but also logs an address which executed transfer\\n\\t *\\n\\t * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\\n\\t *\\n\\t * @param by an address which performed the transfer\\n\\t * @param from an address tokens were consumed from\\n\\t * @param to an address tokens were sent to\\n\\t * @param value number of tokens transferred\\n\\t */\\n\\tevent Transfer(address indexed by, address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\n\\t *\\n\\t * @dev Similar to ERC20 Approve event, but also logs old approval value\\n\\t *\\n\\t * @dev Fired in approve(), increaseAllowance(), decreaseAllowance() functions,\\n\\t *      may get fired in transfer functions\\n\\t *\\n\\t * @param owner an address which granted a permission to transfer\\n\\t *      tokens on its behalf\\n\\t * @param spender an address which received a permission to transfer\\n\\t *      tokens on behalf of the owner `_owner`\\n\\t * @param oldValue previously granted amount of tokens to transfer on behalf\\n\\t * @param value new granted amount of tokens to transfer on behalf\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 oldValue, uint256 value);\\n\\n\\t/**\\n\\t * @dev Notifies that a key-value pair in `votingDelegates` mapping has changed,\\n\\t *      i.e. a delegator address has changed its delegate address\\n\\t *\\n\\t * @param source delegator address, a token owner, effectively transaction sender (`by`)\\n\\t * @param from old delegate, an address which delegate right is revoked\\n\\t * @param to new delegate, an address which received the voting power\\n\\t */\\n\\tevent DelegateChanged(address indexed source, address indexed from, address indexed to);\\n\\n\\t/**\\n\\t * @dev Notifies that a key-value pair in `votingPowerHistory` mapping has changed,\\n\\t *      i.e. a delegate's voting power has changed.\\n\\t *\\n\\t * @param by an address which executed delegate, mint, burn, or transfer operation\\n\\t *      which had led to delegate voting power change\\n\\t * @param target delegate whose voting power has changed\\n\\t * @param fromVal previous number of votes delegate had\\n\\t * @param toVal new number of votes delegate has\\n\\t */\\n\\tevent VotingPowerChanged(address indexed by, address indexed target, uint256 fromVal, uint256 toVal);\\n\\n\\t/**\\n\\t * @dev Deploys the token smart contract,\\n\\t *      assigns initial token supply to the address specified\\n\\t *\\n\\t * @param _initialHolder owner of the initial token supply\\n\\t * @param _initialSupply initial token supply value\\n\\t */\\n\\tconstructor(address _initialHolder, uint256 _initialSupply) {\\n\\t\\t// verify initial holder address non-zero (is set) if there is an initial supply to mint\\n\\t\\trequire(_initialSupply == 0 || _initialHolder != address(0), \\\"_initialHolder not set (zero address)\\\");\\n\\n\\t\\t// build the EIP-712 contract domain separator, see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\n\\t\\t// note: we specify contract version in its name\\n\\t\\tDOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\\\"AliERC20v2\\\")), block.chainid, address(this)));\\n\\n\\t\\t// if there is an initial supply to mint\\n\\t\\tif(_initialSupply != 0) {\\n\\t\\t\\t// mint the initial supply\\n\\t\\t\\tmint(_initialHolder, _initialSupply);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC165\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\\n\\t\\t// reconstruct from current interface(s) and super interface(s) (if any)\\n\\t\\treturn interfaceId == type(ERC165).interfaceId\\n\\t\\t    || interfaceId == type(ERC20).interfaceId\\n\\t\\t    || interfaceId == type(ERC1363).interfaceId\\n\\t\\t    || interfaceId == type(EIP2612).interfaceId\\n\\t\\t    || interfaceId == type(EIP3009).interfaceId;\\n\\t}\\n\\n\\t// ===== Start: ERC-1363 functions =====\\n\\n\\t/**\\n\\t * @notice Transfers some tokens and then executes `onTransferReceived` callback on the receiver\\n\\t *\\n\\t * @inheritdoc ERC1363\\n\\t *\\n\\t * @dev Called by token owner (an address which has a\\n\\t *      positive token balance tracked by this smart contract)\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * EOA or smart contract which doesn't support ERC1363Receiver interface\\n\\t * @dev Returns true on success, throws otherwise\\n\\t *\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be a smart contract, implementing ERC1363Receiver\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferAndCall(address _to, uint256 _value) public override returns (bool) {\\n\\t\\t// delegate to `transferFromAndCall` passing `msg.sender` as `_from`\\n\\t\\treturn transferFromAndCall(msg.sender, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfers some tokens and then executes `onTransferReceived` callback on the receiver\\n\\t *\\n\\t * @inheritdoc ERC1363\\n\\t *\\n\\t * @dev Called by token owner (an address which has a\\n\\t *      positive token balance tracked by this smart contract)\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * EOA or smart contract which doesn't support ERC1363Receiver interface\\n\\t * @dev Returns true on success, throws otherwise\\n\\t *\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be a smart contract, implementing ERC1363Receiver\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @param _data [optional] additional data with no specified format,\\n\\t *      sent in onTransferReceived call to `_to`\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferAndCall(address _to, uint256 _value, bytes memory _data) public override returns (bool) {\\n\\t\\t// delegate to `transferFromAndCall` passing `msg.sender` as `_from`\\n\\t\\treturn transferFromAndCall(msg.sender, _to, _value, _data);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to` and then executes `onTransferReceived` callback on the receiver\\n\\t *\\n\\t * @inheritdoc ERC1363\\n\\t *\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * EOA or smart contract which doesn't support ERC1363Receiver interface\\n\\t * @dev Returns true on success, throws otherwise\\n\\t *\\n\\t * @param _from token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be a smart contract, implementing ERC1363Receiver\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferFromAndCall(address _from, address _to, uint256 _value) public override returns (bool) {\\n\\t\\t// delegate to `transferFromAndCall` passing empty data param\\n\\t\\treturn transferFromAndCall(_from, _to, _value, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to` and then executes a `onTransferReceived` callback on the receiver\\n\\t *\\n\\t * @inheritdoc ERC1363\\n\\t *\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * EOA or smart contract which doesn't support ERC1363Receiver interface\\n\\t * @dev Returns true on success, throws otherwise\\n\\t *\\n\\t * @param _from token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be a smart contract, implementing ERC1363Receiver\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @param _data [optional] additional data with no specified format,\\n\\t *      sent in onTransferReceived call to `_to`\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction transferFromAndCall(address _from, address _to, uint256 _value, bytes memory _data) public override returns (bool) {\\n\\t\\t// ensure ERC-1363 transfers are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_ERC1363_TRANSFERS), \\\"ERC1363 transfers are disabled\\\");\\n\\n\\t\\t// first delegate call to `unsafeTransferFrom` to perform the unsafe token(s) transfer\\n\\t\\tunsafeTransferFrom(_from, _to, _value);\\n\\n\\t\\t// after the successful transfer - check if receiver supports\\n\\t\\t// ERC1363Receiver and execute a callback handler `onTransferReceived`,\\n\\t\\t// reverting whole transaction on any error\\n\\t\\t_notifyTransferred(_from, _to, _value, _data, false);\\n\\n\\t\\t// function throws on any error, so if we're here - it means operation successful, just return true\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Approves address called `_spender` to transfer some amount\\n\\t *      of tokens on behalf of the owner, then executes a `onApprovalReceived` callback on `_spender`\\n\\t *\\n\\t * @inheritdoc ERC1363\\n\\t *\\n\\t * @dev Caller must not necessarily own any tokens to grant the permission\\n\\t *\\n\\t * @dev Throws if `_spender` is an EOA or a smart contract which doesn't support ERC1363Spender interface\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction approveAndCall(address _spender, uint256 _value) public override returns (bool) {\\n\\t\\t// delegate to `approveAndCall` passing empty data\\n\\t\\treturn approveAndCall(_spender, _value, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice Approves address called `_spender` to transfer some amount\\n\\t *      of tokens on behalf of the owner, then executes a callback on `_spender`\\n\\t *\\n\\t * @inheritdoc ERC1363\\n\\t *\\n\\t * @dev Caller must not necessarily own any tokens to grant the permission\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @param _data [optional] additional data with no specified format,\\n\\t *      sent in onApprovalReceived call to `_spender`\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction approveAndCall(address _spender, uint256 _value, bytes memory _data) public override returns (bool) {\\n\\t\\t// ensure ERC-1363 approvals are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_ERC1363_APPROVALS), \\\"ERC1363 approvals are disabled\\\");\\n\\n\\t\\t// execute regular ERC20 approve - delegate to `approve`\\n\\t\\tapprove(_spender, _value);\\n\\n\\t\\t// after the successful approve - check if receiver supports\\n\\t\\t// ERC1363Spender and execute a callback handler `onApprovalReceived`,\\n\\t\\t// reverting whole transaction on any error\\n\\t\\t_notifyApproved(_spender, _value, _data);\\n\\n\\t\\t// function throws on any error, so if we're here - it means operation successful, just return true\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to invoke `onTransferReceived` on a target address\\n\\t *      The call is not executed if the target address is not a contract; in such\\n\\t *      a case function throws if `allowEoa` is set to false, succeeds if it's true\\n\\t *\\n\\t * @dev Throws on any error; returns silently on success\\n\\t *\\n\\t * @param _from representing the previous owner of the given token value\\n\\t * @param _to target address that will receive the tokens\\n\\t * @param _value the amount mount of tokens to be transferred\\n\\t * @param _data [optional] data to send along with the call\\n\\t * @param allowEoa indicates if function should fail if `_to` is an EOA\\n\\t */\\n\\tfunction _notifyTransferred(address _from, address _to, uint256 _value, bytes memory _data, bool allowEoa) private {\\n\\t\\t// if recipient `_to` is EOA\\n\\t\\tif (!AddressUtils.isContract(_to)) {\\n\\t\\t\\t// ensure EOA recipient is allowed\\n\\t\\t\\trequire(allowEoa, \\\"EOA recipient\\\");\\n\\n\\t\\t\\t// exit if successful\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// otherwise - if `_to` is a contract - execute onTransferReceived\\n\\t\\tbytes4 response = ERC1363Receiver(_to).onTransferReceived(msg.sender, _from, _value, _data);\\n\\n\\t\\t// expected response is ERC1363Receiver(_to).onTransferReceived.selector\\n\\t\\t// bytes4(keccak256(\\\"onTransferReceived(address,address,uint256,bytes)\\\"))\\n\\t\\trequire(response == ERC1363Receiver(_to).onTransferReceived.selector, \\\"invalid onTransferReceived response\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to invoke `onApprovalReceived` on a target address\\n\\t *      The call is not executed if the target address is not a contract; in such\\n\\t *      a case function throws if `allowEoa` is set to false, succeeds if it's true\\n\\t *\\n\\t * @dev Throws on any error; returns silently on success\\n\\t *\\n\\t * @param _spender the address which will spend the funds\\n\\t * @param _value the amount of tokens to be spent\\n\\t * @param _data [optional] data to send along with the call\\n\\t */\\n\\tfunction _notifyApproved(address _spender, uint256 _value, bytes memory _data) private {\\n\\t\\t// ensure recipient is not EOA\\n\\t\\trequire(AddressUtils.isContract(_spender), \\\"EOA spender\\\");\\n\\n\\t\\t// otherwise - if `_to` is a contract - execute onApprovalReceived\\n\\t\\tbytes4 response = ERC1363Spender(_spender).onApprovalReceived(msg.sender, _value, _data);\\n\\n\\t\\t// expected response is ERC1363Spender(_to).onApprovalReceived.selector\\n\\t\\t// bytes4(keccak256(\\\"onApprovalReceived(address,uint256,bytes)\\\"))\\n\\t\\trequire(response == ERC1363Spender(_spender).onApprovalReceived.selector, \\\"invalid onApprovalReceived response\\\");\\n\\t}\\n\\t// ===== End: ERC-1363 functions =====\\n\\n\\t// ===== Start: ERC20 functions =====\\n\\n\\t/**\\n\\t * @notice Gets the balance of a particular address\\n\\t *\\n\\t * @inheritdoc ERC20\\n\\t *\\n\\t * @param _owner the address to query the the balance for\\n\\t * @return balance an amount of tokens owned by the address specified\\n\\t */\\n\\tfunction balanceOf(address _owner) public view override returns (uint256 balance) {\\n\\t\\t// read the balance and return\\n\\t\\treturn tokenBalances[_owner];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfers some tokens to an external address or a smart contract\\n\\t *\\n\\t * @inheritdoc ERC20\\n\\t *\\n\\t * @dev Called by token owner (an address which has a\\n\\t *      positive token balance tracked by this smart contract)\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * self address or\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transfer(address _to, uint256 _value) public override returns (bool success) {\\n\\t\\t// just delegate call to `transferFrom`,\\n\\t\\t// `FEATURE_TRANSFERS` is verified inside it\\n\\t\\treturn transferFrom(msg.sender, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to`\\n\\t *\\n\\t * @inheritdoc ERC20\\n\\t *\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _from token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\\n\\t\\t// depending on `FEATURE_UNSAFE_TRANSFERS` we execute either safe (default)\\n\\t\\t// or unsafe transfer\\n\\t\\t// if `FEATURE_UNSAFE_TRANSFERS` is enabled\\n\\t\\t// or receiver has `ROLE_ERC20_RECEIVER` permission\\n\\t\\t// or sender has `ROLE_ERC20_SENDER` permission\\n\\t\\tif(isFeatureEnabled(FEATURE_UNSAFE_TRANSFERS)\\n\\t\\t\\t|| isOperatorInRole(_to, ROLE_ERC20_RECEIVER)\\n\\t\\t\\t|| isSenderInRole(ROLE_ERC20_SENDER)) {\\n\\t\\t\\t// we execute unsafe transfer - delegate call to `unsafeTransferFrom`,\\n\\t\\t\\t// `FEATURE_TRANSFERS` is verified inside it\\n\\t\\t\\tunsafeTransferFrom(_from, _to, _value);\\n\\t\\t}\\n\\t\\t// otherwise - if `FEATURE_UNSAFE_TRANSFERS` is disabled\\n\\t\\t// and receiver doesn't have `ROLE_ERC20_RECEIVER` permission\\n\\t\\telse {\\n\\t\\t\\t// we execute safe transfer - delegate call to `safeTransferFrom`, passing empty `_data`,\\n\\t\\t\\t// `FEATURE_TRANSFERS` is verified inside it\\n\\t\\t\\tsafeTransferFrom(_from, _to, _value, \\\"\\\");\\n\\t\\t}\\n\\n\\t\\t// both `unsafeTransferFrom` and `safeTransferFrom` throw on any error, so\\n\\t\\t// if we're here - it means operation successful,\\n\\t\\t// just return true\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to` and then executes `onTransferReceived` callback\\n\\t *      on the receiver if it is a smart contract (not an EOA)\\n\\t *\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * smart contract which doesn't support ERC1363Receiver interface\\n\\t * @dev Returns true on success, throws otherwise\\n\\t *\\n\\t * @param _from token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      implementing ERC1363Receiver\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @param _data [optional] additional data with no specified format,\\n\\t *      sent in onTransferReceived call to `_to` in case if its a smart contract\\n\\t * @return true unless throwing\\n\\t */\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _value, bytes memory _data) public returns (bool) {\\n\\t\\t// first delegate call to `unsafeTransferFrom` to perform the unsafe token(s) transfer\\n\\t\\tunsafeTransferFrom(_from, _to, _value);\\n\\n\\t\\t// after the successful transfer - check if receiver supports\\n\\t\\t// ERC1363Receiver and execute a callback handler `onTransferReceived`,\\n\\t\\t// reverting whole transaction on any error\\n\\t\\t_notifyTransferred(_from, _to, _value, _data, true);\\n\\n\\t\\t// function throws on any error, so if we're here - it means operation successful, just return true\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to`\\n\\t *\\n\\t * @dev In contrast to `transferFromAndCall` doesn't check recipient\\n\\t *      smart contract to support ERC20 tokens (ERC1363Receiver)\\n\\t * @dev Designed to be used by developers when the receiver is known\\n\\t *      to support ERC20 tokens but doesn't implement ERC1363Receiver interface\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t * @dev Returns silently on success, throws otherwise\\n\\t *\\n\\t * @param _from token sender, token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to token receiver, an address to transfer tokens to\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t */\\n\\tfunction unsafeTransferFrom(address _from, address _to, uint256 _value) public {\\n\\t\\t// make an internal transferFrom - delegate to `__transferFrom`\\n\\t\\t__transferFrom(msg.sender, _from, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Powers the meta transactions for `unsafeTransferFrom` - EIP-3009 `transferWithAuthorization`\\n\\t *      and `receiveWithAuthorization`\\n\\t *\\n\\t * @dev See `unsafeTransferFrom` and `transferFrom` soldoc for details\\n\\t *\\n\\t * @param _by an address executing the transfer, it can be token owner itself,\\n\\t *      or an operator previously approved with `approve()`\\n\\t * @param _from token sender, token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to token receiver, an address to transfer tokens to\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t */\\n\\tfunction __transferFrom(address _by, address _from, address _to, uint256 _value) private {\\n\\t\\t// if `_from` is equal to sender, require transfers feature to be enabled\\n\\t\\t// otherwise require transfers on behalf feature to be enabled\\n\\t\\trequire(_from == _by && isFeatureEnabled(FEATURE_TRANSFERS)\\n\\t\\t     || _from != _by && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\\n\\t\\t        _from == _by? \\\"transfers are disabled\\\": \\\"transfers on behalf are disabled\\\");\\n\\n\\t\\t// non-zero source address check - Zeppelin\\n\\t\\t// obviously, zero source address is a client mistake\\n\\t\\t// it's not part of ERC20 standard but it's reasonable to fail fast\\n\\t\\t// since for zero value transfer transaction succeeds otherwise\\n\\t\\trequire(_from != address(0), \\\"transfer from the zero address\\\");\\n\\n\\t\\t// non-zero recipient address check\\n\\t\\trequire(_to != address(0), \\\"transfer to the zero address\\\");\\n\\n\\t\\t// sender and recipient cannot be the same\\n\\t\\trequire(_from != _to, \\\"sender and recipient are the same (_from = _to)\\\");\\n\\n\\t\\t// sending tokens to the token smart contract itself is a client mistake\\n\\t\\trequire(_to != address(this), \\\"invalid recipient (transfer to the token smart contract itself)\\\");\\n\\n\\t\\t// according to ERC-20 Token Standard, https://eips.ethereum.org/EIPS/eip-20\\n\\t\\t// \\\"Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\\\"\\n\\t\\tif(_value == 0) {\\n\\t\\t\\t// emit an ERC20 transfer event\\n\\t\\t\\temit Transfer(_from, _to, _value);\\n\\n\\t\\t\\t// don't forget to return - we're done\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// no need to make arithmetic overflow check on the _value - by design of mint()\\n\\n\\t\\t// in case of transfer on behalf\\n\\t\\tif(_from != _by) {\\n\\t\\t\\t// read allowance value - the amount of tokens allowed to transfer - into the stack\\n\\t\\t\\tuint256 _allowance = transferAllowances[_from][_by];\\n\\n\\t\\t\\t// verify sender has an allowance to transfer amount of tokens requested\\n\\t\\t\\trequire(_allowance >= _value, \\\"transfer amount exceeds allowance\\\");\\n\\n\\t\\t\\t// we treat max uint256 allowance value as an \\\"unlimited\\\" and\\n\\t\\t\\t// do not decrease allowance when it is set to \\\"unlimited\\\" value\\n\\t\\t\\tif(_allowance < type(uint256).max) {\\n\\t\\t\\t\\t// update allowance value on the stack\\n\\t\\t\\t\\t_allowance -= _value;\\n\\n\\t\\t\\t\\t// update the allowance value in storage\\n\\t\\t\\t\\ttransferAllowances[_from][_by] = _allowance;\\n\\n\\t\\t\\t\\t// emit an improved atomic approve event\\n\\t\\t\\t\\temit Approval(_from, _by, _allowance + _value, _allowance);\\n\\n\\t\\t\\t\\t// emit an ERC20 approval event to reflect the decrease\\n\\t\\t\\t\\temit Approval(_from, _by, _allowance);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// verify sender has enough tokens to transfer on behalf\\n\\t\\trequire(tokenBalances[_from] >= _value, \\\"transfer amount exceeds balance\\\");\\n\\n\\t\\t// perform the transfer:\\n\\t\\t// decrease token owner (sender) balance\\n\\t\\ttokenBalances[_from] -= _value;\\n\\n\\t\\t// increase `_to` address (receiver) balance\\n\\t\\ttokenBalances[_to] += _value;\\n\\n\\t\\t// move voting power associated with the tokens transferred\\n\\t\\t__moveVotingPower(_by, votingDelegates[_from], votingDelegates[_to], _value);\\n\\n\\t\\t// emit an improved transfer event (arXiv:1907.00903)\\n\\t\\temit Transfer(_by, _from, _to, _value);\\n\\n\\t\\t// emit an ERC20 transfer event\\n\\t\\temit Transfer(_from, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Approves address called `_spender` to transfer some amount\\n\\t *      of tokens on behalf of the owner (transaction sender)\\n\\t *\\n\\t * @inheritdoc ERC20\\n\\t *\\n\\t * @dev Transaction sender must not necessarily own any tokens to grant the permission\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction approve(address _spender, uint256 _value) public override returns (bool success) {\\n\\t\\t// make an internal approve - delegate to `__approve`\\n\\t\\t__approve(msg.sender, _spender, _value);\\n\\n\\t\\t// operation successful, return true\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Powers the meta transaction for `approve` - EIP-2612 `permit`\\n\\t *\\n\\t * @dev Approves address called `_spender` to transfer some amount\\n\\t *      of tokens on behalf of the `_owner`\\n\\t *\\n\\t * @dev `_owner` must not necessarily own any tokens to grant the permission\\n\\t * @dev Throws if `_spender` is a zero address\\n\\t *\\n\\t * @param _owner owner of the tokens to set approval on behalf of\\n\\t * @param _spender an address approved by the token owner\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t */\\n\\tfunction __approve(address _owner, address _spender, uint256 _value) private {\\n\\t\\t// non-zero spender address check - Zeppelin\\n\\t\\t// obviously, zero spender address is a client mistake\\n\\t\\t// it's not part of ERC20 standard but it's reasonable to fail fast\\n\\t\\trequire(_spender != address(0), \\\"approve to the zero address\\\");\\n\\n\\t\\t// read old approval value to emmit an improved event (arXiv:1907.00903)\\n\\t\\tuint256 _oldValue = transferAllowances[_owner][_spender];\\n\\n\\t\\t// perform an operation: write value requested into the storage\\n\\t\\ttransferAllowances[_owner][_spender] = _value;\\n\\n\\t\\t// emit an improved atomic approve event (arXiv:1907.00903)\\n\\t\\temit Approval(_owner, _spender, _oldValue, _value);\\n\\n\\t\\t// emit an ERC20 approval event\\n\\t\\temit Approval(_owner, _spender, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\n\\t *\\n\\t * @inheritdoc ERC20\\n\\t *\\n\\t * @dev A function to check an amount of tokens owner approved\\n\\t *      to transfer on its behalf by some other address called \\\"spender\\\"\\n\\t *\\n\\t * @param _owner an address which approves transferring some tokens on its behalf\\n\\t * @param _spender an address approved to transfer some tokens on behalf\\n\\t * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\n\\t *      of token owner `_owner`\\n\\t */\\n\\tfunction allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\\n\\t\\t// read the value from storage and return\\n\\t\\treturn transferAllowances[_owner][_spender];\\n\\t}\\n\\n\\t// ===== End: ERC20 functions =====\\n\\n\\t// ===== Start: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903) =====\\n\\n\\t/**\\n\\t * @notice Increases the allowance granted to `spender` by the transaction sender\\n\\t *\\n\\t * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\n\\t *\\n\\t * @dev Throws if value to increase by is zero or too big and causes arithmetic overflow\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens to increase by\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction increaseAllowance(address _spender, uint256 _value) public returns (bool) {\\n\\t\\t// read current allowance value\\n\\t\\tuint256 currentVal = transferAllowances[msg.sender][_spender];\\n\\n\\t\\t// non-zero _value and arithmetic overflow check on the allowance\\n\\t\\tunchecked {\\n\\t\\t\\t// put operation into unchecked block to display user-friendly overflow error message for Solidity 0.8+\\n\\t\\t\\trequire(currentVal + _value > currentVal, \\\"zero value approval increase or arithmetic overflow\\\");\\n\\t\\t}\\n\\n\\t\\t// delegate call to `approve` with the new value\\n\\t\\treturn approve(_spender, currentVal + _value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Decreases the allowance granted to `spender` by the caller.\\n\\t *\\n\\t * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\n\\t *\\n\\t * @dev Throws if value to decrease by is zero or is greater than currently allowed value\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens to decrease by\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction decreaseAllowance(address _spender, uint256 _value) public returns (bool) {\\n\\t\\t// read current allowance value\\n\\t\\tuint256 currentVal = transferAllowances[msg.sender][_spender];\\n\\n\\t\\t// non-zero _value check on the allowance\\n\\t\\trequire(_value > 0, \\\"zero value approval decrease\\\");\\n\\n\\t\\t// verify allowance decrease doesn't underflow\\n\\t\\trequire(currentVal >= _value, \\\"ERC20: decreased allowance below zero\\\");\\n\\n\\t\\t// delegate call to `approve` with the new value\\n\\t\\treturn approve(_spender, currentVal - _value);\\n\\t}\\n\\n\\t// ===== End: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903) =====\\n\\n\\t// ===== Start: Minting/burning extension =====\\n\\n\\t/**\\n\\t * @dev Mints (creates) some tokens to address specified\\n\\t * @dev The value specified is treated as is without taking\\n\\t *      into account what `decimals` value is\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @dev Throws on overflow, if totalSupply + _value doesn't fit into uint256\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _value an amount of tokens to mint (create)\\n\\t * @return true function always returns true as it's prerequisite of multichain-bridge.\\n\\t */\\n\\tfunction mint(address _to, uint256 _value) public returns(bool) {\\n\\t\\t// check if caller has sufficient permissions to mint tokens\\n\\t\\trequire(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"access denied\\\");\\n\\n\\t\\t// non-zero recipient address check\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\n\\n\\t\\t// non-zero _value and arithmetic overflow check on the total supply\\n\\t\\t// this check automatically secures arithmetic overflow on the individual balance\\n\\t\\tunchecked {\\n\\t\\t\\t// put operation into unchecked block to display user-friendly overflow error message for Solidity 0.8+\\n\\t\\t\\trequire(totalSupply + _value > totalSupply, \\\"zero value or arithmetic overflow\\\");\\n\\t\\t}\\n\\n\\t\\t// uint192 overflow check (required by voting delegation)\\n\\t\\trequire(totalSupply + _value <= type(uint192).max, \\\"total supply overflow (uint192)\\\");\\n\\n\\t\\t// perform mint:\\n\\t\\t// increase total amount of tokens value\\n\\t\\ttotalSupply += _value;\\n\\n\\t\\t// increase `_to` address balance\\n\\t\\ttokenBalances[_to] += _value;\\n\\n\\t\\t// update total token supply history\\n\\t\\t__updateHistory(totalSupplyHistory, add, _value);\\n\\n\\t\\t// create voting power associated with the tokens minted\\n\\t\\t__moveVotingPower(msg.sender, address(0), votingDelegates[_to], _value);\\n\\n\\t\\t// fire a minted event\\n\\t\\temit Minted(msg.sender, _to, _value);\\n\\n\\t\\t// emit an improved transfer event (arXiv:1907.00903)\\n\\t\\temit Transfer(msg.sender, address(0), _to, _value);\\n\\n\\t\\t// fire ERC20 compliant transfer event\\n\\t\\temit Transfer(address(0), _to, _value);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Burns (destroys) some tokens from the address specified\\n\\t *\\n\\t * @dev The value specified is treated as is without taking\\n\\t *      into account what `decimals` value is\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_DESTROYER` permission\\n\\t *      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabled\\n\\t *\\n\\t * @dev Can be disabled by the contract creator forever by disabling\\n\\t *      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking\\n\\t *      its own roles to burn tokens and to enable burning features\\n\\t *\\n\\t * @param _from an address to burn some tokens from\\n\\t * @param _value an amount of tokens to burn (destroy)\\n\\t * @return true function always returns true as it's prerequisite of multichain-bridge.\\n\\t */\\n\\tfunction burn(address _from, uint256 _value) public returns(bool) {\\n\\t\\t// check if caller has sufficient permissions to burn tokens\\n\\t\\t// and if not - check for possibility to burn own tokens or to burn on behalf\\n\\t\\tif(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\\n\\t\\t\\t// if `_from` is equal to sender, require own burns feature to be enabled\\n\\t\\t\\t// otherwise require burns on behalf feature to be enabled\\n\\t\\t\\trequire(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\\n\\t\\t\\t     || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\\n\\t\\t\\t        _from == msg.sender? \\\"burns are disabled\\\": \\\"burns on behalf are disabled\\\");\\n\\n\\t\\t\\t// in case of burn on behalf\\n\\t\\t\\tif(_from != msg.sender) {\\n\\t\\t\\t\\t// read allowance value - the amount of tokens allowed to be burnt - into the stack\\n\\t\\t\\t\\tuint256 _allowance = transferAllowances[_from][msg.sender];\\n\\n\\t\\t\\t\\t// verify sender has an allowance to burn amount of tokens requested\\n\\t\\t\\t\\trequire(_allowance >= _value, \\\"burn amount exceeds allowance\\\");\\n\\n\\t\\t\\t\\t// we treat max uint256 allowance value as an \\\"unlimited\\\" and\\n\\t\\t\\t\\t// do not decrease allowance when it is set to \\\"unlimited\\\" value\\n\\t\\t\\t\\tif(_allowance < type(uint256).max) {\\n\\t\\t\\t\\t\\t// update allowance value on the stack\\n\\t\\t\\t\\t\\t_allowance -= _value;\\n\\n\\t\\t\\t\\t\\t// update the allowance value in storage\\n\\t\\t\\t\\t\\ttransferAllowances[_from][msg.sender] = _allowance;\\n\\n\\t\\t\\t\\t\\t// emit an improved atomic approve event (arXiv:1907.00903)\\n\\t\\t\\t\\t\\temit Approval(msg.sender, _from, _allowance + _value, _allowance);\\n\\n\\t\\t\\t\\t\\t// emit an ERC20 approval event to reflect the decrease\\n\\t\\t\\t\\t\\temit Approval(_from, msg.sender, _allowance);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// at this point we know that either sender is ROLE_TOKEN_DESTROYER or\\n\\t\\t// we burn own tokens or on behalf (in latest case we already checked and updated allowances)\\n\\t\\t// we have left to execute balance checks and burning logic itself\\n\\n\\t\\t// non-zero burn value check\\n\\t\\trequire(_value != 0, \\\"zero value burn\\\");\\n\\n\\t\\t// non-zero source address check - Zeppelin\\n\\t\\trequire(_from != address(0), \\\"burn from the zero address\\\");\\n\\n\\t\\t// verify `_from` address has enough tokens to destroy\\n\\t\\t// (basically this is a arithmetic overflow check)\\n\\t\\trequire(tokenBalances[_from] >= _value, \\\"burn amount exceeds balance\\\");\\n\\n\\t\\t// perform burn:\\n\\t\\t// decrease `_from` address balance\\n\\t\\ttokenBalances[_from] -= _value;\\n\\n\\t\\t// decrease total amount of tokens value\\n\\t\\ttotalSupply -= _value;\\n\\n\\t\\t// update total token supply history\\n\\t\\t__updateHistory(totalSupplyHistory, sub, _value);\\n\\n\\t\\t// destroy voting power associated with the tokens burnt\\n\\t\\t__moveVotingPower(msg.sender, votingDelegates[_from], address(0), _value);\\n\\n\\t\\t// fire a burnt event\\n\\t\\temit Burnt(msg.sender, _from, _value);\\n\\n\\t\\t// emit an improved transfer event (arXiv:1907.00903)\\n\\t\\temit Transfer(msg.sender, _from, address(0), _value);\\n\\n\\t\\t// fire ERC20 compliant transfer event\\n\\t\\temit Transfer(_from, address(0), _value);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\t// ===== End: Minting/burning extension =====\\n\\n\\t// ===== Start: EIP-2612 functions =====\\n\\n\\t/**\\n\\t * @inheritdoc EIP2612\\n\\t *\\n\\t * @dev Executes approve(_spender, _value) on behalf of the owner who EIP-712\\n\\t *      signed the transaction, i.e. as if transaction sender is the EIP712 signer\\n\\t *\\n\\t * @dev Sets the `_value` as the allowance of `_spender` over `_owner` tokens,\\n\\t *      given `_owner` EIP-712 signed approval\\n\\t *\\n\\t * @dev Inherits the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)\\n\\t *      vulnerability in the same way as ERC20 `approve`, use standard ERC20 workaround\\n\\t *      if this might become an issue:\\n\\t *      https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/edit\\n\\t *\\n\\t * @dev Emits `Approval` event(s) in the same way as `approve` does\\n\\t *\\n\\t * @dev Requires:\\n\\t *     - `_spender` to be non-zero address\\n\\t *     - `_exp` to be a timestamp in the future\\n\\t *     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`\\n\\t *        over the EIP712-formatted function arguments.\\n\\t *     - the signature to use `_owner` current nonce (see `nonces`).\\n\\t *\\n\\t * @dev For more information on the signature format, see the\\n\\t *      https://eips.ethereum.org/EIPS/eip-2612#specification\\n\\t *\\n\\t * @param _owner owner of the tokens to set approval on behalf of,\\n\\t *      an address which signed the EIP-712 message\\n\\t * @param _spender an address approved by the token owner\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @param _exp signature expiration time (unix timestamp)\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction permit(address _owner, address _spender, uint256 _value, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public override {\\n\\t\\t// verify permits are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_EIP2612_PERMITS), \\\"EIP2612 permits are disabled\\\");\\n\\n\\t\\t// derive signer of the EIP712 Permit message, and\\n\\t\\t// update the nonce for that particular signer to avoid replay attack!!! --------->>> \\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\n\\t\\taddress signer = __deriveSigner(abi.encode(PERMIT_TYPEHASH, _owner, _spender, _value, nonces[_owner]++, _exp), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(signer == _owner, \\\"invalid signature\\\");\\n\\t\\trequire(block.timestamp < _exp, \\\"signature expired\\\");\\n\\n\\t\\t// delegate call to `__approve` - execute the logic required\\n\\t\\t__approve(_owner, _spender, _value);\\n\\t}\\n\\n\\t// ===== End: EIP-2612 functions =====\\n\\n\\t// ===== Start: EIP-3009 functions =====\\n\\n\\t/**\\n\\t * @inheritdoc EIP3009\\n\\t *\\n\\t * @notice Checks if specified nonce was already used\\n\\t *\\n\\t * @dev Nonces are expected to be client-side randomly generated 32-byte values\\n\\t *      unique to the authorizer's address\\n\\t *\\n\\t * @dev Alias for usedNonces(authorizer, nonce)\\n\\t *\\n\\t * @param _authorizer an address to check nonce for\\n\\t * @param _nonce a nonce to check\\n\\t * @return true if the nonce was used, false otherwise\\n\\t */\\n\\tfunction authorizationState(address _authorizer, bytes32 _nonce) public override view returns (bool) {\\n\\t\\t// simply return the value from the mapping\\n\\t\\treturn usedNonces[_authorizer][_nonce];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc EIP3009\\n\\t *\\n\\t * @notice Execute a transfer with a signed authorization\\n\\t *\\n\\t * @param _from token sender and transaction authorizer\\n\\t * @param _to token receiver\\n\\t * @param _value amount to be transferred\\n\\t * @param _validAfter signature valid after time (unix timestamp)\\n\\t * @param _validBefore signature valid before time (unix timestamp)\\n\\t * @param _nonce unique random nonce\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction transferWithAuthorization(\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _value,\\n\\t\\tuint256 _validAfter,\\n\\t\\tuint256 _validBefore,\\n\\t\\tbytes32 _nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public override {\\n\\t\\t// ensure EIP-3009 transfers are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_EIP3009_TRANSFERS), \\\"EIP3009 transfers are disabled\\\");\\n\\n\\t\\t// derive signer of the EIP712 TransferWithAuthorization message\\n\\t\\taddress signer = __deriveSigner(abi.encode(TRANSFER_WITH_AUTHORIZATION_TYPEHASH, _from, _to, _value, _validAfter, _validBefore, _nonce), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(signer == _from, \\\"invalid signature\\\");\\n\\t\\trequire(block.timestamp > _validAfter, \\\"signature not yet valid\\\");\\n\\t\\trequire(block.timestamp < _validBefore, \\\"signature expired\\\");\\n\\n\\t\\t// use the nonce supplied (verify, mark as used, emit event)\\n\\t\\t__useNonce(_from, _nonce, false);\\n\\n\\t\\t// delegate call to `__transferFrom` - execute the logic required\\n\\t\\t__transferFrom(signer, _from, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc EIP3009\\n\\t *\\n\\t * @notice Receive a transfer with a signed authorization from the payer\\n\\t *\\n\\t * @dev This has an additional check to ensure that the payee's address\\n\\t *      matches the caller of this function to prevent front-running attacks.\\n\\t *\\n\\t * @param _from token sender and transaction authorizer\\n\\t * @param _to token receiver\\n\\t * @param _value amount to be transferred\\n\\t * @param _validAfter signature valid after time (unix timestamp)\\n\\t * @param _validBefore signature valid before time (unix timestamp)\\n\\t * @param _nonce unique random nonce\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction receiveWithAuthorization(\\n\\t\\taddress _from,\\n\\t\\taddress _to,\\n\\t\\tuint256 _value,\\n\\t\\tuint256 _validAfter,\\n\\t\\tuint256 _validBefore,\\n\\t\\tbytes32 _nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public override {\\n\\t\\t// verify EIP3009 receptions are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_EIP3009_RECEPTIONS), \\\"EIP3009 receptions are disabled\\\");\\n\\n\\t\\t// derive signer of the EIP712 ReceiveWithAuthorization message\\n\\t\\taddress signer = __deriveSigner(abi.encode(RECEIVE_WITH_AUTHORIZATION_TYPEHASH, _from, _to, _value, _validAfter, _validBefore, _nonce), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(signer == _from, \\\"invalid signature\\\");\\n\\t\\trequire(block.timestamp > _validAfter, \\\"signature not yet valid\\\");\\n\\t\\trequire(block.timestamp < _validBefore, \\\"signature expired\\\");\\n\\t\\trequire(_to == msg.sender, \\\"access denied\\\");\\n\\n\\t\\t// use the nonce supplied (verify, mark as used, emit event)\\n\\t\\t__useNonce(_from, _nonce, false);\\n\\n\\t\\t// delegate call to `__transferFrom` - execute the logic required\\n\\t\\t__transferFrom(signer, _from, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc EIP3009\\n\\t *\\n\\t * @notice Attempt to cancel an authorization\\n\\t *\\n\\t * @param _authorizer transaction authorizer\\n\\t * @param _nonce unique random nonce to cancel (mark as used)\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction cancelAuthorization(\\n\\t\\taddress _authorizer,\\n\\t\\tbytes32 _nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public override {\\n\\t\\t// derive signer of the EIP712 ReceiveWithAuthorization message\\n\\t\\taddress signer = __deriveSigner(abi.encode(CANCEL_AUTHORIZATION_TYPEHASH, _authorizer, _nonce), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(signer == _authorizer, \\\"invalid signature\\\");\\n\\n\\t\\t// cancel the nonce supplied (verify, mark as used, emit event)\\n\\t\\t__useNonce(_authorizer, _nonce, true);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to verify structured EIP712 message signature and derive its signer\\n\\t *\\n\\t * @param abiEncodedTypehash abi.encode of the message typehash together with all its parameters\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction __deriveSigner(bytes memory abiEncodedTypehash, uint8 v, bytes32 r, bytes32 s) private view returns(address) {\\n\\t\\t// build the EIP-712 hashStruct of the message\\n\\t\\tbytes32 hashStruct = keccak256(abiEncodedTypehash);\\n\\n\\t\\t// calculate the EIP-712 digest \\\"\\\\x19\\\\x01\\\" \\u2016 domainSeparator \\u2016 hashStruct(message)\\n\\t\\tbytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hashStruct));\\n\\n\\t\\t// recover the address which signed the message with v, r, s\\n\\t\\taddress signer = ECDSA.recover(digest, v, r, s);\\n\\n\\t\\t// return the signer address derived from the signature\\n\\t\\treturn signer;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to use/cancel the nonce supplied for a given authorizer:\\n\\t *      1. Verifies the nonce was not used before\\n\\t *      2. Marks the nonce as used\\n\\t *      3. Emits an event that the nonce was used/cancelled\\n\\t *\\n\\t * @dev Set `_cancellation` to false (default) to use nonce,\\n\\t *      set `_cancellation` to true to cancel nonce\\n\\t *\\n\\t * @dev It is expected that the nonce supplied is a randomly\\n\\t *      generated uint256 generated by the client\\n\\t *\\n\\t * @param _authorizer an address to use/cancel nonce for\\n\\t * @param _nonce random nonce to use\\n\\t * @param _cancellation true to emit `AuthorizationCancelled`, false to emit `AuthorizationUsed` event\\n\\t */\\n\\tfunction __useNonce(address _authorizer, bytes32 _nonce, bool _cancellation) private {\\n\\t\\t// verify nonce was not used before\\n\\t\\trequire(!usedNonces[_authorizer][_nonce], \\\"invalid nonce\\\");\\n\\n\\t\\t// update the nonce state to \\\"used\\\" for that particular signer to avoid replay attack\\n\\t\\tusedNonces[_authorizer][_nonce] = true;\\n\\n\\t\\t// depending on the usage type (use/cancel)\\n\\t\\tif(_cancellation) {\\n\\t\\t\\t// emit an event regarding the nonce cancelled\\n\\t\\t\\temit AuthorizationCanceled(_authorizer, _nonce);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\t// emit an event regarding the nonce used\\n\\t\\t\\temit AuthorizationUsed(_authorizer, _nonce);\\n\\t\\t}\\n\\t}\\n\\n\\t// ===== End: EIP-3009 functions =====\\n\\n\\t// ===== Start: DAO Support (Compound-like voting delegation) =====\\n\\n\\t/**\\n\\t * @notice Gets current voting power of the account `_of`\\n\\t *\\n\\t * @param _of the address of account to get voting power of\\n\\t * @return current cumulative voting power of the account,\\n\\t *      sum of token balances of all its voting delegators\\n\\t */\\n\\tfunction votingPowerOf(address _of) public view returns (uint256) {\\n\\t\\t// get a link to an array of voting power history records for an address specified\\n\\t\\tKV[] storage history = votingPowerHistory[_of];\\n\\n\\t\\t// lookup the history and return latest element\\n\\t\\treturn history.length == 0? 0: history[history.length - 1].v;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets past voting power of the account `_of` at some block `_blockNum`\\n\\t *\\n\\t * @dev Throws if `_blockNum` is not in the past (not the finalized block)\\n\\t *\\n\\t * @param _of the address of account to get voting power of\\n\\t * @param _blockNum block number to get the voting power at\\n\\t * @return past cumulative voting power of the account,\\n\\t *      sum of token balances of all its voting delegators at block number `_blockNum`\\n\\t */\\n\\tfunction votingPowerAt(address _of, uint256 _blockNum) public view returns (uint256) {\\n\\t\\t// make sure block number is not in the past (not the finalized block)\\n\\t\\trequire(_blockNum < block.number, \\\"block not yet mined\\\"); // Compound msg not yet determined\\n\\n\\t\\t// `votingPowerHistory[_of]` is an array ordered by `blockNumber`, ascending;\\n\\t\\t// apply binary search on `votingPowerHistory[_of]` to find such an entry number `i`, that\\n\\t\\t// `votingPowerHistory[_of][i].k <= _blockNum`, but in the same time\\n\\t\\t// `votingPowerHistory[_of][i + 1].k > _blockNum`\\n\\t\\t// return the result - voting power found at index `i`\\n\\t\\treturn __binaryLookup(votingPowerHistory[_of], _blockNum);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Reads an entire voting power history array for the delegate specified\\n\\t *\\n\\t * @param _of delegate to query voting power history for\\n\\t * @return voting power history array for the delegate of interest\\n\\t */\\n\\tfunction votingPowerHistoryOf(address _of) public view returns(KV[] memory) {\\n\\t\\t// return an entire array as memory\\n\\t\\treturn votingPowerHistory[_of];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns length of the voting power history array for the delegate specified;\\n\\t *      useful since reading an entire array just to get its length is expensive (gas cost)\\n\\t *\\n\\t * @param _of delegate to query voting power history length for\\n\\t * @return voting power history array length for the delegate of interest\\n\\t */\\n\\tfunction votingPowerHistoryLength(address _of) public view returns(uint256) {\\n\\t\\t// read array length and return\\n\\t\\treturn votingPowerHistory[_of].length;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets past total token supply value at some block `_blockNum`\\n\\t *\\n\\t * @dev Throws if `_blockNum` is not in the past (not the finalized block)\\n\\t *\\n\\t * @param _blockNum block number to get the total token supply at\\n\\t * @return past total token supply at block number `_blockNum`\\n\\t */\\n\\tfunction totalSupplyAt(uint256 _blockNum) public view returns(uint256) {\\n\\t\\t// make sure block number is not in the past (not the finalized block)\\n\\t\\trequire(_blockNum < block.number, \\\"block not yet mined\\\");\\n\\n\\t\\t// `totalSupplyHistory` is an array ordered by `k`, ascending;\\n\\t\\t// apply binary search on `totalSupplyHistory` to find such an entry number `i`, that\\n\\t\\t// `totalSupplyHistory[i].k <= _blockNum`, but in the same time\\n\\t\\t// `totalSupplyHistory[i + 1].k > _blockNum`\\n\\t\\t// return the result - value `totalSupplyHistory[i].v` found at index `i`\\n\\t\\treturn __binaryLookup(totalSupplyHistory, _blockNum);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Reads an entire total token supply history array\\n\\t *\\n\\t * @return total token supply history array, a key-value pair array,\\n\\t *      where key is a block number and value is total token supply at that block\\n\\t */\\n\\tfunction entireSupplyHistory() public view returns(KV[] memory) {\\n\\t\\t// return an entire array as memory\\n\\t\\treturn totalSupplyHistory;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns length of the total token supply history array;\\n\\t *      useful since reading an entire array just to get its length is expensive (gas cost)\\n\\t *\\n\\t * @return total token supply history array\\n\\t */\\n\\tfunction totalSupplyHistoryLength() public view returns(uint256) {\\n\\t\\t// read array length and return\\n\\t\\treturn totalSupplyHistory.length;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Delegates voting power of the delegator `msg.sender` to the delegate `_to`\\n\\t *\\n\\t * @dev Accepts zero value address to delegate voting power to, effectively\\n\\t *      removing the delegate in that case\\n\\t *\\n\\t * @param _to address to delegate voting power to\\n\\t */\\n\\tfunction delegate(address _to) public {\\n\\t\\t// verify delegations are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_DELEGATIONS), \\\"delegations are disabled\\\");\\n\\t\\t// delegate call to `__delegate`\\n\\t\\t__delegate(msg.sender, _to);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Powers the meta transaction for `delegate` - `delegateWithAuthorization`\\n\\t *\\n\\t * @dev Auxiliary function to delegate delegator's `_from` voting power to the delegate `_to`\\n\\t * @dev Writes to `votingDelegates` and `votingPowerHistory` mappings\\n\\t *\\n\\t * @param _from delegator who delegates his voting power\\n\\t * @param _to delegate who receives the voting power\\n\\t */\\n\\tfunction __delegate(address _from, address _to) private {\\n\\t\\t// read current delegate to be replaced by a new one\\n\\t\\taddress _fromDelegate = votingDelegates[_from];\\n\\n\\t\\t// read current voting power (it is equal to token balance)\\n\\t\\tuint256 _value = tokenBalances[_from];\\n\\n\\t\\t// reassign voting delegate to `_to`\\n\\t\\tvotingDelegates[_from] = _to;\\n\\n\\t\\t// update voting power for `_fromDelegate` and `_to`\\n\\t\\t__moveVotingPower(_from, _fromDelegate, _to, _value);\\n\\n\\t\\t// emit an event\\n\\t\\temit DelegateChanged(_from, _fromDelegate, _to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Delegates voting power of the delegator (represented by its signature) to the delegate `_to`\\n\\t *\\n\\t * @dev Accepts zero value address to delegate voting power to, effectively\\n\\t *      removing the delegate in that case\\n\\t *\\n\\t * @dev Compliant with EIP-712: Ethereum typed structured data hashing and signing,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712\\n\\t *\\n\\t * @param _to address to delegate voting power to\\n\\t * @param _nonce nonce used to construct the signature, and used to validate it;\\n\\t *      nonce is increased by one after successful signature validation and vote delegation\\n\\t * @param _exp signature expiration time\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction delegateWithAuthorization(address _to, bytes32 _nonce, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\\n\\t\\t// verify delegations on behalf are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_DELEGATIONS_ON_BEHALF), \\\"delegations on behalf are disabled\\\");\\n\\n\\t\\t// derive signer of the EIP712 Delegation message\\n\\t\\taddress signer = __deriveSigner(abi.encode(DELEGATION_TYPEHASH, _to, _nonce, _exp), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(block.timestamp < _exp, \\\"signature expired\\\"); // Compound msg\\n\\n\\t\\t// use the nonce supplied (verify, mark as used, emit event)\\n\\t\\t__useNonce(signer, _nonce, false);\\n\\n\\t\\t// delegate call to `__delegate` - execute the logic required\\n\\t\\t__delegate(signer, _to);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to move voting power `_value`\\n\\t *      from delegate `_from` to the delegate `_to`\\n\\t *\\n\\t * @dev Doesn't have any effect if `_from == _to`, or if `_value == 0`\\n\\t *\\n\\t * @param _by an address which executed delegate, mint, burn, or transfer operation\\n\\t *      which had led to delegate voting power change\\n\\t * @param _from delegate to move voting power from\\n\\t * @param _to delegate to move voting power to\\n\\t * @param _value voting power to move from `_from` to `_to`\\n\\t */\\n\\tfunction __moveVotingPower(address _by, address _from, address _to, uint256 _value) private {\\n\\t\\t// if there is no move (`_from == _to`) or there is nothing to move (`_value == 0`)\\n\\t\\tif(_from == _to || _value == 0) {\\n\\t\\t\\t// return silently with no action\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// if source address is not zero - decrease its voting power\\n\\t\\tif(_from != address(0)) {\\n\\t\\t\\t// get a link to an array of voting power history records for an address specified\\n\\t\\t\\tKV[] storage _h = votingPowerHistory[_from];\\n\\n\\t\\t\\t// update source voting power: decrease by `_value`\\n\\t\\t\\t(uint256 _fromVal, uint256 _toVal) = __updateHistory(_h, sub, _value);\\n\\n\\t\\t\\t// emit an event\\n\\t\\t\\temit VotingPowerChanged(_by, _from, _fromVal, _toVal);\\n\\t\\t}\\n\\n\\t\\t// if destination address is not zero - increase its voting power\\n\\t\\tif(_to != address(0)) {\\n\\t\\t\\t// get a link to an array of voting power history records for an address specified\\n\\t\\t\\tKV[] storage _h = votingPowerHistory[_to];\\n\\n\\t\\t\\t// update destination voting power: increase by `_value`\\n\\t\\t\\t(uint256 _fromVal, uint256 _toVal) = __updateHistory(_h, add, _value);\\n\\n\\t\\t\\t// emit an event\\n\\t\\t\\temit VotingPowerChanged(_by, _to, _fromVal, _toVal);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to append key-value pair to an array,\\n\\t *      sets the key to the current block number and\\n\\t *      value as derived\\n\\t *\\n\\t * @param _h array of key-value pairs to append to\\n\\t * @param op a function (add/subtract) to apply\\n\\t * @param _delta the value for a key-value pair to add/subtract\\n\\t */\\n\\tfunction __updateHistory(\\n\\t\\tKV[] storage _h,\\n\\t\\tfunction(uint256,uint256) pure returns(uint256) op,\\n\\t\\tuint256 _delta\\n\\t) private returns(uint256 _fromVal, uint256 _toVal) {\\n\\t\\t// init the old value - value of the last pair of the array\\n\\t\\t_fromVal = _h.length == 0? 0: _h[_h.length - 1].v;\\n\\t\\t// init the new value - result of the operation on the old value\\n\\t\\t_toVal = op(_fromVal, _delta);\\n\\n\\t\\t// if there is an existing voting power value stored for current block\\n\\t\\tif(_h.length != 0 && _h[_h.length - 1].k == block.number) {\\n\\t\\t\\t// update voting power which is already stored in the current block\\n\\t\\t\\t_h[_h.length - 1].v = uint192(_toVal);\\n\\t\\t}\\n\\t\\t// otherwise - if there is no value stored for current block\\n\\t\\telse {\\n\\t\\t\\t// add new element into array representing the value for current block\\n\\t\\t\\t_h.push(KV(uint64(block.number), uint192(_toVal)));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to lookup for a value in a sorted by key (ascending)\\n\\t *      array of key-value pairs\\n\\t *\\n\\t * @dev This function finds a key-value pair element in an array with the closest key\\n\\t *      to the key of interest (not exceeding that key) and returns the value\\n\\t *      of the key-value pair element found\\n\\t *\\n\\t * @dev An array to search in is a KV[] key-value pair array ordered by key `k`,\\n\\t *      it is sorted in ascending order (`k` increases as array index increases)\\n\\t *\\n\\t * @dev Returns zero for an empty array input regardless of the key input\\n\\t *\\n\\t * @param _h an array of key-value pair elements to search in\\n\\t * @param _k key of interest to look the value for\\n\\t * @return the value of the key-value pair of the key-value pair element with the closest\\n\\t *      key to the key of interest (not exceeding that key)\\n\\t */\\n\\tfunction __binaryLookup(KV[] storage _h, uint256 _k) private view returns(uint256) {\\n\\t\\t// if an array is empty, there is nothing to lookup in\\n\\t\\tif(_h.length == 0) {\\n\\t\\t\\t// by documented agreement, fall back to a zero result\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// check last key-value pair key:\\n\\t\\t// if the key is smaller than the key of interest\\n\\t\\tif(_h[_h.length - 1].k <= _k) {\\n\\t\\t\\t// we're done - return the value from the last element\\n\\t\\t\\treturn _h[_h.length - 1].v;\\n\\t\\t}\\n\\n\\t\\t// check first voting power history record block number:\\n\\t\\t// if history was never updated before the block of interest\\n\\t\\tif(_h[0].k > _k) {\\n\\t\\t\\t// we're done - voting power at the block num of interest was zero\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// left bound of the search interval, originally start of the array\\n\\t\\tuint256 i = 0;\\n\\n\\t\\t// right bound of the search interval, originally end of the array\\n\\t\\tuint256 j = _h.length - 1;\\n\\n\\t\\t// the iteration process narrows down the bounds by\\n\\t\\t// splitting the interval in a half oce per each iteration\\n\\t\\twhile(j > i) {\\n\\t\\t\\t// get an index in the middle of the interval [i, j]\\n\\t\\t\\tuint256 k = j - (j - i) / 2;\\n\\n\\t\\t\\t// read an element to compare it with the value of interest\\n\\t\\t\\tKV memory kv = _h[k];\\n\\n\\t\\t\\t// if we've got a strict equal - we're lucky and done\\n\\t\\t\\tif(kv.k == _k) {\\n\\t\\t\\t\\t// just return the result - pair value at index `k`\\n\\t\\t\\t\\treturn kv.v;\\n\\t\\t\\t}\\n\\t\\t\\t// if the value of interest is larger - move left bound to the middle\\n\\t\\t\\telse if (kv.k < _k) {\\n\\t\\t\\t\\t// move left bound `i` to the middle position `k`\\n\\t\\t\\t\\ti = k;\\n\\t\\t\\t}\\n\\t\\t\\t// otherwise, when the value of interest is smaller - move right bound to the middle\\n\\t\\t\\telse {\\n\\t\\t\\t\\t// move right bound `j` to the middle position `k - 1`:\\n\\t\\t\\t\\t// element at position `k` is greater and cannot be the result\\n\\t\\t\\t\\tj = k - 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// reaching that point means no exact match found\\n\\t\\t// since we're interested in the element which is not larger than the\\n\\t\\t// element of interest, we return the lower bound `i`\\n\\t\\treturn _h[i].v;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Adds a + b\\n\\t *      Function is used as a parameter for other functions\\n\\t *\\n\\t * @param a addition term 1\\n\\t * @param b addition term 2\\n\\t * @return a + b\\n\\t */\\n\\tfunction add(uint256 a, uint256 b) private pure returns(uint256) {\\n\\t\\t// add `a` to `b` and return\\n\\t\\treturn a + b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Subtracts a - b\\n\\t *      Function is used as a parameter for other functions\\n\\t *\\n\\t * @dev Requires a \\u2265 b\\n\\t *\\n\\t * @param a subtraction term 1\\n\\t * @param b subtraction term 2, b \\u2264 a\\n\\t * @return a - b\\n\\t */\\n\\tfunction sub(uint256 a, uint256 b) private pure returns(uint256) {\\n\\t\\t// subtract `b` from `a` and return\\n\\t\\treturn a - b;\\n\\t}\\n\\n\\t// ===== End: DAO Support (Compound-like voting delegation) =====\\n}\\n\\n/**\\n * @title Artificial Liquid Intelligence ERC20 Token (With BSC Bridging Support)\\n *\\n * @notice Binance Smart Chain (BSC) extension contract ads the functions required to bridge original\\n *      ALI token on Ethereum L1; these are mint and burn functions executed\\n *      when the tokens are deposited from from Ethereum L1 into BSC L2 (mint),\\n *      and when the tokens are withdrawn back from BSC L2 into Ethereum L1 (burn).\\n *\\n * @notice Read more:\\n *      https://docs.multichain.org/developer-guide/how-to-develop-under-anyswap-erc20-standards\\n */\\ncontract BinanceAliERC20v2 is AliERC20v2Base {\\n\\n\\t/**\\n\\t * @dev \\\"underlying\\\" is a dummy variable. Multichain frontend\\n\\t *      recognizes our token via \\\"underlying\\\"\\n\\t */\\n\\taddress public immutable underlying;\\n\\n\\t/**\\n\\t * @dev Constructs/deploys Binance Smart Chain(BSC) ALI instance,\\n\\t *      assigns initial token supply to the address specified\\n\\t */\\n\\tconstructor() AliERC20v2Base(address(0), 0) {\\n\\t\\t// explicitly set \\\"underlying\\\" to zero\\n\\t\\tunderlying = address(0);\\n\\t}\\n}\\n\",\"keccak256\":\"0xb3fb338ceb0823f23f1b3945c51a51ba1d7e334d66a81c05501320b9b7425694\",\"license\":\"MIT\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Access Control List\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if specific operation is permitted globally and/or\\n *      if particular user has a permission to execute it.\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable specific\\n *      functions (public functions) of the smart contract for everyone.\\n * @notice User roles are designed to restrict access to specific\\n *      functions (restricted functions) of the smart contract to some users.\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n */\\ncontract AccessControl {\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n\\t/**\\n\\t * @notice Privileged addresses with defined roles/permissions\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t */\\n\\tmapping(address => uint256) public userRoles;\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param _by operator which called the function\\n\\t * @param _to address which was granted/revoked permissions\\n\\t * @param _requested permissions requested\\n\\t * @param _actual permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\n\\n\\t/**\\n\\t * @notice Creates an access control instance,\\n\\t *      setting contract creator to have full privileges\\n\\t */\\n\\tconstructor() {\\n\\t\\t// contract creator has full privileges\\n\\t\\tuserRoles[msg.sender] = FULL_PRIVILEGES_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns(uint256) {\\n\\t\\t// features are stored in 'this' address  mapping of `userRoles` structure\\n\\t\\treturn userRoles[address(this)];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for or zero\\n\\t *      to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\tuserRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = userRoles[operator];\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(userRoles[operator], required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n}\\n\",\"keccak256\":\"0x65da240b772126f8712dc3ed85a006b1cfbcb291a4b147ac21aef2fb1faac61a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5033600090815260208190526040812060001990558062000036565b60405180910390fd5b604080518082018252600a81526920b634a2a92199183b1960b11b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f5572cb272f139fecace047c0fa6b0771cef3e004fc181b85045ff215e5fcaa3c818401524660608201523060808083019190915283518083038201815260a0909201909352805191012090528015620000e057620000de8282620000ed565b505b5050600060a05262000737565b6000620000fd62010000620003a5565b6200013b5760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b60448201526064016200002d565b6001600160a01b038316620001825760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016200002d565b60015482810111620001e15760405162461bcd60e51b815260206004820152602160248201527f7a65726f2076616c7565206f722061726974686d65746963206f766572666c6f6044820152607760f81b60648201526084016200002d565b6001546001600160c01b0390620001fa908490620006ec565b11156200024a5760405162461bcd60e51b815260206004820152601f60248201527f746f74616c20737570706c79206f766572666c6f77202875696e74313932290060448201526064016200002d565b81600160008282546200025e9190620006ec565b90915550506001600160a01b038316600090815260026020526040812080548492906200028d908490620006ec565b90915550620002ac9050600562001fe0620003b960201b1784620003ce565b50506001600160a01b03808416600090815260036020526040812054620002d892339291168562000551565b6040518281526001600160a01b0384169033907f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f09060200160405180910390a36040518281526001600160a01b0384169060009033907fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f9060200160405180910390a46040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600192915050565b6000620003b33383620006a5565b92915050565b6000620003c78284620006ec565b9392505050565b8254600090819015620004275784548590620003ed9060019062000707565b8154811062000400576200040062000721565b6000918252602090912001546801000000000000000090046001600160c01b03166200042a565b60005b6001600160c01b031691506200044182848660201c565b8554909150158015906200048e5750845443908690620004649060019062000707565b8154811062000477576200047762000721565b6000918252602090912001546001600160401b0316145b15620004f257845481908690620004a89060019062000707565b81548110620004bb57620004bb62000721565b9060005260206000200160000160086101000a8154816001600160c01b0302191690836001600160c01b0316021790555062000549565b604080518082019091526001600160401b0343811682526001600160c01b0380841660208085019182528954600181018b5560008b8152919091209451915190921668010000000000000000029216919091179101555b935093915050565b816001600160a01b0316836001600160a01b0316148062000570575080155b6200069f576001600160a01b038316156200060a576001600160a01b0383166000908152600460209081526040822091908190620005bc908490620006c8901b62001fec1786620003ce565b91509150856001600160a01b0316876001600160a01b0316600080516020620040118339815191528484604051620005fe929190918252602082015260400190565b60405180910390a35050505b6001600160a01b038216156200069f576001600160a01b038216600090815260046020908152604082209190819062000651908490620003b9901b62001fe01786620003ce565b91509150846001600160a01b0316876001600160a01b031660008051602062004011833981519152848460405162000693929190918252602082015260400190565b60405180910390a35050505b50505050565b6001600160a01b03821660009081526020819052604081205482168214620003c7565b6000620003c7828462000707565b634e487b7160e01b600052601160045260246000fd5b60008219821115620007025762000702620006d6565b500190565b6000828210156200071c576200071c620006d6565b500390565b634e487b7160e01b600052603260045260246000fd5b60805160a0516138ad6200076460003960006106f10152600081816105e401526129ab01526138ad6000f3fe608060405234801561001057600080fd5b506004361061043e5760003560e01c80637fd491b011610236578063c1d34b891161013b578063e3ee160e116100c3578063ef55bec611610087578063ef55bec614610a9d578063f63c2f8214610ab0578063f822d5aa14610ab8578063f9cf927114610acb578063fcc2c07814610ade57600080fd5b8063e3ee160e14610a16578063e62cac7614610a29578063e7a324dc14610a33578063e94a010214610a5a578063e98f5ba714610a9357600080fd5b8063d505accf1161010a578063d505accf1461097d578063d5bb7f6714610990578063d8fbe994146109a3578063d9169487146109b6578063dd62ed3e146109dd57600080fd5b8063c1d34b891461093a578063c5ff500c1461094d578063c688d69314610957578063cae9ca511461096a57600080fd5b8063a0cc6a68116101be578063ae682e2e1161018d578063ae682e2e146108f9578063b66dbdc514610904578063b88d4fde1461090c578063bcc3f3bd1461091f578063c0d6568d1461093257600080fd5b8063a0cc6a6814610899578063a457c2d7146108c0578063a9059cbb146108d3578063ae5b102e146108e657600080fd5b80638f6fba8c116102055780638f6fba8c1461083657806394f4f9301461083e57806395d89b4114610851578063981b24d0146108735780639dc29fac1461088657600080fd5b80637fd491b0146107c957806387793f3e146107dc5780638a114e13146108055780638d4e57e61461082c57600080fd5b8063395093511161034757806364cb8b96116102cf578063725f362611610293578063725f36261461073c57806374d5e1001461074f5780637815ef0c1461076f5780637ecebe00146107825780637f2eecc3146107a257600080fd5b806364cb8b9614610694578063653de620146106a95780636641d9a0146106b25780636f307dc3146106ec57806370a082311461071357600080fd5b80634721272d116103165780634721272d1461064757806359b961ef146106505780635a049a70146106655780635c19a95c146106785780635e2dc2b71461068b57600080fd5b806339509351146106065780633e9c5f7e146106195780634000aea01461062157806340c10f191461063457600080fd5b80631e0fa234116103ca5780632d4c39ea116103995780632d4c39ea1461058357806330adf81f1461058b578063313ce567146105b25780633177029f146105cc5780633644e515146105df57600080fd5b80631e0fa234146104f357806320606b701461053457806323b872dd1461055b5780632b5214161461056e57600080fd5b8063136d035f11610411578063136d035f146104a657806313873a24146104c457806318160ddd146104cc5780631993f554146104e35780631a0b04ea146104eb57600080fd5b806301ffc9a71461044357806306fdde031461046b578063095ea7b3146104805780631296ee6214610493575b600080fd5b61045661045136600461316b565b610af1565b60405190151581526020015b60405180910390f35b610473610b79565b60405161046291906131d5565b61045661048e366004613204565b610b95565b6104566104a1366004613204565b610bab565b6104af61080081565b60405163ffffffff9091168152602001610462565b6104af608081565b6104d560015481565b604051908152602001610462565b6104af600481565b6104af600881565b61051c61050136600461322e565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610462565b6104d57f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b610456610569366004613249565b610bbf565b306000908152602081905260409020546104d5565b6104af604081565b6104d57f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6105ba601281565b60405160ff9091168152602001610462565b6104566105da366004613204565b610c2c565b6104d57f000000000000000000000000000000000000000000000000000000000000000081565b610456610614366004613204565b610c48565b6104af602081565b61045661062f366004613327565b610cf4565b610456610642366004613204565b610d02565b6104af61020081565b61066361065e366004613249565b610f6c565b005b61066361067336600461338e565b610f7d565b61066361068636600461322e565b611028565b6104af61040081565b61069c61108b565b60405161046291906133dc565b6104af61010081565b6106c56106c036600461343d565b611107565b604080516001600160401b0390931683526001600160c01b03909116602083015201610462565b61051c7f000000000000000000000000000000000000000000000000000000000000000081565b6104d561072136600461322e565b6001600160a01b031660009081526002602052604090205490565b61045661074a36600461343d565b611142565b6104d561075d36600461322e565b60006020819052908152604090205481565b61069c61077d36600461322e565b61115b565b6104d561079036600461322e565b60066020526000908152604090205481565b6104d57fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de881565b6106c56107d7366004613204565b6111ed565b6104d56107ea36600461322e565b6001600160a01b031660009081526004602052604090205490565b6104d57f8d4fb97da97378ef7d0ad259aec651f42bd22c200159282baa58486bb390286b81565b6104af6201000081565b6104af600281565b6104d561084c366004613204565b611236565b61047360405180604001604052806003815260200162414c4960e81b81525081565b6104d561088136600461343d565b61129f565b610456610894366004613204565b6112f1565b6104d57f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b6104566108ce366004613204565b611751565b6104566108e1366004613204565b61182e565b6106636108f4366004613204565b61183b565b6104d5600160ff1b81565b6005546104d5565b61045661091a366004613456565b6118e5565b6104d561092d36600461322e565b61190b565b6104af600181565b610456610948366004613456565b61197e565b6104af6204000081565b610456610965366004613204565b6119ef565b610456610978366004613327565b611a11565b61066361098b3660046134bd565b611a80565b61066361099e36600461343d565b611bcf565b6104566109b1366004613249565b611bd9565b6104d57f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742981565b6104d56109eb366004613527565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b610663610a2436600461355a565b611bf6565b6104af6202000081565b6104d57fff41620983935eb4d4a3c7384a066ca8c1d10cef9a5eca9eb97ca735cd14a75581565b610456610a68366004613204565b6001600160a01b03919091166000908152600760209081526040808320938352929052205460ff1690565b6104af6208000081565b610663610aab36600461355a565b611d51565b6104af601081565b6104d5610ac63660046135d8565b611eb0565b610663610ad936600461360b565b611edb565b610456610aec36600461343d565b611fd4565b60006001600160e01b031982166301ffc9a760e01b1480610b2257506001600160e01b031982166336372b0760e01b145b80610b3d57506001600160e01b0319821663b0202a1160e01b145b80610b5857506001600160e01b03198216634ec7fbed60e11b145b80610b7357506001600160e01b03198216635ffa99dd60e11b145b92915050565b6040518060600160405280602481526020016138346024913981565b6000610ba2338484611ff8565b50600192915050565b6000610bb8338484611bd9565b9392505050565b6000610bcb6004611142565b80610bde5750610bde83620400006119ef565b80610bf05750610bf062080000611fd4565b15610c0557610c00848484610f6c565b610c22565b610c20848484604051806020016040528060008152506118e5565b505b5060019392505050565b6000610bb8838360405180602001604052806000815250611a11565b3360009081526008602090815260408083206001600160a01b03861684529091528120548281018110610cde5760405162461bcd60e51b815260206004820152603360248201527f7a65726f2076616c756520617070726f76616c20696e637265617365206f722060448201527261726974686d65746963206f766572666c6f7760681b60648201526084015b60405180910390fd5b610cec8461048e8584613679565b949350505050565b6000610cec3385858561197e565b6000610d1062010000611fd4565b610d2c5760405162461bcd60e51b8152600401610cd590613691565b6001600160a01b038316610d715760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610cd5565b60015482810111610dce5760405162461bcd60e51b815260206004820152602160248201527f7a65726f2076616c7565206f722061726974686d65746963206f766572666c6f6044820152607760f81b6064820152608401610cd5565b6001546001600160c01b0390610de5908490613679565b1115610e335760405162461bcd60e51b815260206004820152601f60248201527f746f74616c20737570706c79206f766572666c6f77202875696e7431393229006044820152606401610cd5565b8160016000828254610e459190613679565b90915550506001600160a01b03831660009081526002602052604081208054849290610e72908490613679565b90915550610e8690506005611fe084612109565b50506001600160a01b03808416600090815260036020526040812054610eb0923392911685612270565b6040518281526001600160a01b0384169033907f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f09060200160405180910390a36040518281526001600160a01b0384169060009033907fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f9060200160405180910390a46040518281526001600160a01b03841690600090600080516020613858833981519152906020015b60405180910390a350600192915050565b610f78338484846123c0565b505050565b604080517f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742960208201526001600160a01b0387169181019190915260608101859052600090610fe1906080015b60405160208183030381529060405285858561298e565b9050856001600160a01b0316816001600160a01b0316146110145760405162461bcd60e51b8152600401610cd5906136b8565b61102086866001612a10565b505050505050565b6110326020611142565b61107e5760405162461bcd60e51b815260206004820152601860248201527f64656c65676174696f6e73206172652064697361626c656400000000000000006044820152606401610cd5565b6110883382612b1e565b50565b60606005805480602002602001604051908101604052809291908181526020016000905b828210156110fe57600084815260209081902060408051808201909152908401546001600160401b0381168252600160401b90046001600160c01b0316818301528252600190920191016110af565b50505050905090565b6005818154811061111757600080fd5b6000918252602090912001546001600160401b0381169150600160401b90046001600160c01b031682565b3060009081526020819052604081205482168214610b73565b6001600160a01b0381166000908152600460209081526040808320805482518185028101850190935280835260609492939192909184015b828210156111e257600084815260209081902060408051808201909152908401546001600160401b0381168252600160401b90046001600160c01b031681830152825260019092019101611193565b505050509050919050565b6004602052816000526040600020818154811061120957600080fd5b6000918252602090912001546001600160401b0381169250600160401b90046001600160c01b0316905082565b600043821061127d5760405162461bcd60e51b8152602060048201526013602482015272189b1bd8dac81b9bdd081e595d081b5a5b9959606a1b6044820152606401610cd5565b6001600160a01b0383166000908152600460205260409020610bb89083612bba565b60004382106112e65760405162461bcd60e51b8152602060048201526013602482015272189b1bd8dac81b9bdd081e595d081b5a5b9959606a1b6044820152606401610cd5565b610b73600583612bba565b60006112ff62020000611fd4565b611522576001600160a01b0383163314801561132057506113206008611142565b8061134457506001600160a01b038316331480159061134457506113446010611142565b6001600160a01b038416331461138f576040518060400160405280601c81526020017f6275726e73206f6e20626568616c66206172652064697361626c6564000000008152506113bb565b60405180604001604052806012815260200171189d5c9b9cc8185c9948191a5cd8589b195960721b8152505b906113d95760405162461bcd60e51b8152600401610cd591906131d5565b506001600160a01b0383163314611522576001600160a01b03831660009081526008602090815260408083203384529091529020548281101561145e5760405162461bcd60e51b815260206004820152601d60248201527f6275726e20616d6f756e74206578636565647320616c6c6f77616e63650000006044820152606401610cd5565b6000198110156115205761147283826136e3565b6001600160a01b0385166000818152600860209081526040808320338085529252909120839055919250907fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a76114c88685613679565b60408051918252602082018690520160405180910390a360405181815233906001600160a01b038616907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a35b505b816000036115645760405162461bcd60e51b815260206004820152600f60248201526e3d32b937903b30b63ab290313ab93760891b6044820152606401610cd5565b6001600160a01b0383166115ba5760405162461bcd60e51b815260206004820152601a60248201527f6275726e2066726f6d20746865207a65726f20616464726573730000000000006044820152606401610cd5565b6001600160a01b0383166000908152600260205260409020548211156116225760405162461bcd60e51b815260206004820152601b60248201527f6275726e20616d6f756e7420657863656564732062616c616e636500000000006044820152606401610cd5565b6001600160a01b0383166000908152600260205260408120805484929061164a9084906136e3565b92505081905550816001600082825461166391906136e3565b9091555061167790506005611fec84612109565b50506001600160a01b038084166000908152600360205260408120546116a292339291169085612270565b6040518281526001600160a01b0384169033907fe8a89cc6e5096f9d9f43de82c077c1f4cfe707c0e0c2032176c68813b9ae6a5c9060200160405180910390a36040518281526000906001600160a01b0385169033907fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f9060200160405180910390a46040518281526000906001600160a01b0385169060008051602061385883398151915290602001610f5b565b3360009081526008602090815260408083206001600160a01b0386168452909152812054826117c25760405162461bcd60e51b815260206004820152601c60248201527f7a65726f2076616c756520617070726f76616c206465637265617365000000006044820152606401610cd5565b828110156118205760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610cd5565b610cec8461048e85846136e3565b6000610bb8338484610bbf565b611848600160ff1b611fd4565b6118645760405162461bcd60e51b8152600401610cd590613691565b6001600160a01b03821660009081526020819052604090205461188990339083611eb0565b6001600160a01b03831660008181526020818152604091829020849055815185815290810193909352909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a35050565b60006118f2858585610f6c565b611900858585856001612d9d565b506001949350505050565b6001600160a01b038116600090815260046020526040812080541561196b578054819061193a906001906136e3565b8154811061194a5761194a6136fa565b600091825260209091200154600160401b90046001600160c01b031661196e565b60005b6001600160c01b03169392505050565b600061198a6080611142565b6119d65760405162461bcd60e51b815260206004820152601e60248201527f45524331333633207472616e7366657273206172652064697361626c656400006044820152606401610cd5565b6119e1858585610f6c565b611900858585856000612d9d565b6001600160a01b03821660009081526020819052604081205482168214610bb8565b6000611a1e610100611142565b611a6a5760405162461bcd60e51b815260206004820152601e60248201527f4552433133363320617070726f76616c73206172652064697361626c656400006044820152606401610cd5565b611a748484610b95565b50610c22848484612ed2565b611a8b610200611142565b611ad75760405162461bcd60e51b815260206004820152601c60248201527f45495032363132207065726d697473206172652064697361626c6564000000006044820152606401610cd5565b6001600160a01b03871660009081526006602052604081208054611b68917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9187611b2783613710565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001610fca565b9050876001600160a01b0316816001600160a01b031614611b9b5760405162461bcd60e51b8152600401610cd5906136b8565b844210611bba5760405162461bcd60e51b8152600401610cd590613729565b611bc5888888611ff8565b5050505050505050565b611088308261183b565b6000610cec8484846040518060200160405280600081525061197e565b611c01610400611142565b611c4d5760405162461bcd60e51b815260206004820152601e60248201527f45495033303039207472616e7366657273206172652064697361626c656400006044820152606401610cd5565b6000611c927f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760001b8b8b8b8b8b8b604051602001610fca9796959493929190613754565b9050896001600160a01b0316816001600160a01b031614611cc55760405162461bcd60e51b8152600401610cd5906136b8565b864211611d0e5760405162461bcd60e51b81526020600482015260176024820152761cda59db985d1d5c99481b9bdd081e595d081d985b1a59604a1b6044820152606401610cd5565b854210611d2d5760405162461bcd60e51b8152600401610cd590613729565b611d398a866000612a10565b611d45818b8b8b6123c0565b50505050505050505050565b611d5c610800611142565b611da85760405162461bcd60e51b815260206004820152601f60248201527f4549503330303920726563657074696f6e73206172652064697361626c6564006044820152606401610cd5565b6000611ded7fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de860001b8b8b8b8b8b8b604051602001610fca9796959493929190613754565b9050896001600160a01b0316816001600160a01b031614611e205760405162461bcd60e51b8152600401610cd5906136b8565b864211611e695760405162461bcd60e51b81526020600482015260176024820152761cda59db985d1d5c99481b9bdd081e595d081d985b1a59604a1b6044820152606401610cd5565b854210611e885760405162461bcd60e51b8152600401610cd590613729565b6001600160a01b0389163314611d2d5760405162461bcd60e51b8152600401610cd590613691565b6001600160a01b03929092166000908152602081905260409020546000198084188216189216171690565b611ee56040611142565b611f3c5760405162461bcd60e51b815260206004820152602260248201527f64656c65676174696f6e73206f6e20626568616c66206172652064697361626c604482015261195960f21b6064820152608401610cd5565b604080517fff41620983935eb4d4a3c7384a066ca8c1d10cef9a5eca9eb97ca735cd14a75560208201526001600160a01b038816918101919091526060810186905260808101859052600090611f949060a001610fca565b9050844210611fb55760405162461bcd60e51b8152600401610cd590613729565b611fc181876000612a10565b611fcb8188612b1e565b50505050505050565b6000610b7333836119ef565b6000610bb88284613679565b6000610bb882846136e3565b6001600160a01b03821661204e5760405162461bcd60e51b815260206004820152601b60248201527f617070726f766520746f20746865207a65726f206164647265737300000000006044820152606401610cd5565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902080549086905582518181529182018690529392917fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a7910160405180910390a3826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516120fb91815260200190565b60405180910390a350505050565b82546000908190156121565784548590612125906001906136e3565b81548110612135576121356136fa565b600091825260209091200154600160401b90046001600160c01b0316612159565b60005b6001600160c01b0316915061217282848663ffffffff16565b8554909150158015906121b95750845443908690612192906001906136e3565b815481106121a2576121a26136fa565b6000918252602090912001546001600160401b0316145b15612216578454819086906121d0906001906136e3565b815481106121e0576121e06136fa565b9060005260206000200160000160086101000a8154816001600160c01b0302191690836001600160c01b03160217905550612268565b604080518082019091526001600160401b0343811682526001600160c01b0380841660208085019182528954600181018b5560008b81529190912094519151909216600160401b029216919091179101555b935093915050565b816001600160a01b0316836001600160a01b0316148061228e575080155b6123ba576001600160a01b03831615612326576001600160a01b038316600090815260046020526040812090806122c883611fec86612109565b91509150856001600160a01b0316876001600160a01b03167fd1404f22081753a56b50e0d5ff5c9ed0e4a3a840e1171a443721a342e71bb5c1848460405161231a929190918252602082015260400190565b60405180910390a35050505b6001600160a01b038216156123ba576001600160a01b0382166000908152600460205260408120908061235c83611fe086612109565b91509150846001600160a01b0316876001600160a01b03167fd1404f22081753a56b50e0d5ff5c9ed0e4a3a840e1171a443721a342e71bb5c184846040516123ae929190918252602082015260400190565b60405180910390a35050505b50505050565b836001600160a01b0316836001600160a01b03161480156123e657506123e66001611142565b806124135750836001600160a01b0316836001600160a01b03161415801561241357506124136002611142565b846001600160a01b0316846001600160a01b031614612467576040518060400160405280602081526020017f7472616e7366657273206f6e20626568616c66206172652064697361626c6564815250612497565b604051806040016040528060168152602001751d1c985b9cd9995c9cc8185c9948191a5cd8589b195960521b8152505b906124b55760405162461bcd60e51b8152600401610cd591906131d5565b506001600160a01b03831661250c5760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722066726f6d20746865207a65726f206164647265737300006044820152606401610cd5565b6001600160a01b0382166125625760405162461bcd60e51b815260206004820152601c60248201527f7472616e7366657220746f20746865207a65726f2061646472657373000000006044820152606401610cd5565b816001600160a01b0316836001600160a01b0316036125db5760405162461bcd60e51b815260206004820152602f60248201527f73656e64657220616e6420726563697069656e7420617265207468652073616d60448201526e6520285f66726f6d203d205f746f2960881b6064820152608401610cd5565b306001600160a01b038316036126595760405162461bcd60e51b815260206004820152603f60248201527f696e76616c696420726563697069656e7420287472616e7366657220746f207460448201527f686520746f6b656e20736d61727420636f6e747261637420697473656c6629006064820152608401610cd5565b806000036126a157816001600160a01b0316836001600160a01b03166000805160206138588339815191528360405161269491815260200190565b60405180910390a36123ba565b836001600160a01b0316836001600160a01b03161461280f576001600160a01b038084166000908152600860209081526040808320938816835292905220548181101561273a5760405162461bcd60e51b815260206004820152602160248201527f7472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636044820152606560f81b6064820152608401610cd5565b60001981101561280d5761274e82826136e3565b6001600160a01b038086166000818152600860209081526040808320948b16808452949091529020839055919250907fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a76127a88585613679565b60408051918252602082018690520160405180910390a3846001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161280491815260200190565b60405180910390a35b505b6001600160a01b0383166000908152600260205260409020548111156128775760405162461bcd60e51b815260206004820152601f60248201527f7472616e7366657220616d6f756e7420657863656564732062616c616e6365006044820152606401610cd5565b6001600160a01b0383166000908152600260205260408120805483929061289f9084906136e3565b90915550506001600160a01b038216600090815260026020526040812080548392906128cc908490613679565b90915550506001600160a01b038084166000908152600360205260408082205485841683529120546129049287928116911684612270565b816001600160a01b0316836001600160a01b0316856001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f8460405161295391815260200190565b60405180910390a4816001600160a01b0316836001600160a01b0316600080516020613858833981519152836040516120fb91815260200190565b835160208086019190912060405161190160f01b928101929092527f000000000000000000000000000000000000000000000000000000000000000060228301526042820181905260009182906062016040516020818303038152906040528051906020012090506000612a0482888888612ff2565b98975050505050505050565b6001600160a01b038316600090815260076020908152604080832085845290915290205460ff1615612a745760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b6044820152606401610cd5565b6001600160a01b03831660009081526007602090815260408083208584529091529020805460ff191660011790558015612ae35760405182906001600160a01b038516907f1cdd46ff242716cdaa72d159d339a485b3438398348d68f09d7c8c0a59353d8190600090a3505050565b60405182906001600160a01b038516907f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a590600090a3505050565b6001600160a01b0380831660009081526003602081815260408084208054600284529190942054929091528484166001600160a01b0319821617909255911690612b6a84838584612270565b826001600160a01b0316826001600160a01b0316856001600160a01b03167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a450505050565b81546000908103612bcd57506000610b73565b825482908490612bdf906001906136e3565b81548110612bef57612bef6136fa565b6000918252602090912001546001600160401b031611612c4c5782548390612c19906001906136e3565b81548110612c2957612c296136fa565b600091825260209091200154600160401b90046001600160c01b03169050610b73565b8183600081548110612c6057612c606136fa565b6000918252602090912001546001600160401b03161115612c8357506000610b73565b82546000908190612c96906001906136e3565b90505b81811115612d665760006002612caf84846136e3565b612cb99190613790565b612cc390836136e3565b90506000868281548110612cd957612cd96136fa565b6000918252602091829020604080518082019091529101546001600160401b038116808352600160401b9091046001600160c01b0316928201929092529150869003612d3757602001516001600160c01b03169350610b7392505050565b80516001600160401b0316861115612d5157819350612d5f565b612d5c6001836136e3565b92505b5050612c99565b848281548110612d7857612d786136fa565b600091825260209091200154600160401b90046001600160c01b031695945050505050565b833b612de55780612de05760405162461bcd60e51b815260206004820152600d60248201526c1153d0481c9958da5c1a595b9d609a1b6044820152606401610cd5565b612ecb565b604051632229f29760e21b81526000906001600160a01b038616906388a7ca5c90612e1a9033908a90899089906004016137b2565b6020604051808303816000875af1158015612e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5d91906137ef565b90506001600160e01b03198116632229f29760e21b146110205760405162461bcd60e51b815260206004820152602360248201527f696e76616c6964206f6e5472616e73666572526563656976656420726573706f6044820152626e736560e81b6064820152608401610cd5565b5050505050565b823b612f0e5760405162461bcd60e51b815260206004820152600b60248201526a22a7a09039b832b73232b960a91b6044820152606401610cd5565b6040516307b04a2d60e41b81526000906001600160a01b03851690637b04a2d090612f419033908790879060040161380c565b6020604051808303816000875af1158015612f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8491906137ef565b90506001600160e01b031981166307b04a2d60e41b146123ba5760405162461bcd60e51b815260206004820152602360248201527f696e76616c6964206f6e417070726f76616c526563656976656420726573706f6044820152626e736560e81b6064820152608401610cd5565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156130645760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c756500000000006044820152606401610cd5565b8360ff16601b148061307957508360ff16601c145b6130c55760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c756500000000006044820152606401610cd5565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613119573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661314c5760405162461bcd60e51b8152600401610cd5906136b8565b95945050505050565b6001600160e01b03198116811461108857600080fd5b60006020828403121561317d57600080fd5b8135610bb881613155565b6000815180845260005b818110156131ae57602081850181015186830182015201613192565b818111156131c0576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610bb86020830184613188565b80356001600160a01b03811681146131ff57600080fd5b919050565b6000806040838503121561321757600080fd5b613220836131e8565b946020939093013593505050565b60006020828403121561324057600080fd5b610bb8826131e8565b60008060006060848603121561325e57600080fd5b613267846131e8565b9250613275602085016131e8565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126132ac57600080fd5b81356001600160401b03808211156132c6576132c6613285565b604051601f8301601f19908116603f011681019082821181831017156132ee576132ee613285565b8160405283815286602085880101111561330757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561333c57600080fd5b613345846131e8565b92506020840135915060408401356001600160401b0381111561336757600080fd5b6133738682870161329b565b9150509250925092565b803560ff811681146131ff57600080fd5b600080600080600060a086880312156133a657600080fd5b6133af866131e8565b9450602086013593506133c46040870161337d565b94979396509394606081013594506080013592915050565b602080825282518282018190526000919060409081850190868401855b8281101561343057815180516001600160401b031685528601516001600160c01b03168685015292840192908501906001016133f9565b5091979650505050505050565b60006020828403121561344f57600080fd5b5035919050565b6000806000806080858703121561346c57600080fd5b613475856131e8565b9350613483602086016131e8565b92506040850135915060608501356001600160401b038111156134a557600080fd5b6134b18782880161329b565b91505092959194509250565b600080600080600080600060e0888a0312156134d857600080fd5b6134e1886131e8565b96506134ef602089016131e8565b9550604088013594506060880135935061350b6080890161337d565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561353a57600080fd5b613543836131e8565b9150613551602084016131e8565b90509250929050565b60008060008060008060008060006101208a8c03121561357957600080fd5b6135828a6131e8565b985061359060208b016131e8565b975060408a0135965060608a0135955060808a0135945060a08a013593506135ba60c08b0161337d565b925060e08a013591506101008a013590509295985092959850929598565b6000806000606084860312156135ed57600080fd5b6135f6846131e8565b95602085013595506040909401359392505050565b60008060008060008060c0878903121561362457600080fd5b61362d876131e8565b955060208701359450604087013593506136496060880161337d565b92506080870135915060a087013590509295509295509295565b634e487b7160e01b600052601160045260246000fd5b6000821982111561368c5761368c613663565b500190565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b6000828210156136f5576136f5613663565b500390565b634e487b7160e01b600052603260045260246000fd5b60006001820161372257613722613663565b5060010190565b6020808252601190820152701cda59db985d1d5c9948195e1c1a5c9959607a1b604082015260600190565b9687526001600160a01b0395861660208801529390941660408601526060850191909152608084015260a083019190915260c082015260e00190565b6000826137ad57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906137e590830184613188565b9695505050505050565b60006020828403121561380157600080fd5b8151610bb881613155565b60018060a01b038416815282602082015260606040820152600061314c606083018461318856fe4172746966696369616c204c697175696420496e74656c6c6967656e636520546f6b656eddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220d80d50424d47a6bc7b2308a0db15413a8610ae361a5e6a7e4f140cbb2311ca1664736f6c634300080f0033d1404f22081753a56b50e0d5ff5c9ed0e4a3a840e1171a443721a342e71bb5c1",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061043e5760003560e01c80637fd491b011610236578063c1d34b891161013b578063e3ee160e116100c3578063ef55bec611610087578063ef55bec614610a9d578063f63c2f8214610ab0578063f822d5aa14610ab8578063f9cf927114610acb578063fcc2c07814610ade57600080fd5b8063e3ee160e14610a16578063e62cac7614610a29578063e7a324dc14610a33578063e94a010214610a5a578063e98f5ba714610a9357600080fd5b8063d505accf1161010a578063d505accf1461097d578063d5bb7f6714610990578063d8fbe994146109a3578063d9169487146109b6578063dd62ed3e146109dd57600080fd5b8063c1d34b891461093a578063c5ff500c1461094d578063c688d69314610957578063cae9ca511461096a57600080fd5b8063a0cc6a68116101be578063ae682e2e1161018d578063ae682e2e146108f9578063b66dbdc514610904578063b88d4fde1461090c578063bcc3f3bd1461091f578063c0d6568d1461093257600080fd5b8063a0cc6a6814610899578063a457c2d7146108c0578063a9059cbb146108d3578063ae5b102e146108e657600080fd5b80638f6fba8c116102055780638f6fba8c1461083657806394f4f9301461083e57806395d89b4114610851578063981b24d0146108735780639dc29fac1461088657600080fd5b80637fd491b0146107c957806387793f3e146107dc5780638a114e13146108055780638d4e57e61461082c57600080fd5b8063395093511161034757806364cb8b96116102cf578063725f362611610293578063725f36261461073c57806374d5e1001461074f5780637815ef0c1461076f5780637ecebe00146107825780637f2eecc3146107a257600080fd5b806364cb8b9614610694578063653de620146106a95780636641d9a0146106b25780636f307dc3146106ec57806370a082311461071357600080fd5b80634721272d116103165780634721272d1461064757806359b961ef146106505780635a049a70146106655780635c19a95c146106785780635e2dc2b71461068b57600080fd5b806339509351146106065780633e9c5f7e146106195780634000aea01461062157806340c10f191461063457600080fd5b80631e0fa234116103ca5780632d4c39ea116103995780632d4c39ea1461058357806330adf81f1461058b578063313ce567146105b25780633177029f146105cc5780633644e515146105df57600080fd5b80631e0fa234146104f357806320606b701461053457806323b872dd1461055b5780632b5214161461056e57600080fd5b8063136d035f11610411578063136d035f146104a657806313873a24146104c457806318160ddd146104cc5780631993f554146104e35780631a0b04ea146104eb57600080fd5b806301ffc9a71461044357806306fdde031461046b578063095ea7b3146104805780631296ee6214610493575b600080fd5b61045661045136600461316b565b610af1565b60405190151581526020015b60405180910390f35b610473610b79565b60405161046291906131d5565b61045661048e366004613204565b610b95565b6104566104a1366004613204565b610bab565b6104af61080081565b60405163ffffffff9091168152602001610462565b6104af608081565b6104d560015481565b604051908152602001610462565b6104af600481565b6104af600881565b61051c61050136600461322e565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610462565b6104d57f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b610456610569366004613249565b610bbf565b306000908152602081905260409020546104d5565b6104af604081565b6104d57f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6105ba601281565b60405160ff9091168152602001610462565b6104566105da366004613204565b610c2c565b6104d57f000000000000000000000000000000000000000000000000000000000000000081565b610456610614366004613204565b610c48565b6104af602081565b61045661062f366004613327565b610cf4565b610456610642366004613204565b610d02565b6104af61020081565b61066361065e366004613249565b610f6c565b005b61066361067336600461338e565b610f7d565b61066361068636600461322e565b611028565b6104af61040081565b61069c61108b565b60405161046291906133dc565b6104af61010081565b6106c56106c036600461343d565b611107565b604080516001600160401b0390931683526001600160c01b03909116602083015201610462565b61051c7f000000000000000000000000000000000000000000000000000000000000000081565b6104d561072136600461322e565b6001600160a01b031660009081526002602052604090205490565b61045661074a36600461343d565b611142565b6104d561075d36600461322e565b60006020819052908152604090205481565b61069c61077d36600461322e565b61115b565b6104d561079036600461322e565b60066020526000908152604090205481565b6104d57fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de881565b6106c56107d7366004613204565b6111ed565b6104d56107ea36600461322e565b6001600160a01b031660009081526004602052604090205490565b6104d57f8d4fb97da97378ef7d0ad259aec651f42bd22c200159282baa58486bb390286b81565b6104af6201000081565b6104af600281565b6104d561084c366004613204565b611236565b61047360405180604001604052806003815260200162414c4960e81b81525081565b6104d561088136600461343d565b61129f565b610456610894366004613204565b6112f1565b6104d57f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b6104566108ce366004613204565b611751565b6104566108e1366004613204565b61182e565b6106636108f4366004613204565b61183b565b6104d5600160ff1b81565b6005546104d5565b61045661091a366004613456565b6118e5565b6104d561092d36600461322e565b61190b565b6104af600181565b610456610948366004613456565b61197e565b6104af6204000081565b610456610965366004613204565b6119ef565b610456610978366004613327565b611a11565b61066361098b3660046134bd565b611a80565b61066361099e36600461343d565b611bcf565b6104566109b1366004613249565b611bd9565b6104d57f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742981565b6104d56109eb366004613527565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b610663610a2436600461355a565b611bf6565b6104af6202000081565b6104d57fff41620983935eb4d4a3c7384a066ca8c1d10cef9a5eca9eb97ca735cd14a75581565b610456610a68366004613204565b6001600160a01b03919091166000908152600760209081526040808320938352929052205460ff1690565b6104af6208000081565b610663610aab36600461355a565b611d51565b6104af601081565b6104d5610ac63660046135d8565b611eb0565b610663610ad936600461360b565b611edb565b610456610aec36600461343d565b611fd4565b60006001600160e01b031982166301ffc9a760e01b1480610b2257506001600160e01b031982166336372b0760e01b145b80610b3d57506001600160e01b0319821663b0202a1160e01b145b80610b5857506001600160e01b03198216634ec7fbed60e11b145b80610b7357506001600160e01b03198216635ffa99dd60e11b145b92915050565b6040518060600160405280602481526020016138346024913981565b6000610ba2338484611ff8565b50600192915050565b6000610bb8338484611bd9565b9392505050565b6000610bcb6004611142565b80610bde5750610bde83620400006119ef565b80610bf05750610bf062080000611fd4565b15610c0557610c00848484610f6c565b610c22565b610c20848484604051806020016040528060008152506118e5565b505b5060019392505050565b6000610bb8838360405180602001604052806000815250611a11565b3360009081526008602090815260408083206001600160a01b03861684529091528120548281018110610cde5760405162461bcd60e51b815260206004820152603360248201527f7a65726f2076616c756520617070726f76616c20696e637265617365206f722060448201527261726974686d65746963206f766572666c6f7760681b60648201526084015b60405180910390fd5b610cec8461048e8584613679565b949350505050565b6000610cec3385858561197e565b6000610d1062010000611fd4565b610d2c5760405162461bcd60e51b8152600401610cd590613691565b6001600160a01b038316610d715760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b6044820152606401610cd5565b60015482810111610dce5760405162461bcd60e51b815260206004820152602160248201527f7a65726f2076616c7565206f722061726974686d65746963206f766572666c6f6044820152607760f81b6064820152608401610cd5565b6001546001600160c01b0390610de5908490613679565b1115610e335760405162461bcd60e51b815260206004820152601f60248201527f746f74616c20737570706c79206f766572666c6f77202875696e7431393229006044820152606401610cd5565b8160016000828254610e459190613679565b90915550506001600160a01b03831660009081526002602052604081208054849290610e72908490613679565b90915550610e8690506005611fe084612109565b50506001600160a01b03808416600090815260036020526040812054610eb0923392911685612270565b6040518281526001600160a01b0384169033907f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f09060200160405180910390a36040518281526001600160a01b0384169060009033907fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f9060200160405180910390a46040518281526001600160a01b03841690600090600080516020613858833981519152906020015b60405180910390a350600192915050565b610f78338484846123c0565b505050565b604080517f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742960208201526001600160a01b0387169181019190915260608101859052600090610fe1906080015b60405160208183030381529060405285858561298e565b9050856001600160a01b0316816001600160a01b0316146110145760405162461bcd60e51b8152600401610cd5906136b8565b61102086866001612a10565b505050505050565b6110326020611142565b61107e5760405162461bcd60e51b815260206004820152601860248201527f64656c65676174696f6e73206172652064697361626c656400000000000000006044820152606401610cd5565b6110883382612b1e565b50565b60606005805480602002602001604051908101604052809291908181526020016000905b828210156110fe57600084815260209081902060408051808201909152908401546001600160401b0381168252600160401b90046001600160c01b0316818301528252600190920191016110af565b50505050905090565b6005818154811061111757600080fd5b6000918252602090912001546001600160401b0381169150600160401b90046001600160c01b031682565b3060009081526020819052604081205482168214610b73565b6001600160a01b0381166000908152600460209081526040808320805482518185028101850190935280835260609492939192909184015b828210156111e257600084815260209081902060408051808201909152908401546001600160401b0381168252600160401b90046001600160c01b031681830152825260019092019101611193565b505050509050919050565b6004602052816000526040600020818154811061120957600080fd5b6000918252602090912001546001600160401b0381169250600160401b90046001600160c01b0316905082565b600043821061127d5760405162461bcd60e51b8152602060048201526013602482015272189b1bd8dac81b9bdd081e595d081b5a5b9959606a1b6044820152606401610cd5565b6001600160a01b0383166000908152600460205260409020610bb89083612bba565b60004382106112e65760405162461bcd60e51b8152602060048201526013602482015272189b1bd8dac81b9bdd081e595d081b5a5b9959606a1b6044820152606401610cd5565b610b73600583612bba565b60006112ff62020000611fd4565b611522576001600160a01b0383163314801561132057506113206008611142565b8061134457506001600160a01b038316331480159061134457506113446010611142565b6001600160a01b038416331461138f576040518060400160405280601c81526020017f6275726e73206f6e20626568616c66206172652064697361626c6564000000008152506113bb565b60405180604001604052806012815260200171189d5c9b9cc8185c9948191a5cd8589b195960721b8152505b906113d95760405162461bcd60e51b8152600401610cd591906131d5565b506001600160a01b0383163314611522576001600160a01b03831660009081526008602090815260408083203384529091529020548281101561145e5760405162461bcd60e51b815260206004820152601d60248201527f6275726e20616d6f756e74206578636565647320616c6c6f77616e63650000006044820152606401610cd5565b6000198110156115205761147283826136e3565b6001600160a01b0385166000818152600860209081526040808320338085529252909120839055919250907fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a76114c88685613679565b60408051918252602082018690520160405180910390a360405181815233906001600160a01b038616907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259060200160405180910390a35b505b816000036115645760405162461bcd60e51b815260206004820152600f60248201526e3d32b937903b30b63ab290313ab93760891b6044820152606401610cd5565b6001600160a01b0383166115ba5760405162461bcd60e51b815260206004820152601a60248201527f6275726e2066726f6d20746865207a65726f20616464726573730000000000006044820152606401610cd5565b6001600160a01b0383166000908152600260205260409020548211156116225760405162461bcd60e51b815260206004820152601b60248201527f6275726e20616d6f756e7420657863656564732062616c616e636500000000006044820152606401610cd5565b6001600160a01b0383166000908152600260205260408120805484929061164a9084906136e3565b92505081905550816001600082825461166391906136e3565b9091555061167790506005611fec84612109565b50506001600160a01b038084166000908152600360205260408120546116a292339291169085612270565b6040518281526001600160a01b0384169033907fe8a89cc6e5096f9d9f43de82c077c1f4cfe707c0e0c2032176c68813b9ae6a5c9060200160405180910390a36040518281526000906001600160a01b0385169033907fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f9060200160405180910390a46040518281526000906001600160a01b0385169060008051602061385883398151915290602001610f5b565b3360009081526008602090815260408083206001600160a01b0386168452909152812054826117c25760405162461bcd60e51b815260206004820152601c60248201527f7a65726f2076616c756520617070726f76616c206465637265617365000000006044820152606401610cd5565b828110156118205760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610cd5565b610cec8461048e85846136e3565b6000610bb8338484610bbf565b611848600160ff1b611fd4565b6118645760405162461bcd60e51b8152600401610cd590613691565b6001600160a01b03821660009081526020819052604090205461188990339083611eb0565b6001600160a01b03831660008181526020818152604091829020849055815185815290810193909352909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a35050565b60006118f2858585610f6c565b611900858585856001612d9d565b506001949350505050565b6001600160a01b038116600090815260046020526040812080541561196b578054819061193a906001906136e3565b8154811061194a5761194a6136fa565b600091825260209091200154600160401b90046001600160c01b031661196e565b60005b6001600160c01b03169392505050565b600061198a6080611142565b6119d65760405162461bcd60e51b815260206004820152601e60248201527f45524331333633207472616e7366657273206172652064697361626c656400006044820152606401610cd5565b6119e1858585610f6c565b611900858585856000612d9d565b6001600160a01b03821660009081526020819052604081205482168214610bb8565b6000611a1e610100611142565b611a6a5760405162461bcd60e51b815260206004820152601e60248201527f4552433133363320617070726f76616c73206172652064697361626c656400006044820152606401610cd5565b611a748484610b95565b50610c22848484612ed2565b611a8b610200611142565b611ad75760405162461bcd60e51b815260206004820152601c60248201527f45495032363132207065726d697473206172652064697361626c6564000000006044820152606401610cd5565b6001600160a01b03871660009081526006602052604081208054611b68917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9187611b2783613710565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001610fca565b9050876001600160a01b0316816001600160a01b031614611b9b5760405162461bcd60e51b8152600401610cd5906136b8565b844210611bba5760405162461bcd60e51b8152600401610cd590613729565b611bc5888888611ff8565b5050505050505050565b611088308261183b565b6000610cec8484846040518060200160405280600081525061197e565b611c01610400611142565b611c4d5760405162461bcd60e51b815260206004820152601e60248201527f45495033303039207472616e7366657273206172652064697361626c656400006044820152606401610cd5565b6000611c927f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760001b8b8b8b8b8b8b604051602001610fca9796959493929190613754565b9050896001600160a01b0316816001600160a01b031614611cc55760405162461bcd60e51b8152600401610cd5906136b8565b864211611d0e5760405162461bcd60e51b81526020600482015260176024820152761cda59db985d1d5c99481b9bdd081e595d081d985b1a59604a1b6044820152606401610cd5565b854210611d2d5760405162461bcd60e51b8152600401610cd590613729565b611d398a866000612a10565b611d45818b8b8b6123c0565b50505050505050505050565b611d5c610800611142565b611da85760405162461bcd60e51b815260206004820152601f60248201527f4549503330303920726563657074696f6e73206172652064697361626c6564006044820152606401610cd5565b6000611ded7fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de860001b8b8b8b8b8b8b604051602001610fca9796959493929190613754565b9050896001600160a01b0316816001600160a01b031614611e205760405162461bcd60e51b8152600401610cd5906136b8565b864211611e695760405162461bcd60e51b81526020600482015260176024820152761cda59db985d1d5c99481b9bdd081e595d081d985b1a59604a1b6044820152606401610cd5565b854210611e885760405162461bcd60e51b8152600401610cd590613729565b6001600160a01b0389163314611d2d5760405162461bcd60e51b8152600401610cd590613691565b6001600160a01b03929092166000908152602081905260409020546000198084188216189216171690565b611ee56040611142565b611f3c5760405162461bcd60e51b815260206004820152602260248201527f64656c65676174696f6e73206f6e20626568616c66206172652064697361626c604482015261195960f21b6064820152608401610cd5565b604080517fff41620983935eb4d4a3c7384a066ca8c1d10cef9a5eca9eb97ca735cd14a75560208201526001600160a01b038816918101919091526060810186905260808101859052600090611f949060a001610fca565b9050844210611fb55760405162461bcd60e51b8152600401610cd590613729565b611fc181876000612a10565b611fcb8188612b1e565b50505050505050565b6000610b7333836119ef565b6000610bb88284613679565b6000610bb882846136e3565b6001600160a01b03821661204e5760405162461bcd60e51b815260206004820152601b60248201527f617070726f766520746f20746865207a65726f206164647265737300000000006044820152606401610cd5565b6001600160a01b0383811660008181526008602090815260408083209487168084529482529182902080549086905582518181529182018690529392917fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a7910160405180910390a3826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516120fb91815260200190565b60405180910390a350505050565b82546000908190156121565784548590612125906001906136e3565b81548110612135576121356136fa565b600091825260209091200154600160401b90046001600160c01b0316612159565b60005b6001600160c01b0316915061217282848663ffffffff16565b8554909150158015906121b95750845443908690612192906001906136e3565b815481106121a2576121a26136fa565b6000918252602090912001546001600160401b0316145b15612216578454819086906121d0906001906136e3565b815481106121e0576121e06136fa565b9060005260206000200160000160086101000a8154816001600160c01b0302191690836001600160c01b03160217905550612268565b604080518082019091526001600160401b0343811682526001600160c01b0380841660208085019182528954600181018b5560008b81529190912094519151909216600160401b029216919091179101555b935093915050565b816001600160a01b0316836001600160a01b0316148061228e575080155b6123ba576001600160a01b03831615612326576001600160a01b038316600090815260046020526040812090806122c883611fec86612109565b91509150856001600160a01b0316876001600160a01b03167fd1404f22081753a56b50e0d5ff5c9ed0e4a3a840e1171a443721a342e71bb5c1848460405161231a929190918252602082015260400190565b60405180910390a35050505b6001600160a01b038216156123ba576001600160a01b0382166000908152600460205260408120908061235c83611fe086612109565b91509150846001600160a01b0316876001600160a01b03167fd1404f22081753a56b50e0d5ff5c9ed0e4a3a840e1171a443721a342e71bb5c184846040516123ae929190918252602082015260400190565b60405180910390a35050505b50505050565b836001600160a01b0316836001600160a01b03161480156123e657506123e66001611142565b806124135750836001600160a01b0316836001600160a01b03161415801561241357506124136002611142565b846001600160a01b0316846001600160a01b031614612467576040518060400160405280602081526020017f7472616e7366657273206f6e20626568616c66206172652064697361626c6564815250612497565b604051806040016040528060168152602001751d1c985b9cd9995c9cc8185c9948191a5cd8589b195960521b8152505b906124b55760405162461bcd60e51b8152600401610cd591906131d5565b506001600160a01b03831661250c5760405162461bcd60e51b815260206004820152601e60248201527f7472616e736665722066726f6d20746865207a65726f206164647265737300006044820152606401610cd5565b6001600160a01b0382166125625760405162461bcd60e51b815260206004820152601c60248201527f7472616e7366657220746f20746865207a65726f2061646472657373000000006044820152606401610cd5565b816001600160a01b0316836001600160a01b0316036125db5760405162461bcd60e51b815260206004820152602f60248201527f73656e64657220616e6420726563697069656e7420617265207468652073616d60448201526e6520285f66726f6d203d205f746f2960881b6064820152608401610cd5565b306001600160a01b038316036126595760405162461bcd60e51b815260206004820152603f60248201527f696e76616c696420726563697069656e7420287472616e7366657220746f207460448201527f686520746f6b656e20736d61727420636f6e747261637420697473656c6629006064820152608401610cd5565b806000036126a157816001600160a01b0316836001600160a01b03166000805160206138588339815191528360405161269491815260200190565b60405180910390a36123ba565b836001600160a01b0316836001600160a01b03161461280f576001600160a01b038084166000908152600860209081526040808320938816835292905220548181101561273a5760405162461bcd60e51b815260206004820152602160248201527f7472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636044820152606560f81b6064820152608401610cd5565b60001981101561280d5761274e82826136e3565b6001600160a01b038086166000818152600860209081526040808320948b16808452949091529020839055919250907fb3fd5071835887567a0671151121894ddccc2842f1d10bedad13e0d17cace9a76127a88585613679565b60408051918252602082018690520160405180910390a3846001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161280491815260200190565b60405180910390a35b505b6001600160a01b0383166000908152600260205260409020548111156128775760405162461bcd60e51b815260206004820152601f60248201527f7472616e7366657220616d6f756e7420657863656564732062616c616e6365006044820152606401610cd5565b6001600160a01b0383166000908152600260205260408120805483929061289f9084906136e3565b90915550506001600160a01b038216600090815260026020526040812080548392906128cc908490613679565b90915550506001600160a01b038084166000908152600360205260408082205485841683529120546129049287928116911684612270565b816001600160a01b0316836001600160a01b0316856001600160a01b03167fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f8460405161295391815260200190565b60405180910390a4816001600160a01b0316836001600160a01b0316600080516020613858833981519152836040516120fb91815260200190565b835160208086019190912060405161190160f01b928101929092527f000000000000000000000000000000000000000000000000000000000000000060228301526042820181905260009182906062016040516020818303038152906040528051906020012090506000612a0482888888612ff2565b98975050505050505050565b6001600160a01b038316600090815260076020908152604080832085845290915290205460ff1615612a745760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b6044820152606401610cd5565b6001600160a01b03831660009081526007602090815260408083208584529091529020805460ff191660011790558015612ae35760405182906001600160a01b038516907f1cdd46ff242716cdaa72d159d339a485b3438398348d68f09d7c8c0a59353d8190600090a3505050565b60405182906001600160a01b038516907f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a590600090a3505050565b6001600160a01b0380831660009081526003602081815260408084208054600284529190942054929091528484166001600160a01b0319821617909255911690612b6a84838584612270565b826001600160a01b0316826001600160a01b0316856001600160a01b03167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a450505050565b81546000908103612bcd57506000610b73565b825482908490612bdf906001906136e3565b81548110612bef57612bef6136fa565b6000918252602090912001546001600160401b031611612c4c5782548390612c19906001906136e3565b81548110612c2957612c296136fa565b600091825260209091200154600160401b90046001600160c01b03169050610b73565b8183600081548110612c6057612c606136fa565b6000918252602090912001546001600160401b03161115612c8357506000610b73565b82546000908190612c96906001906136e3565b90505b81811115612d665760006002612caf84846136e3565b612cb99190613790565b612cc390836136e3565b90506000868281548110612cd957612cd96136fa565b6000918252602091829020604080518082019091529101546001600160401b038116808352600160401b9091046001600160c01b0316928201929092529150869003612d3757602001516001600160c01b03169350610b7392505050565b80516001600160401b0316861115612d5157819350612d5f565b612d5c6001836136e3565b92505b5050612c99565b848281548110612d7857612d786136fa565b600091825260209091200154600160401b90046001600160c01b031695945050505050565b833b612de55780612de05760405162461bcd60e51b815260206004820152600d60248201526c1153d0481c9958da5c1a595b9d609a1b6044820152606401610cd5565b612ecb565b604051632229f29760e21b81526000906001600160a01b038616906388a7ca5c90612e1a9033908a90899089906004016137b2565b6020604051808303816000875af1158015612e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5d91906137ef565b90506001600160e01b03198116632229f29760e21b146110205760405162461bcd60e51b815260206004820152602360248201527f696e76616c6964206f6e5472616e73666572526563656976656420726573706f6044820152626e736560e81b6064820152608401610cd5565b5050505050565b823b612f0e5760405162461bcd60e51b815260206004820152600b60248201526a22a7a09039b832b73232b960a91b6044820152606401610cd5565b6040516307b04a2d60e41b81526000906001600160a01b03851690637b04a2d090612f419033908790879060040161380c565b6020604051808303816000875af1158015612f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8491906137ef565b90506001600160e01b031981166307b04a2d60e41b146123ba5760405162461bcd60e51b815260206004820152602360248201527f696e76616c6964206f6e417070726f76616c526563656976656420726573706f6044820152626e736560e81b6064820152608401610cd5565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156130645760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c756500000000006044820152606401610cd5565b8360ff16601b148061307957508360ff16601c145b6130c55760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c756500000000006044820152606401610cd5565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613119573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661314c5760405162461bcd60e51b8152600401610cd5906136b8565b95945050505050565b6001600160e01b03198116811461108857600080fd5b60006020828403121561317d57600080fd5b8135610bb881613155565b6000815180845260005b818110156131ae57602081850181015186830182015201613192565b818111156131c0576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610bb86020830184613188565b80356001600160a01b03811681146131ff57600080fd5b919050565b6000806040838503121561321757600080fd5b613220836131e8565b946020939093013593505050565b60006020828403121561324057600080fd5b610bb8826131e8565b60008060006060848603121561325e57600080fd5b613267846131e8565b9250613275602085016131e8565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126132ac57600080fd5b81356001600160401b03808211156132c6576132c6613285565b604051601f8301601f19908116603f011681019082821181831017156132ee576132ee613285565b8160405283815286602085880101111561330757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561333c57600080fd5b613345846131e8565b92506020840135915060408401356001600160401b0381111561336757600080fd5b6133738682870161329b565b9150509250925092565b803560ff811681146131ff57600080fd5b600080600080600060a086880312156133a657600080fd5b6133af866131e8565b9450602086013593506133c46040870161337d565b94979396509394606081013594506080013592915050565b602080825282518282018190526000919060409081850190868401855b8281101561343057815180516001600160401b031685528601516001600160c01b03168685015292840192908501906001016133f9565b5091979650505050505050565b60006020828403121561344f57600080fd5b5035919050565b6000806000806080858703121561346c57600080fd5b613475856131e8565b9350613483602086016131e8565b92506040850135915060608501356001600160401b038111156134a557600080fd5b6134b18782880161329b565b91505092959194509250565b600080600080600080600060e0888a0312156134d857600080fd5b6134e1886131e8565b96506134ef602089016131e8565b9550604088013594506060880135935061350b6080890161337d565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561353a57600080fd5b613543836131e8565b9150613551602084016131e8565b90509250929050565b60008060008060008060008060006101208a8c03121561357957600080fd5b6135828a6131e8565b985061359060208b016131e8565b975060408a0135965060608a0135955060808a0135945060a08a013593506135ba60c08b0161337d565b925060e08a013591506101008a013590509295985092959850929598565b6000806000606084860312156135ed57600080fd5b6135f6846131e8565b95602085013595506040909401359392505050565b60008060008060008060c0878903121561362457600080fd5b61362d876131e8565b955060208701359450604087013593506136496060880161337d565b92506080870135915060a087013590509295509295509295565b634e487b7160e01b600052601160045260246000fd5b6000821982111561368c5761368c613663565b500190565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b6000828210156136f5576136f5613663565b500390565b634e487b7160e01b600052603260045260246000fd5b60006001820161372257613722613663565b5060010190565b6020808252601190820152701cda59db985d1d5c9948195e1c1a5c9959607a1b604082015260600190565b9687526001600160a01b0395861660208801529390941660408601526060850191909152608084015260a083019190915260c082015260e00190565b6000826137ad57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906137e590830184613188565b9695505050505050565b60006020828403121561380157600080fd5b8151610bb881613155565b60018060a01b038416815282602082015260606040820152600061314c606083018461318856fe4172746966696369616c204c697175696420496e74656c6c6967656e636520546f6b656eddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220d80d50424d47a6bc7b2308a0db15413a8610ae361a5e6a7e4f140cbb2311ca1664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "A function to check an amount of tokens owner approved      to transfer on its behalf by some other address called \"spender\"",
        "params": {
          "_owner": "an address which approves transferring some tokens on its behalf",
          "_spender": "an address approved to transfer some tokens on behalf"
        },
        "returns": {
          "remaining": "an amount of tokens approved address `_spender` can transfer on behalf      of token owner `_owner`"
        }
      },
      "approve(address,uint256)": {
        "details": "Transaction sender must not necessarily own any tokens to grant the permission",
        "params": {
          "_spender": "an address approved by the caller (token owner)      to spend some tokens on its behalf",
          "_value": "an amount of tokens spender `_spender` is allowed to      transfer on behalf of the token owner"
        },
        "returns": {
          "success": "true on success, throws otherwise"
        }
      },
      "approveAndCall(address,uint256)": {
        "details": "Caller must not necessarily own any tokens to grant the permissionThrows if `_spender` is an EOA or a smart contract which doesn't support ERC1363Spender interface",
        "params": {
          "_spender": "an address approved by the caller (token owner)      to spend some tokens on its behalf",
          "_value": "an amount of tokens spender `_spender` is allowed to      transfer on behalf of the token owner"
        },
        "returns": {
          "_0": "success true on success, throws otherwise"
        }
      },
      "approveAndCall(address,uint256,bytes)": {
        "details": "Caller must not necessarily own any tokens to grant the permission",
        "params": {
          "_data": "[optional] additional data with no specified format,      sent in onApprovalReceived call to `_spender`",
          "_spender": "an address approved by the caller (token owner)      to spend some tokens on its behalf",
          "_value": "an amount of tokens spender `_spender` is allowed to      transfer on behalf of the token owner"
        },
        "returns": {
          "_0": "success true on success, throws otherwise"
        }
      },
      "authorizationState(address,bytes32)": {
        "details": "Nonces are expected to be client-side randomly generated 32-byte values      unique to the authorizer's addressAlias for usedNonces(authorizer, nonce)",
        "params": {
          "_authorizer": "an address to check nonce for",
          "_nonce": "a nonce to check"
        },
        "returns": {
          "_0": "true if the nonce was used, false otherwise"
        }
      },
      "balanceOf(address)": {
        "params": {
          "_owner": "the address to query the the balance for"
        },
        "returns": {
          "balance": "an amount of tokens owned by the address specified"
        }
      },
      "burn(address,uint256)": {
        "details": "Burns (destroys) some tokens from the address specifiedThe value specified is treated as is without taking      into account what `decimals` value isRequires executor to have `ROLE_TOKEN_DESTROYER` permission      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabledCan be disabled by the contract creator forever by disabling      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking      its own roles to burn tokens and to enable burning features",
        "params": {
          "_from": "an address to burn some tokens from",
          "_value": "an amount of tokens to burn (destroy)"
        },
        "returns": {
          "_0": "true function always returns true as it's prerequisite of multichain-bridge."
        }
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_authorizer": "transaction authorizer",
          "_nonce": "unique random nonce to cancel (mark as used)",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "constructor": {
        "details": "Constructs/deploys Binance Smart Chain(BSC) ALI instance,      assigns initial token supply to the address specified"
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)Throws if value to decrease by is zero or is greater than currently allowed value",
        "params": {
          "_spender": "an address approved by the caller (token owner)      to spend some tokens on its behalf",
          "_value": "an amount of tokens to decrease by"
        },
        "returns": {
          "_0": "success true on success, throws otherwise"
        }
      },
      "delegate(address)": {
        "details": "Accepts zero value address to delegate voting power to, effectively      removing the delegate in that case",
        "params": {
          "_to": "address to delegate voting power to"
        }
      },
      "delegateWithAuthorization(address,bytes32,uint256,uint8,bytes32,bytes32)": {
        "details": "Accepts zero value address to delegate voting power to, effectively      removing the delegate in that caseCompliant with EIP-712: Ethereum typed structured data hashing and signing,      see https://eips.ethereum.org/EIPS/eip-712",
        "params": {
          "_exp": "signature expiration time",
          "_nonce": "nonce used to construct the signature, and used to validate it;      nonce is increased by one after successful signature validation and vote delegation",
          "_to": "address to delegate voting power to",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "entireSupplyHistory()": {
        "details": "Reads an entire total token supply history array",
        "returns": {
          "_0": "total token supply history array, a key-value pair array,      where key is a block number and value is total token supply at that block"
        }
      },
      "evaluateBy(address,uint256,uint256)": {
        "details": "Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011",
        "params": {
          "desired": "desired set of permissions operator would like to set",
          "operator": "address of the contract operator which is about to set the permissions",
          "target": "input set of permissions to operator is going to modify"
        },
        "returns": {
          "_0": "resulting set of permissions given operator will set"
        }
      },
      "features()": {
        "details": "Effectively reads userRoles role for the contract itself",
        "returns": {
          "_0": "256-bit bitmask of the features enabled"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)Throws if value to increase by is zero or too big and causes arithmetic overflow",
        "params": {
          "_spender": "an address approved by the caller (token owner)      to spend some tokens on its behalf",
          "_value": "an amount of tokens to increase by"
        },
        "returns": {
          "_0": "success true on success, throws otherwise"
        }
      },
      "isFeatureEnabled(uint256)": {
        "params": {
          "required": "set of features to check against"
        },
        "returns": {
          "_0": "true if all the features requested are enabled, false otherwise"
        }
      },
      "isOperatorInRole(address,uint256)": {
        "params": {
          "operator": "address of the user to check role for",
          "required": "set of permissions (role) to check"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isSenderInRole(uint256)": {
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "mint(address,uint256)": {
        "details": "Mints (creates) some tokens to address specifiedThe value specified is treated as is without taking      into account what `decimals` value isRequires executor to have `ROLE_TOKEN_CREATOR` permissionThrows on overflow, if totalSupply + _value doesn't fit into uint256",
        "params": {
          "_to": "an address to mint tokens to",
          "_value": "an amount of tokens to mint (create)"
        },
        "returns": {
          "_0": "true function always returns true as it's prerequisite of multichain-bridge."
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Executes approve(_spender, _value) on behalf of the owner who EIP-712      signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_value` as the allowance of `_spender` over `_owner` tokens,      given `_owner` EIP-712 signed approvalInherits the Multiple Withdrawal Attack on ERC20 Tokens (arXiv:1907.00903)      vulnerability in the same way as ERC20 `approve`, use standard ERC20 workaround      if this might become an issue:      https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/editEmits `Approval` event(s) in the same way as `approve` doesRequires:     - `_spender` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `nonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification",
        "params": {
          "_exp": "signature expiration time (unix timestamp)",
          "_owner": "owner of the tokens to set approval on behalf of,      an address which signed the EIP-712 message",
          "_spender": "an address approved by the token owner      to spend some tokens on its behalf",
          "_value": "an amount of tokens spender `_spender` is allowed to      transfer on behalf of the token owner",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "details": "This has an additional check to ensure that the payee's address      matches the caller of this function to prevent front-running attacks.",
        "params": {
          "_from": "token sender and transaction authorizer",
          "_nonce": "unique random nonce",
          "_to": "token receiver",
          "_validAfter": "signature valid after time (unix timestamp)",
          "_validBefore": "signature valid before time (unix timestamp)",
          "_value": "amount to be transferred",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Called by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise",
        "params": {
          "_data": "[optional] additional data with no specified format,      sent in onTransferReceived call to `_to` in case if its a smart contract",
          "_from": "token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf",
          "_to": "an address to transfer tokens to,      must be either an external address or a smart contract,      implementing ERC1363Receiver",
          "_value": "amount of tokens to be transferred,, zero      value is allowed"
        },
        "returns": {
          "_0": "true unless throwing"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "totalSupplyAt(uint256)": {
        "details": "Throws if `_blockNum` is not in the past (not the finalized block)",
        "params": {
          "_blockNum": "block number to get the total token supply at"
        },
        "returns": {
          "_0": "past total token supply at block number `_blockNum`"
        }
      },
      "totalSupplyHistoryLength()": {
        "details": "Returns length of the total token supply history array;      useful since reading an entire array just to get its length is expensive (gas cost)",
        "returns": {
          "_0": "total token supply history array"
        }
      },
      "transfer(address,uint256)": {
        "details": "Called by token owner (an address which has a      positive token balance tracked by this smart contract)Throws on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * self address or          * smart contract which doesn't support ERC20",
        "params": {
          "_to": "an address to transfer tokens to,      must be either an external address or a smart contract,      compliant with the ERC20 standard",
          "_value": "amount of tokens to be transferred,, zero      value is allowed"
        },
        "returns": {
          "success": "true on success, throws otherwise"
        }
      },
      "transferAndCall(address,uint256)": {
        "details": "Called by token owner (an address which has a      positive token balance tracked by this smart contract)Throws on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * EOA or smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise",
        "params": {
          "_to": "an address to transfer tokens to,      must be a smart contract, implementing ERC1363Receiver",
          "_value": "amount of tokens to be transferred,, zero      value is allowed"
        },
        "returns": {
          "_0": "true unless throwing"
        }
      },
      "transferAndCall(address,uint256,bytes)": {
        "details": "Called by token owner (an address which has a      positive token balance tracked by this smart contract)Throws on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * EOA or smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise",
        "params": {
          "_data": "[optional] additional data with no specified format,      sent in onTransferReceived call to `_to`",
          "_to": "an address to transfer tokens to,      must be a smart contract, implementing ERC1363Receiver",
          "_value": "amount of tokens to be transferred,, zero      value is allowed"
        },
        "returns": {
          "_0": "true unless throwing"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Called by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * smart contract which doesn't support ERC20",
        "params": {
          "_from": "token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf",
          "_to": "an address to transfer tokens to,      must be either an external address or a smart contract,      compliant with the ERC20 standard",
          "_value": "amount of tokens to be transferred,, zero      value is allowed"
        },
        "returns": {
          "success": "true on success, throws otherwise"
        }
      },
      "transferFromAndCall(address,address,uint256)": {
        "details": "Called by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * EOA or smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise",
        "params": {
          "_from": "token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf",
          "_to": "an address to transfer tokens to,      must be a smart contract, implementing ERC1363Receiver",
          "_value": "amount of tokens to be transferred,, zero      value is allowed"
        },
        "returns": {
          "_0": "true unless throwing"
        }
      },
      "transferFromAndCall(address,address,uint256,bytes)": {
        "details": "Called by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)          * EOA or smart contract which doesn't support ERC1363Receiver interfaceReturns true on success, throws otherwise",
        "params": {
          "_data": "[optional] additional data with no specified format,      sent in onTransferReceived call to `_to`",
          "_from": "token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf",
          "_to": "an address to transfer tokens to,      must be a smart contract, implementing ERC1363Receiver",
          "_value": "amount of tokens to be transferred,, zero      value is allowed"
        },
        "returns": {
          "_0": "true unless throwing"
        }
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_from": "token sender and transaction authorizer",
          "_nonce": "unique random nonce",
          "_to": "token receiver",
          "_validAfter": "signature valid after time (unix timestamp)",
          "_validBefore": "signature valid before time (unix timestamp)",
          "_value": "amount to be transferred",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "unsafeTransferFrom(address,address,uint256)": {
        "details": "In contrast to `transferFromAndCall` doesn't check recipient      smart contract to support ERC20 tokens (ERC1363Receiver)Designed to be used by developers when the receiver is known      to support ERC20 tokens but doesn't implement ERC1363Receiver interfaceCalled by token owner on his own or approved address,      an address approved earlier by token owner to      transfer some amount of tokens on its behalfThrows on any error like      * insufficient token balance or      * incorrect `_to` address:          * zero address or          * same as `_from` address (self transfer)Returns silently on success, throws otherwise",
        "params": {
          "_from": "token sender, token owner which approved caller (transaction sender)      to transfer `_value` of tokens on its behalf",
          "_to": "token receiver, an address to transfer tokens to",
          "_value": "amount of tokens to be transferred,, zero      value is allowed"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "operator": "address of a user to alter permissions for or zero      to alter global features of the smart contract",
          "role": "bitmask representing a set of permissions to      enable/disable for a user specified"
        }
      },
      "votingPowerAt(address,uint256)": {
        "details": "Throws if `_blockNum` is not in the past (not the finalized block)",
        "params": {
          "_blockNum": "block number to get the voting power at",
          "_of": "the address of account to get voting power of"
        },
        "returns": {
          "_0": "past cumulative voting power of the account,      sum of token balances of all its voting delegators at block number `_blockNum`"
        }
      },
      "votingPowerHistoryLength(address)": {
        "details": "Returns length of the voting power history array for the delegate specified;      useful since reading an entire array just to get its length is expensive (gas cost)",
        "params": {
          "_of": "delegate to query voting power history length for"
        },
        "returns": {
          "_0": "voting power history array length for the delegate of interest"
        }
      },
      "votingPowerHistoryOf(address)": {
        "details": "Reads an entire voting power history array for the delegate specified",
        "params": {
          "_of": "delegate to query voting power history for"
        },
        "returns": {
          "_0": "voting power history array for the delegate of interest"
        }
      },
      "votingPowerOf(address)": {
        "params": {
          "_of": "the address of account to get voting power of"
        },
        "returns": {
          "_0": "current cumulative voting power of the account,      sum of token balances of all its voting delegators"
        }
      }
    },
    "stateVariables": {
      "underlying": {
        "details": "\"underlying\" is a dummy variable. Multichain frontend      recognizes our token via \"underlying\""
      }
    },
    "title": "Artificial Liquid Intelligence ERC20 Token (With BSC Bridging Support)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CANCEL_AUTHORIZATION_TYPEHASH()": {
        "notice": "EIP-712 CancelAuthorization (EIP-3009) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "DELEGATION_TYPEHASH()": {
        "notice": "EIP-712 delegation struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "DOMAIN_SEPARATOR()": {
        "notice": "EIP-712 contract's domain separator,      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "EIP-712 contract's domain typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "FEATURE_BURNS_ON_BEHALF()": {
        "notice": "Enables approved operators to burn tokens on behalf of their owners"
      },
      "FEATURE_DELEGATIONS()": {
        "notice": "Enables delegators to elect delegates"
      },
      "FEATURE_DELEGATIONS_ON_BEHALF()": {
        "notice": "Enables delegators to elect delegates on behalf      (via an EIP712 signature)"
      },
      "FEATURE_EIP2612_PERMITS()": {
        "notice": "Enables approvals on behalf (EIP2612 permits      via an EIP712 signature)"
      },
      "FEATURE_EIP3009_RECEPTIONS()": {
        "notice": "Enables meta transfers on behalf (EIP3009 transfers      via an EIP712 signature)"
      },
      "FEATURE_EIP3009_TRANSFERS()": {
        "notice": "Enables meta transfers on behalf (EIP3009 transfers      via an EIP712 signature)"
      },
      "FEATURE_ERC1363_APPROVALS()": {
        "notice": "Enables ERC-1363 approvals with callback"
      },
      "FEATURE_ERC1363_TRANSFERS()": {
        "notice": "Enables ERC-1363 transfers with callback"
      },
      "FEATURE_OWN_BURNS()": {
        "notice": "Enables token owners to burn their own tokens"
      },
      "FEATURE_TRANSFERS()": {
        "notice": "Enables ERC20 transfers of the tokens      (transfer by the token owner himself)"
      },
      "FEATURE_TRANSFERS_ON_BEHALF()": {
        "notice": "Enables ERC20 transfers on behalf      (transfer by someone else on behalf of token owner)"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "EIP-712 permit (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH()": {
        "notice": "EIP-712 ReceiveWithAuthorization (EIP-3009) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "ROLE_ACCESS_MANAGER()": {
        "notice": "Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features"
      },
      "ROLE_ERC20_RECEIVER()": {
        "notice": "ERC20 receivers are allowed to receive tokens without ERC20 safety checks,      which may be useful to simplify tokens transfers into \"legacy\" smart contracts"
      },
      "ROLE_ERC20_SENDER()": {
        "notice": "ERC20 senders are allowed to send tokens without ERC20 safety checks,      which may be useful to simplify tokens transfers into \"legacy\" smart contracts"
      },
      "ROLE_TOKEN_CREATOR()": {
        "notice": "Token creator is responsible for creating (minting)      tokens to an arbitrary address"
      },
      "ROLE_TOKEN_DESTROYER()": {
        "notice": "Token destroyer is responsible for destroying (burning)      tokens owned by an arbitrary address"
      },
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()": {
        "notice": "EIP-712 TransferWithAuthorization (EIP-3009) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "allowance(address,address)": {
        "notice": "Returns the amount which _spender is still allowed to withdraw from _owner."
      },
      "approve(address,uint256)": {
        "notice": "Approves address called `_spender` to transfer some amount      of tokens on behalf of the owner (transaction sender)"
      },
      "approveAndCall(address,uint256)": {
        "notice": "Approves address called `_spender` to transfer some amount      of tokens on behalf of the owner, then executes a `onApprovalReceived` callback on `_spender`"
      },
      "approveAndCall(address,uint256,bytes)": {
        "notice": "Approves address called `_spender` to transfer some amount      of tokens on behalf of the owner, then executes a callback on `_spender`"
      },
      "authorizationState(address,bytes32)": {
        "notice": "Checks if specified nonce was already used"
      },
      "balanceOf(address)": {
        "notice": "Gets the balance of a particular address"
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Attempt to cancel an authorization"
      },
      "decimals()": {
        "notice": "Decimals of the token: 18"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decreases the allowance granted to `spender` by the caller."
      },
      "delegate(address)": {
        "notice": "Delegates voting power of the delegator `msg.sender` to the delegate `_to`"
      },
      "delegateWithAuthorization(address,bytes32,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates voting power of the delegator (represented by its signature) to the delegate `_to`"
      },
      "evaluateBy(address,uint256,uint256)": {
        "notice": "Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions"
      },
      "features()": {
        "notice": "Retrieves globally set of features enabled"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increases the allowance granted to `spender` by the transaction sender"
      },
      "isFeatureEnabled(uint256)": {
        "notice": "Checks if requested set of features is enabled globally on the contract"
      },
      "isOperatorInRole(address,uint256)": {
        "notice": "Checks if operator has all the permissions (role) required"
      },
      "isSenderInRole(uint256)": {
        "notice": "Checks if transaction sender `msg.sender` has all the permissions required"
      },
      "name()": {
        "notice": "Name of the token: Artificial Liquid Intelligence TokenERC20 name of the token (long name)"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "For all addresses owner, spender, uint256s value, deadline and nonce, uint8 v, bytes32 r and s,      a call to permit(owner, spender, value, deadline, v, r, s) will set approval[owner][spender] to value,      increment nonces[owner] by 1, and emit a corresponding Approval event,      if and only if the following conditions are met:        - The current blocktime is less than or equal to deadline.        - owner is not the zero address.        - nonces[owner] (before the state update) is equal to nonce.        - r, s and v is a valid secp256k1 signature from owner of the message:"
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Receive a transfer with a signed authorization from the payer"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to` and then executes `onTransferReceived` callback      on the receiver if it is a smart contract (not an EOA)"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "symbol()": {
        "notice": "Symbol of the token: ALIERC20 symbol of that token (short name)"
      },
      "totalSupply()": {
        "notice": "Total supply of the token: initially 10,000,000,000,      with the potential to decline over time as some tokens may get burnt but not minted"
      },
      "totalSupplyAt(uint256)": {
        "notice": "Gets past total token supply value at some block `_blockNum`"
      },
      "totalSupplyHistory(uint256)": {
        "notice": "A record of total token supply historical data"
      },
      "transfer(address,uint256)": {
        "notice": "Transfers some tokens to an external address or a smart contract"
      },
      "transferAndCall(address,uint256)": {
        "notice": "Transfers some tokens and then executes `onTransferReceived` callback on the receiver"
      },
      "transferAndCall(address,uint256,bytes)": {
        "notice": "Transfers some tokens and then executes `onTransferReceived` callback on the receiver"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to`"
      },
      "transferFromAndCall(address,address,uint256)": {
        "notice": "Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to` and then executes `onTransferReceived` callback on the receiver"
      },
      "transferFromAndCall(address,address,uint256,bytes)": {
        "notice": "Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to` and then executes a `onTransferReceived` callback on the receiver"
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Execute a transfer with a signed authorization"
      },
      "unsafeTransferFrom(address,address,uint256)": {
        "notice": "Transfers some tokens on behalf of address `_from' (token owner)      to some other address `_to`"
      },
      "updateFeatures(uint256)": {
        "notice": "Updates set of the globally enabled features (`features`),      taking into account sender's permissions"
      },
      "updateRole(address,uint256)": {
        "notice": "Updates set of permissions (role) for a given user,      taking into account sender's permissions."
      },
      "userRoles(address)": {
        "notice": "Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on"
      },
      "votingDelegates(address)": {
        "notice": "A record of each account's voting delegate"
      },
      "votingPowerAt(address,uint256)": {
        "notice": "Gets past voting power of the account `_of` at some block `_blockNum`"
      },
      "votingPowerHistory(address,uint256)": {
        "notice": "A record of each account's voting power historical data"
      },
      "votingPowerOf(address)": {
        "notice": "Gets current voting power of the account `_of`"
      }
    },
    "notice": "Binance Smart Chain (BSC) extension contract ads the functions required to bridge original      ALI token on Ethereum L1; these are mint and burn functions executed      when the tokens are deposited from from Ethereum L1 into BSC L2 (mint),      and when the tokens are withdrawn back from BSC L2 into Ethereum L1 (burn).Read more:      https://docs.multichain.org/developer-guide/how-to-develop-under-anyswap-erc20-standards",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3572,
        "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
        "label": "userRoles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1228,
        "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
        "label": "totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1233,
        "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
        "label": "tokenBalances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1238,
        "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
        "label": "votingDelegates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1250,
        "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
        "label": "votingPowerHistory",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(KV)1243_storage)dyn_storage)"
      },
      {
        "astId": 1255,
        "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
        "label": "totalSupplyHistory",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(KV)1243_storage)dyn_storage"
      },
      {
        "astId": 1261,
        "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
        "label": "nonces",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1268,
        "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
        "label": "usedNonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 1275,
        "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
        "label": "transferAllowances",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(KV)1243_storage)dyn_storage": {
        "base": "t_struct(KV)1243_storage",
        "encoding": "dynamic_array",
        "label": "struct AliERC20v2Base.KV[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(KV)1243_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AliERC20v2Base.KV[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(KV)1243_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(KV)1243_storage": {
        "encoding": "inplace",
        "label": "struct AliERC20v2Base.KV",
        "members": [
          {
            "astId": 1240,
            "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
            "label": "k",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1242,
            "contract": "contracts/token/BinanceAliERC20v2.sol:BinanceAliERC20v2",
            "label": "v",
            "offset": 8,
            "slot": "0",
            "type": "t_uint192"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint192": {
        "encoding": "inplace",
        "label": "uint192",
        "numberOfBytes": "24"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}