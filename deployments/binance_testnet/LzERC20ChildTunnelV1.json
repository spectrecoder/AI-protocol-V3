{
  "address": "0x3A568A2f2a50A9092a28750f06e4A06977ca1A38",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "DepositComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "PayloadSizeLimitSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actual",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalInitiated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PAYLOAD_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_LZ_CONFIG_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_RESCUE_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_TUNNEL_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_UPGRADE_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childToken",
      "outputs": [
        {
          "internalType": "contract MintableBurnableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "estimateWithdrawalFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "desired",
          "type": "uint256"
        }
      ],
      "name": "evaluateBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "payloadSizeLimitLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_childToken",
          "type": "address"
        }
      ],
      "name": "postConstruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "rescueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootTunnelAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootTunnelChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setPayloadSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_rootTunnelChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_rootTunnelAddress",
          "type": "address"
        }
      ],
      "name": "setRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34731ea75ecf78b51702f8a1e0e3ea44acbe3ba447a4000a8ab78de75273cdb1",
  "receipt": {
    "to": null,
    "from": "0x5F185Da55f7BBD9217E3b3CeE06b180721FA6d34",
    "contractAddress": "0x3A568A2f2a50A9092a28750f06e4A06977ca1A38",
    "transactionIndex": 3,
    "gasUsed": "3072132",
    "logsBloom": "0x
    "blockHash": "0x3693027a6375eabf5b961a20e7c71d334beb2f862bacf24ff63faaa2ff7742f3",
    "transactionHash": "0x34731ea75ecf78b51702f8a1e0e3ea44acbe3ba447a4000a8ab78de75273cdb1",
    "logs": [],
    "blockNumber": 33023178,
    "cumulativeGasUsed": "3373102",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0428741c2f03e5b2c2bc7c99faa38c69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"PayloadSizeLimitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawalInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_LZ_CONFIG_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_RESCUE_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TUNNEL_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_UPGRADE_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childToken\",\"outputs\":[{\"internalType\":\"contract MintableBurnableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"estimateWithdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desired\",\"type\":\"uint256\"}],\"name\":\"evaluateBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_childToken\",\"type\":\"address\"}],\"name\":\"postConstruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootTunnelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootTunnelChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rootTunnelChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_rootTunnelAddress\",\"type\":\"address\"}],\"name\":\"setRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Basil Gorin\",\"details\":\"see https://github.com/LayerZero-Labs/LayerZerosee https://github.com/LayerZero-Labs/solidity-examples\",\"events\":{\"DepositComplete(uint256,address,address,uint256)\":{\"details\":\"Fired in `lzReceive` when token deposit completes successfully\",\"params\":{\"from\":\"token sender address in the root chain (L1)\",\"stateId\":\"unique tx identifier submitted from the root chain (L1)\",\"to\":\"token receiver address in the child chain (L2)\",\"value\":\"amount of tokens deposited\"}},\"WithdrawalInitiated(address,address,uint256)\":{\"details\":\"Fired in `withdraw` and `withdrawTo`\",\"params\":{\"from\":\"token sender address in the child chain (L2)\",\"to\":\"token receiver address in the root chain (L1)\",\"value\":\"amount of tokens withdrawn\"}}},\"kind\":\"dev\",\"methods\":{\"estimateWithdrawalFee(address,address,uint256)\":{\"params\":{\"_from\":\"token sender in the child chain (in L2)\",\"_to\":\"token recipient in the root chain (in L1)\",\"_value\":\"amount of tokens withdrawn\"},\"returns\":{\"_0\":\"token transfer fee in wei\"}},\"evaluateBy(address,uint256,uint256)\":{\"details\":\"Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011\",\"params\":{\"desired\":\"desired set of permissions operator would like to set\",\"operator\":\"address of the contract operator which is about to set the permissions\",\"target\":\"input set of permissions to operator is going to modify\"},\"returns\":{\"_0\":\"resulting set of permissions given operator will set\"}},\"features()\":{\"details\":\"Effectively reads userRoles role for the contract itself\",\"returns\":{\"_0\":\"256-bit bitmask of the features enabled\"}},\"forceResumeReceive(uint16,bytes)\":{\"details\":\"Requires sender to have ROLE_LZ_CONFIG_MANAGER permission\",\"params\":{\"_srcAddress\":\"- the contract address of the source contract at the source chain\",\"_srcChainId\":\"- the chainId of the source chain\"}},\"getImplementation()\":{\"returns\":{\"_0\":\"the current implementation address\"}},\"isFeatureEnabled(uint256)\":{\"params\":{\"required\":\"set of features to check against\"},\"returns\":{\"_0\":\"true if all the features requested are enabled, false otherwise\"}},\"isOperatorInRole(address,uint256)\":{\"params\":{\"operator\":\"address of the user to check role for\",\"required\":\"set of permissions (role) to check\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isSenderInRole(uint256)\":{\"params\":{\"required\":\"set of permissions (role) to check against\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"postConstruct(address,address)\":{\"details\":\"\\\"Constructor replacement\\\" for upgradeable, must be execute immediately after deployment      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializersInitializes an Non-Ethereum network (L2) exit bound to      LayerZero Endpoint, and child ERC20 tokenLayerZero Endpoint is a helper contract providing      L1/L2 messaging infrastructure, managed by the LayerZero\",\"params\":{\"_childToken\":\"child ERC20 token address\",\"_lzEndpoint\":\"LayerZero Endpoint contract address (maintained by LayerZero)\"}},\"rescueToken(address,address,uint256)\":{\"details\":\"Restricted access function to rescue accidentally sent tokens,      the tokens are rescued via `transferFrom` function call on the      contract address specified and with the parameters specified:      `_contract.transferFrom(this, _to, _value)`Requires executor to have `ROLE_RESCUE_MANAGER` permission\",\"params\":{\"_contract\":\"smart contract address to execute `transfer` function on\",\"_to\":\"to address in `transferFrom(this, _to, _value)`\",\"_value\":\"value to transfer in `transferFrom(this, _to, _value)`;      this can also be a tokenId for ERC721 transfer\"}},\"setConfig(uint16,uint16,uint256,bytes)\":{\"details\":\"Requires sender to have ROLE_LZ_CONFIG_MANAGER permission\",\"params\":{\"_chainId\":\"- the chainId for the pending config change\",\"_config\":\"- configuration in the bytes. can encode arbitrary content.\",\"_configType\":\"- type of configuration. every messaging library has its own convention.\",\"_version\":\"- messaging library version\"}},\"setMinDstGas(uint16,uint16,uint256)\":{\"details\":\"see LzAppUpgradeable\"},\"setPayloadSizeLimit(uint16,uint256)\":{\"details\":\"see LzAppUpgradeable\"},\"setPrecrime(address)\":{\"details\":\"see LzAppUpgradeable\"},\"setReceiveVersion(uint16)\":{\"details\":\"Requires sender to have ROLE_LZ_CONFIG_MANAGER permission\",\"params\":{\"_version\":\"- new messaging library version\"}},\"setRootTunnel(uint16,address)\":{\"details\":\"Sets the rootTunnel if it is not yet set\",\"params\":{\"_rootTunnelAddress\":\"root tunnel address to set\",\"_rootTunnelChainId\":\"root tunnel chain ID to set\"}},\"setSendVersion(uint16)\":{\"details\":\"Requires sender to have ROLE_LZ_CONFIG_MANAGER permission\",\"params\":{\"_version\":\"- new messaging library version\"}},\"updateFeatures(uint256)\":{\"details\":\"Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions\",\"params\":{\"_mask\":\"bitmask representing a set of features to enable/disable\"}},\"updateRole(address,uint256)\":{\"details\":\"Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission\",\"params\":{\"operator\":\"address of a user to alter permissions for or zero      to alter global features of the smart contract\",\"role\":\"bitmask representing a set of permissions to      enable/disable for a user specified\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256)\":{\"params\":{\"_value\":\"amount of tokens to withdraw\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"_to\":\"token recipient in the root chain (L1)\",\"_value\":\"amount of tokens to withdraw\"}}},\"stateVariables\":{\"ROLE_RESCUE_MANAGER\":{\"details\":\"Role ROLE_RESCUE_MANAGER allows withdrawing non-bridged ERC20/ERC721      tokens stored on the smart contract balance via `rescueTokens` function\"},\"rootTunnelAddress\":{\"details\":\"Incoming messages must specify this LzERC20RootTunnel address in order to be accepted\"},\"rootTunnelChainId\":{\"details\":\"Incoming messages must specify this chainId in order to be accepted      see https://layerzero.gitbook.io/docs/technical-reference/mainnet/supported-chain-ids      see https://layerzero.gitbook.io/docs/technical-reference/testnet/testnet-addresses\"},\"usedNoncesBitmap\":{\"details\":\"Used nonces storage. We use bitmap map (uint256 => uint256)      instead of (uint256 => bool) map to save on storageThe bit corresponding to nonce `i` is located at the position `i % 256` in the slot number i / 256\"}},\"title\":\"LayerZero ERC20 Child Tunnel\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ROLE_ACCESS_MANAGER()\":{\"notice\":\"Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features\"},\"ROLE_LZ_CONFIG_MANAGER()\":{\"notice\":\"LZ Config Manager is responsible for tunnel configuration, manager is      allowed to access LZ Endpoint configuration functions via the tunnel\"},\"ROLE_RESCUE_MANAGER()\":{\"notice\":\"People do mistakes and may send tokens by mistakeRescue manager is responsible for \\\"rescuing\\\" ERC20/ERC721 tokens      accidentally sent to the smart contract\"},\"ROLE_TUNNEL_MANAGER()\":{\"notice\":\"Tunnel Manager is responsible for tunnel setup, manager is      allowed to access tunnel setup related functions\"},\"ROLE_UPGRADE_MANAGER()\":{\"notice\":\"Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\"},\"childToken()\":{\"notice\":\"Child tunnel is strictly bound to the child ERC20 token\"},\"estimateWithdrawalFee(address,address,uint256)\":{\"notice\":\"Estimates the token transfer fee from L2 to L1; this should be supplied      as a transaction value into withdraw/withdrawTo\"},\"evaluateBy(address,uint256,uint256)\":{\"notice\":\"Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions\"},\"features()\":{\"notice\":\"Retrieves globally set of features enabled\"},\"forceResumeReceive(uint16,bytes)\":{\"notice\":\"Restricted access function to execute `forceResumeReceive` function on the LZ Endpoint      Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\"},\"getImplementation()\":{\"notice\":\"Returns an address of the implementation smart contract,      see ERC1967Upgrade._getImplementation()\"},\"isFeatureEnabled(uint256)\":{\"notice\":\"Checks if requested set of features is enabled globally on the contract\"},\"isOperatorInRole(address,uint256)\":{\"notice\":\"Checks if operator has all the permissions (role) required\"},\"isSenderInRole(uint256)\":{\"notice\":\"Checks if transaction sender `msg.sender` has all the permissions required\"},\"rootTunnelAddress()\":{\"notice\":\"The address of the deployed LzERC20RootTunnel which is bound to this LzERC20ChildTunnel\"},\"rootTunnelChainId()\":{\"notice\":\"LayerZero specific chainId where the LzERC20RootTunnel is deployed\"},\"setConfig(uint16,uint16,uint256,bytes)\":{\"notice\":\"Restricted access function to execute `setConfig` function on the LZ Endpoint      set the configuration of the LayerZero messaging library of the specified version\"},\"setReceiveVersion(uint16)\":{\"notice\":\"Restricted access function to execute `setReceiveVersion` function on the LZ Endpoint      set the lzReceive() LayerZero messaging library version to _version\"},\"setSendVersion(uint16)\":{\"notice\":\"Restricted access function to execute `setSendVersion` function on the LZ Endpoint      set the send() LayerZero messaging library version to _version\"},\"updateFeatures(uint256)\":{\"notice\":\"Updates set of the globally enabled features (`features`),      taking into account sender's permissions\"},\"updateRole(address,uint256)\":{\"notice\":\"Updates set of permissions (role) for a given user,      taking into account sender's permissions.\"},\"userRoles(address)\":{\"notice\":\"Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on\"},\"withdraw(uint256)\":{\"notice\":\"L2 Tunnel Entrance.      L2 Tunnel is always open in both directions.Initiates the withdrawal from the child chain (L2) into the root chain (L1)      to the same address which initiated the withdrawal processThe process is finalized in the root chain (L1) via the      `LzERC20RootTunnel.lzReceive` without the user/initiator participationUser pays for the withdrawal message delivery in native currency.      The amount to be payed can be estimated with `estimateWithdrawalFee`Specified amount of tokens is burnt from the sender,      user may need to make sure this amount is approved for transfer/burning\"},\"withdrawTo(address,uint256)\":{\"notice\":\"L2 Tunnel Entrance.      L2 Tunnel is always open in both directions.Initiates the withdrawal from the child chain (L2) into the root chain (L1)The process is finalized in the root chain (L1) via the      `LzERC20RootTunnel.lzReceive` without the user/initiator participationUser pays for the withdrawal message delivery in native currency.      The amount to be payed can be estimated with `estimateWithdrawalFee`Specified amount of tokens is burnt from the sender,      user may need to make sure this amount is approved for transfer/burning\"}},\"notice\":\"Non-Ethereum network (child chain - L2) exit of the ERC20 tunnel,      can be used for Non-Ethereum mainnet and testnet networks (ex. Polygon/Mumbai)The tunnel is used to bridge specific ERC20 token between L1/L2;      we call L1 -> L2 bridging a \\\"deposit\\\", L2 -> L1 a \\\"withdrawal\\\"The tunnel has two entrances and two exits:       LzERC20RootTunnel contains Root/L1 entrance and exit,       and LzERC20ChildTunnel contains Child/L2 entrance and exitAll exits and child entrance are always open, while root entrance      may get paused or even closed permanentlyDeposit flow:      1. The user initiates a deposit on the L1 entrance by executing the deposit function         `LzERC20RootTunnel.deposit` or `LzERC20RootTunnel.depositTo`      2. LayerZero messaging system picks up the event emitted by the `deposit` call         and delivers it to L2 chain      3. The deposit completes on the L2 exit when LayerZero messaging system executes         the `LzERC20ChildTunnel.lzReceive` function      Note: overall, the user executes only one function and then just waits for the bridge         operation to completeWithdrawal flow:      1. The user initiates a withdrawal on the L2 entrance by executing the withdraw function         `LzERC20ChildTunnel.withdraw` or `LzERC20ChildTunnel.withdrawTo`      2. LayerZero messaging system picks up the event emitted by the `withdraw` call         and delivers it to L1 chain      3. The withdrawal completes on the L1 exit when LayerZero messaging system executes         the `LzERC20RootTunnel.lzReceive` function      Note: overall, the user executes only one function and then just waits for the bridge         operation to complete\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/layer_zero/LzERC20ChildTunnelV1.sol\":\"LzERC20ChildTunnelV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroEndpointUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\n\\ninterface ILayerZeroEndpointUpgradeable is ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x748e7abf8908f264c6fff8ea7730b1766ab5a262be7962404f7d263066b41487\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroReceiverUpgradeable {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x6ce5593a1247719f7209cad8068573c249674b41b859c6379ace1baaea0ed2a3\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\ninterface ILayerZeroUserApplicationConfigUpgradeable {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xa808baa32db12c453b982320e0c9a8c07aec8c0f3bb36ac2ed26f3ad47476879\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/LzAppUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiverUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfigUpgradeable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpointUpgradeable.sol\\\";\\nimport \\\"../../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzAppUpgradeable is Initializable, ContextUpgradeable, ILayerZeroReceiverUpgradeable, ILayerZeroUserApplicationConfigUpgradeable {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpointUpgradeable public lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n    event PayloadSizeLimitSet(uint16 _dstChainId, uint _size);\\n\\n    function __LzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_endpoint);\\n    }\\n\\n    function __LzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {\\n        lzEndpoint = ILayerZeroEndpointUpgradeable(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function _setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes memory _config) internal virtual {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function _setSendVersion(uint16 _version) internal virtual {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function _setReceiveVersion(uint16 _version) internal virtual {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function _forceResumeReceive(uint16 _srcChainId, bytes memory _srcAddress) internal virtual {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function _setTrustedRemote(uint16 _srcChainId, bytes memory _path) internal virtual {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function _setTrustedRemoteAddress(uint16 _remoteChainId, bytes memory _remoteAddress) internal virtual {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function _setPrecrime(address _precrime) internal virtual {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function _setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) internal virtual {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function _setPayloadSizeLimit(uint16 _dstChainId, uint _size) internal virtual {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n        emit PayloadSizeLimitSet(_dstChainId, _size);\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[45] private __gap;\\n}\\n\",\"keccak256\":\"0x58cf43a6749fddd34e3367b5d1ef88172d52aedb5d515ceb841c1f7484ce3722\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"./LzAppUpgradeable.sol\\\";\\nimport \\\"../../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzAppUpgradeable is Initializable, LzAppUpgradeable {\\n    using ExcessivelySafeCall for address;\\n\\n    function __NonblockingLzAppUpgradeable_init(address _endpoint) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __LzAppUpgradeable_init_unchained(_endpoint);\\n    }\\n\\n    function __NonblockingLzAppUpgradeable_init_unchained(address _endpoint) internal onlyInitializing {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint[49] private __gap;\\n}\\n\",\"keccak256\":\"0x827e9451c39768ceb3c34fcaac9d18ab93587edb4d065e38258963e78bf9e2f4\",\"license\":\"MIT\"},\"@layerzerolabs/solidity-examples/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"@layerzerolabs/solidity-examples/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title EIP-20: ERC-20 Token Standard\\n *\\n * @notice The ERC-20 (Ethereum Request for Comments 20), proposed by Fabian Vogelsteller in November 2015,\\n *      is a Token Standard that implements an API for tokens within Smart Contracts.\\n *\\n * @notice It provides functionalities like to transfer tokens from one account to another,\\n *      to get the current token balance of an account and also the total supply of the token available on the network.\\n *      Besides these it also has some other functionalities like to approve that an amount of\\n *      token from an account can be spent by a third party account.\\n *\\n * @notice If a Smart Contract implements the following methods and events it can be called an ERC-20 Token\\n *      Contract and, once deployed, it will be responsible to keep track of the created tokens on Ethereum.\\n *\\n * @notice See https://ethereum.org/en/developers/docs/standards/tokens/erc-20/\\n * @notice See https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface ERC20 {\\n\\t/**\\n\\t * @dev Fired in transfer(), transferFrom() to indicate that token transfer happened\\n\\t *\\n\\t * @param from an address tokens were consumed from\\n\\t * @param to an address tokens were sent to\\n\\t * @param value number of tokens transferred\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Fired in approve() to indicate an approval event happened\\n\\t *\\n\\t * @param owner an address which granted a permission to transfer\\n\\t *      tokens on its behalf\\n\\t * @param spender an address which received a permission to transfer\\n\\t *      tokens on behalf of the owner `_owner`\\n\\t * @param value amount of tokens granted to transfer on behalf\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\t/**\\n\\t * @return name of the token (ex.: USD Coin)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function name() external view returns (string memory);\\n\\n\\t/**\\n\\t * @return symbol of the token (ex.: USDC)\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function symbol() external view returns (string memory);\\n\\n\\t/**\\n\\t * @dev Returns the number of decimals used to get its user representation.\\n\\t *      For example, if `decimals` equals `2`, a balance of `505` tokens should\\n\\t *      be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n\\t *\\n\\t * @dev Tokens usually opt for a value of 18, imitating the relationship between\\n\\t *      Ether and Wei. This is the value {ERC20} uses, unless this function is\\n\\t *      overridden;\\n\\t *\\n\\t * @dev NOTE: This information is only used for _display_ purposes: it in\\n\\t *      no way affects any of the arithmetic of the contract, including\\n\\t *      {IERC20-balanceOf} and {IERC20-transfer}.\\n\\t *\\n\\t * @return token decimals\\n\\t */\\n\\t// OPTIONAL - This method can be used to improve usability,\\n\\t// but interfaces and other contracts MUST NOT expect these values to be present.\\n\\t// function decimals() external view returns (uint8);\\n\\n\\t/**\\n\\t * @return the amount of tokens in existence\\n\\t */\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Gets the balance of a particular address\\n\\t *\\n\\t * @param _owner the address to query the the balance for\\n\\t * @return balance an amount of tokens owned by the address specified\\n\\t */\\n\\tfunction balanceOf(address _owner) external view returns (uint256 balance);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens to an external address or a smart contract\\n\\t *\\n\\t * @dev Called by token owner (an address which has a\\n\\t *      positive token balance tracked by this smart contract)\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * self address or\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transfer(address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n\\t *      to some other address `_to`\\n\\t *\\n\\t * @dev Called by token owner on his own or approved address,\\n\\t *      an address approved earlier by token owner to\\n\\t *      transfer some amount of tokens on its behalf\\n\\t * @dev Throws on any error like\\n\\t *      * insufficient token balance or\\n\\t *      * incorrect `_to` address:\\n\\t *          * zero address or\\n\\t *          * same as `_from` address (self transfer)\\n\\t *          * smart contract which doesn't support ERC20\\n\\t *\\n\\t * @param _from token owner which approved caller (transaction sender)\\n\\t *      to transfer `_value` of tokens on its behalf\\n\\t * @param _to an address to transfer tokens to,\\n\\t *      must be either an external address or a smart contract,\\n\\t *      compliant with the ERC20 standard\\n\\t * @param _value amount of tokens to be transferred,, zero\\n\\t *      value is allowed\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Approves address called `_spender` to transfer some amount\\n\\t *      of tokens on behalf of the owner (transaction sender)\\n\\t *\\n\\t * @dev Transaction sender must not necessarily own any tokens to grant the permission\\n\\t *\\n\\t * @param _spender an address approved by the caller (token owner)\\n\\t *      to spend some tokens on its behalf\\n\\t * @param _value an amount of tokens spender `_spender` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t * @return success true on success, throws otherwise\\n\\t */\\n\\tfunction approve(address _spender, uint256 _value) external returns (bool success);\\n\\n\\t/**\\n\\t * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\n\\t *\\n\\t * @dev A function to check an amount of tokens owner approved\\n\\t *      to transfer on its behalf by some other address called \\\"spender\\\"\\n\\t *\\n\\t * @param _owner an address which approves transferring some tokens on its behalf\\n\\t * @param _spender an address approved to transfer some tokens on behalf\\n\\t * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\n\\t *      of token owner `_owner`\\n\\t */\\n\\tfunction allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n}\\n\\n/**\\n * @title Mintable/burnable ERC20 Extension\\n *\\n * @notice Adds mint/burn functions to ERC20 interface, these functions\\n *      are usually present in ERC20 implementations, but these become\\n *      a must for the bridged tokens in L2 since the bridge on L2\\n *      needs to have a way to mint tokens deposited from L1 to L2\\n *      and to burn tokens to be withdrawn from L2 to L1\\n */\\ninterface MintableBurnableERC20 is ERC20 {\\n\\t/**\\n\\t * @dev Mints (creates) some tokens to address specified\\n\\t * @dev The value specified is treated as is without taking\\n\\t *      into account what `decimals` value is\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _value an amount of tokens to mint (create)\\n\\t */\\n\\tfunction mint(address _to, uint256 _value) external;\\n\\n\\t/**\\n\\t * @dev Burns (destroys) some tokens from the address specified\\n\\t *\\n\\t * @dev The value specified is treated as is without taking\\n\\t *      into account what `decimals` value is\\n\\t *\\n\\t * @param _from an address to burn some tokens from\\n\\t * @param _value an amount of tokens to burn (destroy)\\n\\t */\\n\\tfunction burn(address _from, uint256 _value) external;\\n}\\n\",\"keccak256\":\"0xb07fc5b34a9814eac569e73cb23d352e0547b5736e09c9e50234bc23344144e1\",\"license\":\"MIT\"},\"contracts/layer_zero/LzERC20ChildTunnelV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// use non-strict version pragma to simplify contract imports in other projects\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC20Spec.sol\\\";\\nimport \\\"./NonblockingUpgradeableLzApp.sol\\\";\\n\\n/**\\n * @title LayerZero ERC20 Child Tunnel\\n *\\n * @notice Non-Ethereum network (child chain - L2) exit of the ERC20 tunnel,\\n *      can be used for Non-Ethereum mainnet and testnet networks (ex. Polygon/Mumbai)\\n *\\n * @notice The tunnel is used to bridge specific ERC20 token between L1/L2;\\n *      we call L1 -> L2 bridging a \\\"deposit\\\", L2 -> L1 a \\\"withdrawal\\\"\\n *\\n * @notice The tunnel has two entrances and two exits:\\n *       LzERC20RootTunnel contains Root/L1 entrance and exit,\\n *       and LzERC20ChildTunnel contains Child/L2 entrance and exit\\n *\\n * @notice All exits and child entrance are always open, while root entrance\\n *      may get paused or even closed permanently\\n *\\n * @notice Deposit flow:\\n *      1. The user initiates a deposit on the L1 entrance by executing the deposit function\\n *         `LzERC20RootTunnel.deposit` or `LzERC20RootTunnel.depositTo`\\n *      2. LayerZero messaging system picks up the event emitted by the `deposit` call\\n *         and delivers it to L2 chain\\n *      3. The deposit completes on the L2 exit when LayerZero messaging system executes\\n *         the `LzERC20ChildTunnel.lzReceive` function\\n *      Note: overall, the user executes only one function and then just waits for the bridge\\n *         operation to complete\\n *\\n * @notice Withdrawal flow:\\n *      1. The user initiates a withdrawal on the L2 entrance by executing the withdraw function\\n *         `LzERC20ChildTunnel.withdraw` or `LzERC20ChildTunnel.withdrawTo`\\n *      2. LayerZero messaging system picks up the event emitted by the `withdraw` call\\n *         and delivers it to L1 chain\\n *      3. The withdrawal completes on the L1 exit when LayerZero messaging system executes\\n *         the `LzERC20RootTunnel.lzReceive` function\\n *      Note: overall, the user executes only one function and then just waits for the bridge\\n *         operation to complete\\n *\\n * @dev see https://github.com/LayerZero-Labs/LayerZero\\n * @dev see https://github.com/LayerZero-Labs/solidity-examples\\n *\\n * @author Basil Gorin\\n */\\ncontract LzERC20ChildTunnelV1 is NonblockingUpgradeableLzApp {\\n\\t/**\\n\\t * @notice Child tunnel is strictly bound to the child ERC20 token\\n\\t */\\n\\tMintableBurnableERC20 public /*immutable*/ childToken;\\n\\n\\t/**\\n\\t * @notice LayerZero specific chainId where the LzERC20RootTunnel is deployed\\n\\t *\\n\\t * @dev Incoming messages must specify this chainId in order to be accepted\\n\\t *      see https://layerzero.gitbook.io/docs/technical-reference/mainnet/supported-chain-ids\\n\\t *      see https://layerzero.gitbook.io/docs/technical-reference/testnet/testnet-addresses\\n\\t */\\n\\tuint16 public rootTunnelChainId;\\n\\n\\t/**\\n\\t * @notice The address of the deployed LzERC20RootTunnel which is bound to this LzERC20ChildTunnel\\n\\t *\\n\\t * @dev Incoming messages must specify this LzERC20RootTunnel address in order to be accepted\\n\\t */\\n\\taddress public rootTunnelAddress;\\n\\n\\t/**\\n\\t * @dev Used nonces storage. We use bitmap map (uint256 => uint256)\\n\\t *      instead of (uint256 => bool) map to save on storage\\n\\t *\\n\\t * @dev The bit corresponding to nonce `i` is located at the position `i % 256` in the slot number i / 256\\n\\t */\\n\\tmapping(uint256 => uint256) private usedNoncesBitmap;\\n\\n\\t/**\\n\\t * @notice People do mistakes and may send tokens by mistake\\n\\t *\\n\\t * @notice Rescue manager is responsible for \\\"rescuing\\\" ERC20/ERC721 tokens\\n\\t *      accidentally sent to the smart contract\\n\\t *\\n\\t * @dev Role ROLE_RESCUE_MANAGER allows withdrawing non-bridged ERC20/ERC721\\n\\t *      tokens stored on the smart contract balance via `rescueTokens` function\\n\\t */\\n\\tuint32 public constant ROLE_RESCUE_MANAGER = 0x0001_0000;\\n\\n\\t/**\\n\\t * @dev Fired in `lzReceive` when token deposit completes successfully\\n\\t *\\n\\t * @param stateId unique tx identifier submitted from the root chain (L1)\\n\\t * @param from token sender address in the root chain (L1)\\n\\t * @param to token receiver address in the child chain (L2)\\n\\t * @param value amount of tokens deposited\\n\\t */\\n\\tevent DepositComplete(uint256 indexed stateId, address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev Fired in `withdraw` and `withdrawTo`\\n\\t *\\n\\t * @param from token sender address in the child chain (L2)\\n\\t * @param to token receiver address in the root chain (L1)\\n\\t * @param value amount of tokens withdrawn\\n\\t */\\n\\tevent WithdrawalInitiated(address indexed from, address indexed to, uint256 value);\\n\\n\\t/**\\n\\t * @dev \\\"Constructor replacement\\\" for upgradeable, must be execute immediately after deployment\\n\\t *      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializers\\n\\t *\\n\\t * @dev Initializes an Non-Ethereum network (L2) exit bound to\\n\\t *      LayerZero Endpoint, and child ERC20 token\\n\\t * @dev LayerZero Endpoint is a helper contract providing\\n\\t *      L1/L2 messaging infrastructure, managed by the LayerZero\\n\\t *\\n\\t * @param _lzEndpoint LayerZero Endpoint contract address (maintained by LayerZero)\\n\\t * @param _childToken child ERC20 token address\\n\\t */\\n\\tfunction postConstruct(address _lzEndpoint, address _childToken) public initializer {\\n\\t\\t// verify the inputs are set\\n\\t\\trequire(_lzEndpoint != address(0), \\\"LZ endpoint not set\\\");\\n\\t\\trequire(_childToken != address(0), \\\"child token not set\\\");\\n\\n\\t\\t// initialize contract internal state\\n\\t\\t__NonblockingUpgradeableLzApp_init(_lzEndpoint);\\n\\t\\tchildToken = MintableBurnableERC20(_childToken);\\n\\n\\t\\t// execute all parent initializers in cascade\\n\\t\\tUpgradeableAccessControl._postConstruct(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the rootTunnel if it is not yet set\\n\\t *\\n\\t * @param _rootTunnelChainId root tunnel chain ID to set\\n\\t * @param _rootTunnelAddress root tunnel address to set\\n\\t */\\n\\tfunction setRootTunnel(uint16 _rootTunnelChainId, address _rootTunnelAddress) public {\\n\\t\\t// `setRootTunnel` must be executed during the deployment process by\\n\\t\\t// the same account which is making a deployment (full admin)\\n\\t\\trequire(isSenderInRole(type(uint256).max), \\\"access denied\\\");\\n\\n\\t\\t// verify the chain ID is set (not zero)\\n\\t\\trequire(_rootTunnelChainId != 0, \\\"zero chain ID\\\");\\n\\t\\t// verify the address is set (not zero)\\n\\t\\trequire(_rootTunnelAddress != address(0), \\\"zero address\\\");\\n\\n\\t\\t// verify the address is not yet set on the contract\\n\\t\\trequire(rootTunnelChainId == 0 && rootTunnelAddress == address(0), \\\"root tunnel already set\\\");\\n\\n\\t\\t// set the tunnel\\n\\t\\trootTunnelChainId = _rootTunnelChainId;\\n\\t\\trootTunnelAddress = _rootTunnelAddress;\\n\\n\\t\\t// propagate the setup to `LzAppUpgradeable`\\n\\t\\t_setTrustedRemote(_rootTunnelChainId, abi.encodePacked(_rootTunnelAddress, address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice L2 Tunnel Exit.\\n\\t *      L2 Tunnel is always open in both directions.\\n\\t *\\n\\t * @dev Auxiliary function which can be executed only within the smart contract itself\\n\\t *      Effectively private (internal) as it is not callable by other contracts or EOAs\\n\\t *\\n\\t * @dev Wrapped by the ILayerZeroReceiver lzReceive catching any error and logging it\\n\\t *      See `ILayerZeroReceiver.lzReceive`\\n\\t */\\n\\tfunction _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal override {\\n\\t\\t// verify the message comes from the expected network\\n\\t\\trequire(_srcChainId == rootTunnelChainId, \\\"unexpected root network\\\");\\n\\n\\t\\t// decode source/destination tunnel information\\n\\t\\t// since _srcAddress is abi.encodePacked(_rootTunnel, _childTunnel)\\n\\t\\t// this cannot be unpacked with abi.decode, but only with assembly\\n\\t\\taddress _rootTunnel;\\n\\t\\taddress _childTunnel;\\n\\t\\tassembly {\\n\\t\\t\\t// see https://ethereum.stackexchange.com/questions/143522/how-to-decode-encodepacked-data\\n\\t\\t\\t_rootTunnel := mload(add(_srcAddress, 20))\\n\\t\\t\\t_childTunnel := mload(add(_srcAddress, 40))\\n\\t\\t}\\n\\n\\t\\t// verify the message comes from the expected root tunnel\\n\\t\\trequire(_rootTunnel == rootTunnelAddress, \\\"unexpected root tunnel\\\");\\n\\t\\t// verify the message is intended for the expected child tunnel\\n\\t\\trequire(_childTunnel == address(this), \\\"unexpected child tunnel\\\");\\n\\n\\t\\t// verify same nonce is not used twice and marked nonce as used\\n\\t\\t__useNonce(_nonce);\\n\\n\\t\\t// decode the message from the root\\n\\t\\t// format: sender, recipient, amount\\n\\t\\t(address _from, address _to, uint256 _value) = abi.decode(_payload, (address, address, uint256));\\n\\n\\t\\t// mint the requested amount of tokens in the child chain\\n\\t\\tchildToken.mint(_to, _value);\\n\\n\\t\\t// emit an event\\n\\t\\temit DepositComplete(_nonce, _from, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to verify if nonce wasn't yet used and marks it as used\\n\\t *\\n\\t * @param _nonce unique nonce to verify/mark as used\\n\\t */\\n\\tfunction __useNonce(uint64 _nonce) private {\\n\\t\\t// verify the nonce is not yet used\\n\\t\\trequire(usedNoncesBitmap[_nonce / 256] & 1 << _nonce % 256 == 0, \\\"nonce already used\\\");\\n\\n\\t\\t// mark the nonce as used\\n\\t\\tusedNoncesBitmap[_nonce / 256] |= 1 << _nonce % 256;\\n\\t}\\n\\n\\t/**\\n\\t * @notice L2 Tunnel Entrance.\\n\\t *      L2 Tunnel is always open in both directions.\\n\\t *\\n\\t * @notice Initiates the withdrawal from the child chain (L2) into the root chain (L1)\\n\\t *      to the same address which initiated the withdrawal process\\n\\t *\\n\\t * @notice The process is finalized in the root chain (L1) via the\\n\\t *      `LzERC20RootTunnel.lzReceive` without the user/initiator participation\\n\\t *\\n\\t * @notice User pays for the withdrawal message delivery in native currency.\\n\\t *      The amount to be payed can be estimated with `estimateWithdrawalFee`\\n\\t *\\n\\t * @notice Specified amount of tokens is burnt from the sender,\\n\\t *      user may need to make sure this amount is approved for transfer/burning\\n\\t *\\n\\t * @param _value amount of tokens to withdraw\\n\\t */\\n\\tfunction withdraw(uint256 _value) public payable {\\n\\t\\t// delegate to `withdrawTo`\\n\\t\\twithdrawTo(msg.sender, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice L2 Tunnel Entrance.\\n\\t *      L2 Tunnel is always open in both directions.\\n\\t *\\n\\t * @notice Initiates the withdrawal from the child chain (L2) into the root chain (L1)\\n\\t *\\n\\t * @notice The process is finalized in the root chain (L1) via the\\n\\t *      `LzERC20RootTunnel.lzReceive` without the user/initiator participation\\n\\t *\\n\\t * @notice User pays for the withdrawal message delivery in native currency.\\n\\t *      The amount to be payed can be estimated with `estimateWithdrawalFee`\\n\\t *\\n\\t * @notice Specified amount of tokens is burnt from the sender,\\n\\t *      user may need to make sure this amount is approved for transfer/burning\\n\\t *\\n\\t * @param _to token recipient in the root chain (L1)\\n\\t * @param _value amount of tokens to withdraw\\n\\t */\\n\\tfunction withdrawTo(address _to, uint256 _value) public payable {\\n\\t\\t// burn the requested amount of tokens in the child chain\\n\\t\\tchildToken.burn(msg.sender, _value);\\n\\n\\t\\t// notify the L1 about the withdrawal\\n\\t\\t__withdrawalNotify(msg.sender, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Notifies the L1 about the initiated withdrawal\\n\\t *\\n\\t * @dev Unsafe: doesn't verify the executor (msg.sender) permissions,\\n\\t *      must be kept private at all times\\n\\t *\\n\\t * @param _from token sender in the child chain (in L2)\\n\\t * @param _to token recipient in the root chain (in L1)\\n\\t * @param _value amount of tokens withdrawn\\n\\t */\\n\\tfunction __withdrawalNotify(address _from, address _to, uint256 _value) private {\\n\\t\\t// send message to the root to unlock equal amount of tokens in the root chain\\n\\t\\t// format: sender, recipient, amount\\n\\t\\t__sendMessageToRoot(abi.encode(_from, _to, _value));\\n\\n\\t\\t// emit an event\\n\\t\\temit WithdrawalInitiated(_from, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Estimates the token transfer fee from L2 to L1; this should be supplied\\n\\t *      as a transaction value into withdraw/withdrawTo\\n\\t *\\n\\t * @param _from token sender in the child chain (in L2)\\n\\t * @param _to token recipient in the root chain (in L1)\\n\\t * @param _value amount of tokens withdrawn\\n\\t * @return token transfer fee in wei\\n\\t */\\n\\tfunction estimateWithdrawalFee(address _from, address _to, uint256 _value) public view returns (uint256) {\\n\\t\\t// delegate to `__estimateMessageFee`\\n\\t\\treturn __estimateMessageFee(abi.encode(_from, _to, _value));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Estimates the message transfer fee from L2 to L1; this should be supplied\\n\\t *      as a transaction value into withdraw/withdrawTo\\n\\t *\\n\\t * @param message to deliver from the child chain (L2) into the root chain (L1)\\n\\t * @return message transfer fee in wei\\n\\t */\\n\\tfunction __estimateMessageFee(bytes memory message) private view returns (uint256) {\\n\\t\\t// estimate fee based on the message input\\n\\t\\t(uint256 fee,) = lzEndpoint.estimateFees(\\n\\t\\t\\trootTunnelChainId,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tmessage,\\n\\t\\t\\tfalse, // set _payInZRO to false\\n\\t\\t\\tbytes(\\\"\\\")\\n\\t\\t);\\n\\t\\t// return the result\\n\\t\\treturn fee;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to send the token transfer message from\\n\\t *      the child chain (L2) into the root chain (L1)\\n\\t *\\n\\t * @dev Evaluates the message transfer fee and tries to supply this fee\\n\\t *      Throws if sender didn't supply enough value to cover the fee\\n\\t *      Returns any excess of the funds sent back to sender\\n\\t */\\n\\tfunction __sendMessageToRoot(bytes memory message) private {\\n\\t\\t// estimate message fee\\n\\t\\tuint256 fee = __estimateMessageFee(message);\\n\\n\\t\\t// make sure the message sending is paid\\n\\t\\trequire(msg.value >= fee, \\\"send underpriced\\\");\\n\\n\\t\\t// send the message\\n\\t\\tlzEndpoint.send{value: fee}(\\n\\t\\t\\trootTunnelChainId,\\n\\t\\t\\tabi.encodePacked(rootTunnelAddress, address(this)),\\n\\t\\t\\tmessage,\\n\\t\\t\\tpayable(msg.sender),\\n\\t\\t\\taddress(0),\\n\\t\\t\\tbytes(\\\"\\\")\\n\\t\\t);\\n\\n\\t\\t// if sender sent more than required\\n\\t\\tif(msg.value > fee) {\\n\\t\\t\\t// send the delta back to sender\\n\\t\\t\\tpayable(msg.sender).transfer(msg.value - fee);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to rescue accidentally sent tokens,\\n\\t *      the tokens are rescued via `transferFrom` function call on the\\n\\t *      contract address specified and with the parameters specified:\\n\\t *      `_contract.transferFrom(this, _to, _value)`\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_RESCUE_MANAGER` permission\\n\\t *\\n\\t * @param _contract smart contract address to execute `transfer` function on\\n\\t * @param _to to address in `transferFrom(this, _to, _value)`\\n\\t * @param _value value to transfer in `transferFrom(this, _to, _value)`;\\n\\t *      this can also be a tokenId for ERC721 transfer\\n\\t */\\n\\tfunction rescueToken(address _contract, address _to, uint256 _value) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_RESCUE_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// perform the transfer as requested, without any checks\\n\\t\\trequire(ERC20(_contract).transferFrom(address(this), _to, _value));\\n\\t}\\n}\\n\",\"keccak256\":\"0x0a5d9a517904ce2a4e97f1890e4eedbd190fdb7da4dca71619145f9f74a2f814\",\"license\":\"MIT\"},\"contracts/layer_zero/NonblockingUpgradeableLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@layerzerolabs/solidity-examples/contracts/contracts-upgradable/lzApp/NonblockingLzAppUpgradeable.sol\\\";\\nimport \\\"../utils/UpgradeableAccessControl.sol\\\";\\n\\n/**\\n * @title Nonblocking Upgradeable LayerZero App with Access Control\\n */\\nabstract contract NonblockingUpgradeableLzApp is NonblockingLzAppUpgradeable, UpgradeableAccessControl {\\n\\t/**\\n\\t * @notice LZ Config Manager is responsible for tunnel configuration, manager is\\n\\t *      allowed to access LZ Endpoint configuration functions via the tunnel\\n\\t *\\n\\t * @dev Role ROLE_LZ_CONFIG_MANAGER allows accessing LZ Endpoint configuration related\\n\\t *      functions: `setConfig`, `setSendVersion`, `setReceiveVersion`, and `forceResumeReceive`\\n\\t */\\n\\tuint32 public constant ROLE_LZ_CONFIG_MANAGER = 0x0010_0000;\\n\\n\\t/**\\n\\t * @notice Tunnel Manager is responsible for tunnel setup, manager is\\n\\t *      allowed to access tunnel setup related functions\\n\\t *\\n\\t * @dev Role ROLE_TUNNEL_MANAGER allows accessing Tunnel setup related\\n\\t *      functions: `setPrecrime`, `setMinDstGas`, and `setPayloadSizeLimit`\\n\\t */\\n\\tuint32 public constant ROLE_TUNNEL_MANAGER = 0x0020_0000;\\n\\n\\t/**\\n\\t * @dev Ensures function is executed only by ROLE_LZ_CONFIG_MANAGER\\n\\t */\\n\\tmodifier onlyLzConfigManager {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_LZ_CONFIG_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Ensures function is executed only by ROLE_TUNNEL_MANAGER\\n\\t */\\n\\tmodifier onlyTunnelManager {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_TUNNEL_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction __NonblockingUpgradeableLzApp_init(address _endpoint) internal onlyInitializing {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__LzAppUpgradeable_init_unchained(_endpoint);\\n\\t\\t__NonblockingLzAppUpgradeable_init_unchained(_endpoint);\\n\\t}\\n\\n\\tfunction __NonblockingUpgradeableLzApp_init_unchained() internal onlyInitializing {}\\n\\n\\t/**\\n\\t * @inheritdoc ILayerZeroUserApplicationConfigUpgradeable\\n\\t *\\n\\t * @notice Restricted access function to execute `setConfig` function on the LZ Endpoint\\n\\t *      set the configuration of the LayerZero messaging library of the specified version\\n\\t *\\n\\t * @dev Requires sender to have ROLE_LZ_CONFIG_MANAGER permission\\n\\t *\\n\\t * @param _version - messaging library version\\n\\t * @param _chainId - the chainId for the pending config change\\n\\t * @param _configType - type of configuration. every messaging library has its own convention.\\n\\t * @param _config - configuration in the bytes. can encode arbitrary content.\\n\\t */\\n\\tfunction setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external virtual override onlyLzConfigManager {\\n\\t\\t_setConfig(_version, _chainId, _configType, _config);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ILayerZeroUserApplicationConfigUpgradeable\\n\\t *\\n\\t * @notice Restricted access function to execute `setSendVersion` function on the LZ Endpoint\\n\\t *      set the send() LayerZero messaging library version to _version\\n\\t *\\n\\t * @dev Requires sender to have ROLE_LZ_CONFIG_MANAGER permission\\n\\t *\\n\\t * @param _version - new messaging library version\\n\\t */\\n\\tfunction setSendVersion(uint16 _version) external virtual override onlyLzConfigManager {\\n\\t\\t_setSendVersion(_version);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ILayerZeroUserApplicationConfigUpgradeable\\n\\t *\\n\\t * @notice Restricted access function to execute `setReceiveVersion` function on the LZ Endpoint\\n\\t *      set the lzReceive() LayerZero messaging library version to _version\\n\\t *\\n\\t * @dev Requires sender to have ROLE_LZ_CONFIG_MANAGER permission\\n\\t *\\n\\t * @param _version - new messaging library version\\n\\t */\\n\\tfunction setReceiveVersion(uint16 _version) external virtual override onlyLzConfigManager {\\n\\t\\t_setReceiveVersion(_version);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ILayerZeroUserApplicationConfigUpgradeable\\n\\t *\\n\\t * @notice Restricted access function to execute `forceResumeReceive` function on the LZ Endpoint\\n\\t *      Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n\\t *\\n\\t * @dev Requires sender to have ROLE_LZ_CONFIG_MANAGER permission\\n\\t *\\n\\t * @param _srcChainId - the chainId of the source chain\\n\\t * @param _srcAddress - the contract address of the source contract at the source chain\\n\\t */\\n\\tfunction forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override virtual onlyLzConfigManager {\\n\\t\\t_forceResumeReceive(_srcChainId, _srcAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @dev see LzAppUpgradeable\\n\\t */\\n\\tfunction setPrecrime(address _precrime) external virtual onlyTunnelManager {\\n\\t\\t_setPrecrime(_precrime);\\n\\t}\\n\\n\\t/**\\n\\t * @dev see LzAppUpgradeable\\n\\t */\\n\\tfunction setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external virtual onlyTunnelManager {\\n\\t\\t_setMinDstGas(_dstChainId, _packetType, _minGas);\\n\\t}\\n\\n\\t/**\\n\\t * @dev see LzAppUpgradeable\\n\\t */\\n\\tfunction setPayloadSizeLimit(uint16 _dstChainId, uint _size) external virtual onlyTunnelManager {\\n\\t\\t_setPayloadSizeLimit(_dstChainId, _size);\\n\\t}\\n\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x098d80e45781c3f12882c523a3faedfadd036de5e433e341e929efa89a4dfe0d\",\"license\":\"MIT\"},\"contracts/utils/UpgradeableAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/**\\n * @title Upgradeable Access Control List // ERC1967Proxy\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @dev This is an upgradeable version of the ACL, based on Zeppelin implementation for ERC1967,\\n *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n *      see https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786\\n *\\n * @author Basil Gorin\\n */\\nabstract contract UpgradeableAccessControl is UUPSUpgradeable {\\n\\t/**\\n\\t * @notice Privileged addresses with defined roles/permissions\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t */\\n\\tmapping(address => uint256) public userRoles;\\n\\n\\t/**\\n\\t * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n\\t *      the amount of storage used by a contract always adds up to the 50.\\n\\t *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[49] private __gap;\\n\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @notice Upgrade manager is responsible for smart contract upgrades,\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n\\t *\\n\\t * @dev Role ROLE_UPGRADE_MANAGER allows passing the _authorizeUpgrade() check\\n\\t * @dev Role ROLE_UPGRADE_MANAGER has single bit at position 254 enabled\\n\\t */\\n\\tuint256 public constant ROLE_UPGRADE_MANAGER = 0x4000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param _by operator which called the function\\n\\t * @param _to address which was granted/revoked permissions\\n\\t * @param _requested permissions requested\\n\\t * @param _actual permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\n\\n\\t/**\\n\\t * @dev UUPS initializer, sets the contract owner to have full privileges\\n\\t *\\n\\t * @dev Can be executed only in constructor during deployment,\\n\\t *      reverts when executed in already deployed contract\\n\\t *\\n\\t * @dev IMPORTANT:\\n\\t *      this function MUST be executed during proxy deployment (in proxy constructor),\\n\\t *      otherwise it renders useless and cannot be executed at all,\\n\\t *      resulting in no admin control over the proxy and no possibility to do future upgrades\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tfunction _postConstruct(address _owner) internal virtual initializer {\\n\\t\\t// ensure this function is execute only in constructor\\n\\t\\trequire(!AddressUpgradeable.isContract(address(this)), \\\"invalid context\\\");\\n\\n\\t\\t// grant owner full privileges\\n\\t\\tuserRoles[_owner] = FULL_PRIVILEGES_MASK;\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(msg.sender, _owner, FULL_PRIVILEGES_MASK, FULL_PRIVILEGES_MASK);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns an address of the implementation smart contract,\\n\\t *      see ERC1967Upgrade._getImplementation()\\n\\t *\\n\\t * @return the current implementation address\\n\\t */\\n\\tfunction getImplementation() public view virtual returns (address) {\\n\\t\\t// delegate to `ERC1967Upgrade._getImplementation()`\\n\\t\\treturn _getImplementation();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns (uint256) {\\n\\t\\t// features are stored in 'this' address  mapping of `userRoles` structure\\n\\t\\treturn userRoles[address(this)];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for or zero\\n\\t *      to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\tuserRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns (uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = userRoles[operator];\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(userRoles[operator], required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) internal pure returns (bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc UUPSUpgradeable\\n\\t */\\n\\tfunction _authorizeUpgrade(address) internal virtual override {\\n\\t\\t// caller must have a permission to upgrade the contract\\n\\t\\trequire(isSenderInRole(ROLE_UPGRADE_MANAGER), \\\"access denied\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0x8754d3fd79c55a55b019cfd71b7443f75dfb3ffab40619584bb6b58703424f1d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516136a261004560003960008181610d4f01528181610d8f01528181610f4e0152610f8e01526136a26000f3fe6080604052600436106102715760003560e01c80637533d7881161014f578063baf3292d116100c1578063d5bb7f671161007a578063d5bb7f67146107b8578063df2a5b3b146107d8578063e5711e8b146107f8578063f5ecbdbc14610818578063f822d5aa14610838578063fcc2c0781461085857600080fd5b8063baf3292d1461070e578063c0423b631461072e578063c44618341461074f578063c688d69314610765578063cbed8b9c14610785578063d1deba1f146107a557600080fd5b8063ac0007de11610113578063ac0007de14610666578063ae5b102e14610687578063ae60bda4146106a7578063ae682e2e146106bf578063b301bb0c146106d7578063b353aaa7146106ee57600080fd5b80637533d788146105945780638cfd8f5c146105c1578063950c8a74146105f95780639f38369a14610631578063aaf10f421461065157600080fd5b80633659cfe6116101e85780635b8c41e6116101ac5780635b8c41e61461049857806363bada4f146104e7578063660396711461050757806366ad5c8a14610527578063725f36261461054757806374d5e1001461056757600080fd5b80633659cfe6146103e85780633d8b38f6146104085780633f1f4fa41461043857806342d65a8d146104655780634f1ef2861461048557600080fd5b80632053e03e1161023a5780632053e03e14610329578063205c2878146103495780632834135f1461035c5780632b521416146103925780632d17f8bc146103be5780632e1a7d4d146103d557600080fd5b80621d35671461027657806307e0db17146102985780630df37483146102b857806310ddb137146102d8578063188e3db5146102f8575b600080fd5b34801561028257600080fd5b50610296610291366004612a81565b610878565b005b3480156102a457600080fd5b506102966102b3366004612b14565b610a94565b3480156102c457600080fd5b506102966102d3366004612b2f565b610ac8565b3480156102e457600080fd5b506102966102f3366004612b14565b610afe565b34801561030457600080fd5b5061030f6210000081565b60405163ffffffff90911681526020015b60405180910390f35b34801561033557600080fd5b50610296610344366004612b6e565b610b2f565b610296610357366004612ba5565b610ccb565b34801561036857600080fd5b5061015f5461037f90600160a01b900461ffff1681565b60405161ffff9091168152602001610320565b34801561039e57600080fd5b5030600090815260fb60205260409020545b604051908152602001610320565b3480156103ca57600080fd5b5061030f6201000081565b6102966103e3366004612bc3565b610d3b565b3480156103f457600080fd5b50610296610403366004612bdc565b610d45565b34801561041457600080fd5b50610428610423366004612bf9565b610e0a565b6040519015158152602001610320565b34801561044457600080fd5b506103b0610453366004612b14565b60366020526000908152604090205481565b34801561047157600080fd5b50610296610480366004612bf9565b610ed7565b610296610493366004612d0e565b610f44565b3480156104a457600080fd5b506103b06104b3366004612d5d565b6065602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156104f357600080fd5b50610296610502366004612dba565b610ff9565b34801561051357600080fd5b506103b0610522366004612dd8565b611132565b34801561053357600080fd5b50610296610542366004612a81565b61117c565b34801561055357600080fd5b50610428610562366004612bc3565b611258565b34801561057357600080fd5b506103b0610582366004612bdc565b60fb6020526000908152604090205481565b3480156105a057600080fd5b506105b46105af366004612b14565b611273565b6040516103209190612e75565b3480156105cd57600080fd5b506103b06105dc366004612e88565b603560209081526000928352604080842090915290825290205481565b34801561060557600080fd5b50603754610619906001600160a01b031681565b6040516001600160a01b039091168152602001610320565b34801561063d57600080fd5b506105b461064c366004612b14565b61130d565b34801561065d57600080fd5b5061061961141c565b34801561067257600080fd5b5061015f54610619906001600160a01b031681565b34801561069357600080fd5b506102966106a2366004612ba5565b61142b565b3480156106b357600080fd5b506103b0600160fe1b81565b3480156106cb57600080fd5b506103b0600160ff1b81565b3480156106e357600080fd5b5061030f6220000081565b3480156106fa57600080fd5b50603354610619906001600160a01b031681565b34801561071a57600080fd5b50610296610729366004612bdc565b6114de565b34801561073a57600080fd5b5061016054610619906001600160a01b031681565b34801561075b57600080fd5b506103b061271081565b34801561077157600080fd5b50610428610780366004612ba5565b61150f565b34801561079157600080fd5b506102966107a0366004612ebb565b611531565b6102966107b3366004612a81565b6115a2565b3480156107c457600080fd5b506102966107d3366004612bc3565b6117b8565b3480156107e457600080fd5b506102966107f3366004612f29565b6117c2565b34801561080457600080fd5b50610296610813366004612dd8565b6117f5565b34801561082457600080fd5b506105b4610833366004612f65565b61189f565b34801561084457600080fd5b506103b0610853366004612fb2565b611932565b34801561086457600080fd5b50610428610873366004612bc3565b61195d565b6033546001600160a01b0316336001600160a01b0316146108e05760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff8616600090815260346020526040812080546108fe90612fe7565b80601f016020809104026020016040519081016040528092919081815260200182805461092a90612fe7565b80156109775780601f1061094c57610100808354040283529160200191610977565b820191906000526020600020905b81548152906001019060200180831161095a57829003601f168201915b50505050509050805186869050148015610992575060008151115b80156109ba5750805160208201206040516109b09088908890613021565b6040518091039020145b610a155760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b60648201526084016108d7565b610a8b8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061196992505050565b50505050505050565b610aa06210000061195d565b610abc5760405162461bcd60e51b81526004016108d790613031565b610ac5816119e2565b50565b610ad46220000061195d565b610af05760405162461bcd60e51b81526004016108d790613031565b610afa8282611a40565b5050565b610b0a6210000061195d565b610b265760405162461bcd60e51b81526004016108d790613031565b610ac581611a93565b610b3a60001961195d565b610b565760405162461bcd60e51b81526004016108d790613031565b8161ffff16600003610b9a5760405162461bcd60e51b815260206004820152600d60248201526c1e995c9bc818da185a5b881251609a1b60448201526064016108d7565b6001600160a01b038116610bdf5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016108d7565b61015f54600160a01b900461ffff16158015610c055750610160546001600160a01b0316155b610c515760405162461bcd60e51b815260206004820152601760248201527f726f6f742074756e6e656c20616c72656164792073657400000000000000000060448201526064016108d7565b61015f805461ffff60a01b1916600160a01b61ffff85160217905561016080546001600160a01b0319166001600160a01b0383161790556040516bffffffffffffffffffffffff19606083811b8216602084015230901b166034820152610afa908390604801604051602081830303815290604052611ac7565b61015f54604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610d1857600080fd5b505af1158015610d2c573d6000803e3d6000fd5b50505050610afa338383611b16565b610ac53382610ccb565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d8d5760405162461bcd60e51b81526004016108d790613058565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610dbf611ba7565b6001600160a01b031614610de55760405162461bcd60e51b81526004016108d7906130a4565b610dee81611bd5565b60408051600080825260208201909252610ac591839190611bfe565b61ffff831660009081526034602052604081208054829190610e2b90612fe7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5790612fe7565b8015610ea45780601f10610e7957610100808354040283529160200191610ea4565b820191906000526020600020905b815481529060010190602001808311610e8757829003601f168201915b505050505090508383604051610ebb929190613021565b60405180910390208180519060200120149150505b9392505050565b610ee36210000061195d565b610eff5760405162461bcd60e51b81526004016108d790613031565b610f3f8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d4292505050565b505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610f8c5760405162461bcd60e51b81526004016108d790613058565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fbe611ba7565b6001600160a01b031614610fe45760405162461bcd60e51b81526004016108d7906130a4565b610fed82611bd5565b610afa82826001611bfe565b600054610100900460ff166110145760005460ff1615611018565b303b155b6110345760405162461bcd60e51b81526004016108d7906130f0565b600054610100900460ff16158015611056576000805461ffff19166101011790555b6001600160a01b0383166110a25760405162461bcd60e51b8152602060048201526013602482015272131688195b991c1bda5b9d081b9bdd081cd95d606a1b60448201526064016108d7565b6001600160a01b0382166110ee5760405162461bcd60e51b815260206004820152601360248201527218da1a5b19081d1bdad95b881b9bdd081cd95d606a1b60448201526064016108d7565b6110f783611da2565b61015f80546001600160a01b0319166001600160a01b03841617905561111c33611de3565b8015610f3f576000805461ff0019169055505050565b604080516001600160a01b0380861660208301528416918101919091526060810182905260009061117490608001604051602081830303815290604052611eef565b949350505050565b3330146111da5760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b60648201526084016108d7565b6112508686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250611f8e92505050565b505050505050565b30600090815260fb6020526040812054821682145b92915050565b6034602052600090815260409020805461128c90612fe7565b80601f01602080910402602001604051908101604052809291908181526020018280546112b890612fe7565b80156113055780601f106112da57610100808354040283529160200191611305565b820191906000526020600020905b8154815290600101906020018083116112e857829003601f168201915b505050505081565b61ffff811660009081526034602052604081208054606092919061133090612fe7565b80601f016020809104026020016040519081016040528092919081815260200182805461135c90612fe7565b80156113a95780601f1061137e576101008083540402835291602001916113a9565b820191906000526020600020905b81548152906001019060200180831161138c57829003601f168201915b5050505050905080516000036114015760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f726400000060448201526064016108d7565b610ed06000601483516114149190613154565b83919061219c565b6000611426611ba7565b905090565b611438600160ff1b61195d565b6114545760405162461bcd60e51b81526004016108d790613031565b6001600160a01b038216600090815260fb602052604090205461147990339083611932565b6001600160a01b038316600081815260fb60205260409081902083905551909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f916114d291869190918252602082015260400190565b60405180910390a35050565b6114ea6220000061195d565b6115065760405162461bcd60e51b81526004016108d790613031565b610ac5816122a9565b6001600160a01b038216600090815260fb602052604081205482168214610ed0565b61153d6210000061195d565b6115595760405162461bcd60e51b81526004016108d790613031565b61159b85858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122fd92505050565b5050505050565b61ffff861660009081526065602052604080822090516115c59088908890613021565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806116455760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b60648201526084016108d7565b808383604051611656929190613021565b6040518091039020146116b55760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b60648201526084016108d7565b61ffff871660009081526065602052604080822090516116d89089908990613021565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252611770918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250611f8e92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516117a795949392919061316b565b60405180910390a150505050505050565b610ac5308261142b565b6117ce6220000061195d565b6117ea5760405162461bcd60e51b81526004016108d790613031565b610f3f83838361236b565b6118016201000061195d565b61181d5760405162461bcd60e51b81526004016108d790613031565b6040516323b872dd60e01b81523060048201526001600160a01b038381166024830152604482018390528416906323b872dd906064016020604051808303816000875af1158015611872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189691906131bf565b610f3f57600080fd5b603354604051633d7b2f6f60e21b815261ffff808716600483015285166024820152306044820152606481018390526060916001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261192991908101906131e1565b95945050505050565b6001600160a01b0392909216600090815260fb60205260409020546000198084188216189216171690565b600061126d338361150f565b6000806119cc5a60966366ad5c8a60e01b89898989604051602401611991949392919061324e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091523092919061241d565b91509150816112505761125086868686856124a7565b6033546040516307e0db1760e01b815261ffff831660048201526001600160a01b03909116906307e0db17906024015b600060405180830381600087803b158015611a2c57600080fd5b505af115801561159b573d6000803e3d6000fd5b61ffff8216600081815260366020908152604091829020849055815192835282018390527e76eb44c97d0bddcac380ec996c23db07d6a7227dcacf15643a628ae9d9451291015b60405180910390a15050565b6033546040516310ddb13760e01b815261ffff831660048201526001600160a01b03909116906310ddb13790602401611a12565b61ffff82166000908152603460205260409020611ae482826132dd565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8282604051611a8792919061339c565b604080516001600160a01b03808616602083015284169181019190915260608101829052611b5590608001604051602081830303815290604052612544565b816001600160a01b0316836001600160a01b03167fbb2689ff876f7ef453cf8865dde5ab10349d222e2e1383c5152fbdb083f02da283604051611b9a91815260200190565b60405180910390a3505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b611be2600160fe1b61195d565b610ac55760405162461bcd60e51b81526004016108d790613031565b6000611c08611ba7565b9050611c138461269a565b600083511180611c205750815b15611c3157611c2f848461273f565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661159b57805460ff191660011781556040516001600160a01b0383166024820152611cb090869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b17905261273f565b50805460ff19168155611cc1611ba7565b6001600160a01b0316826001600160a01b031614611d395760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016108d7565b61159b85612821565b6033546040516342d65a8d60e01b81526001600160a01b03909116906342d65a8d90611d74908590859060040161339c565b600060405180830381600087803b158015611d8e57600080fd5b505af1158015611250573d6000803e3d6000fd5b600054610100900460ff16611dc95760405162461bcd60e51b81526004016108d7906133b9565b611dd1612861565b611dda8161288a565b610ac5816128d3565b600054610100900460ff16611dfe5760005460ff1615611e02565b303b155b611e1e5760405162461bcd60e51b81526004016108d7906130f0565b600054610100900460ff16158015611e40576000805461ffff19166101011790555b303b15611e815760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a590818dbdb9d195e1d608a1b60448201526064016108d7565b6001600160a01b038216600081815260fb60209081526040918290206000199081905582518181529182015233917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a38015610afa576000805461ff00191690555050565b60335461015f54604080516020810182526000808252915163040a7bb160e41b8152919384936001600160a01b03909116926340a7bb1092611f4692600160a01b900461ffff169130918991889190600401613404565b6040805180830381865afa158015611f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f869190613458565b509392505050565b61015f5461ffff858116600160a01b9092041614611fee5760405162461bcd60e51b815260206004820152601760248201527f756e657870656374656420726f6f74206e6574776f726b00000000000000000060448201526064016108d7565b60148301516028840151610160546001600160a01b0380841691161461204f5760405162461bcd60e51b81526020600482015260166024820152751d5b995e1c1958dd1959081c9bdbdd081d1d5b9b995b60521b60448201526064016108d7565b6001600160a01b03811630146120a75760405162461bcd60e51b815260206004820152601760248201527f756e6578706563746564206368696c642074756e6e656c00000000000000000060448201526064016108d7565b6120b0846128fa565b6000806000858060200190518101906120c9919061347c565b61015f546040516340c10f1960e01b81526001600160a01b0380851660048301526024820184905294975092955090935091909116906340c10f1990604401600060405180830381600087803b15801561212257600080fd5b505af1158015612136573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b0316886001600160401b03167f0c1e115e86fe3ba5f0221408e27946d65f6693b6341bb78b7b00b692b4e76fef8460405161218991815260200190565b60405180910390a4505050505050505050565b6060816121aa81601f6134bf565b10156121e95760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016108d7565b6121f382846134bf565b845110156122375760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016108d7565b60608215801561225657604051915060008252602082016040526122a0565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561228f578051835260209283019201612277565b5050858452601f01601f1916604052505b50949350505050565b603780546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b9060200160405180910390a150565b6033546040516332fb62e760e21b81526001600160a01b039091169063cbed8b9c906123339087908790879087906004016134d7565b600060405180830381600087803b15801561234d57600080fd5b505af1158015612361573d6000803e3d6000fd5b5050505050505050565b600081116123b35760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b60448201526064016108d7565b61ffff83811660008181526035602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac09060600160405180910390a1505050565b6000606060008060008661ffff166001600160401b0381111561244257612442612c4b565b6040519080825280601f01601f19166020018201604052801561246c576020820181803683370190505b50905060008087516020890160008d8df191503d92508683111561248e578692505b828152826000602083013e909890975095505050505050565b8180519060200120606560008761ffff1661ffff168152602001908152602001600020856040516124d8919061350e565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90612535908790879087908790879061352a565b60405180910390a15050505050565b600061254f82611eef565b9050803410156125945760405162461bcd60e51b815260206004820152601060248201526f1cd95b99081d5b99195c9c1c9a58d95960821b60448201526064016108d7565b60335461015f54610160546040516bffffffffffffffffffffffff19606092831b811660208301523090921b90911660348201526001600160a01b039092169163c5803100918491600160a01b90910461ffff169060480160408051601f19818403018152602083018252600080845291516001600160e01b031960e088901b16815261262a949391928a92339260040161357c565b6000604051808303818588803b15801561264357600080fd5b505af1158015612657573d6000803e3d6000fd5b505050505080341115610afa57336108fc6126728334613154565b6040518115909202916000818181858888f19350505050158015610f3f573d6000803e3d6000fd5b803b6126fe5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108d7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61279e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016108d7565b600080846001600160a01b0316846040516127b9919061350e565b600060405180830381855af49150503d80600081146127f4576040519150601f19603f3d011682016040523d82523d6000602084013e6127f9565b606091505b50915091506119298282604051806060016040528060278152602001613646602791396129d2565b61282a8161269a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166128885760405162461bcd60e51b81526004016108d7906133b9565b565b600054610100900460ff166128b15760405162461bcd60e51b81526004016108d7906133b9565b603380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16610ac55760405162461bcd60e51b81526004016108d7906133b9565b612906610100826135f9565b6001600160401b03166001901b610161600061010084612926919061361f565b6001600160401b0316815260200190815260200160002054166000146129835760405162461bcd60e51b81526020600482015260126024820152711b9bdb98d948185b1c9958591e481d5cd95960721b60448201526064016108d7565b61298f610100826135f9565b6001600160401b03166001901b6101616000610100846129af919061361f565b6001600160401b0316815260208101919091526040016000208054909117905550565b606083156129e1575081610ed0565b8251156129f15782518084602001fd5b8160405162461bcd60e51b81526004016108d79190612e75565b803561ffff81168114612a1d57600080fd5b919050565b60008083601f840112612a3457600080fd5b5081356001600160401b03811115612a4b57600080fd5b602083019150836020828501011115612a6357600080fd5b9250929050565b80356001600160401b0381168114612a1d57600080fd5b60008060008060008060808789031215612a9a57600080fd5b612aa387612a0b565b955060208701356001600160401b0380821115612abf57600080fd5b612acb8a838b01612a22565b9097509550859150612adf60408a01612a6a565b94506060890135915080821115612af557600080fd5b50612b0289828a01612a22565b979a9699509497509295939492505050565b600060208284031215612b2657600080fd5b610ed082612a0b565b60008060408385031215612b4257600080fd5b612b4b83612a0b565b946020939093013593505050565b6001600160a01b0381168114610ac557600080fd5b60008060408385031215612b8157600080fd5b612b8a83612a0b565b91506020830135612b9a81612b59565b809150509250929050565b60008060408385031215612bb857600080fd5b8235612b4b81612b59565b600060208284031215612bd557600080fd5b5035919050565b600060208284031215612bee57600080fd5b8135610ed081612b59565b600080600060408486031215612c0e57600080fd5b612c1784612a0b565b925060208401356001600160401b03811115612c3257600080fd5b612c3e86828701612a22565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c8957612c89612c4b565b604052919050565b60006001600160401b03821115612caa57612caa612c4b565b50601f01601f191660200190565b600082601f830112612cc957600080fd5b8135612cdc612cd782612c91565b612c61565b818152846020838601011115612cf157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612d2157600080fd5b8235612d2c81612b59565b915060208301356001600160401b03811115612d4757600080fd5b612d5385828601612cb8565b9150509250929050565b600080600060608486031215612d7257600080fd5b612d7b84612a0b565b925060208401356001600160401b03811115612d9657600080fd5b612da286828701612cb8565b925050612db160408501612a6a565b90509250925092565b60008060408385031215612dcd57600080fd5b8235612b8a81612b59565b600080600060608486031215612ded57600080fd5b8335612df881612b59565b92506020840135612e0881612b59565b929592945050506040919091013590565b60005b83811015612e34578181015183820152602001612e1c565b83811115612e43576000848401525b50505050565b60008151808452612e61816020860160208601612e19565b601f01601f19169290920160200192915050565b602081526000610ed06020830184612e49565b60008060408385031215612e9b57600080fd5b612ea483612a0b565b9150612eb260208401612a0b565b90509250929050565b600080600080600060808688031215612ed357600080fd5b612edc86612a0b565b9450612eea60208701612a0b565b93506040860135925060608601356001600160401b03811115612f0c57600080fd5b612f1888828901612a22565b969995985093965092949392505050565b600080600060608486031215612f3e57600080fd5b612f4784612a0b565b9250612f5560208501612a0b565b9150604084013590509250925092565b60008060008060808587031215612f7b57600080fd5b612f8485612a0b565b9350612f9260208601612a0b565b92506040850135612fa281612b59565b9396929550929360600135925050565b600080600060608486031215612fc757600080fd5b8335612fd281612b59565b95602085013595506040909401359392505050565b600181811c90821680612ffb57607f821691505b60208210810361301b57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156131665761316661313e565b500390565b61ffff8616815260806020820152836080820152838560a0830137600060a08583010152600060a0601f19601f87011683010190506001600160401b03841660408301528260608301529695505050505050565b6000602082840312156131d157600080fd5b81518015158114610ed057600080fd5b6000602082840312156131f357600080fd5b81516001600160401b0381111561320957600080fd5b8201601f8101841361321a57600080fd5b8051613228612cd782612c91565b81815285602083850101111561323d57600080fd5b611929826020830160208601612e19565b61ffff8516815260806020820152600061326b6080830186612e49565b6001600160401b0385166040840152828103606084015261328c8185612e49565b979650505050505050565b601f821115610f3f57600081815260208120601f850160051c810160208610156132be5750805b601f850160051c820191505b81811015611250578281556001016132ca565b81516001600160401b038111156132f6576132f6612c4b565b61330a816133048454612fe7565b84613297565b602080601f83116001811461333f57600084156133275750858301515b600019600386901b1c1916600185901b178555611250565b600085815260208120601f198616915b8281101561336e5788860151825594840194600190910190840161334f565b508582101561338c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61ffff831681526040602082015260006111746040830184612e49565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061343290830186612e49565b8415156060840152828103608084015261344c8185612e49565b98975050505050505050565b6000806040838503121561346b57600080fd5b505080516020909101519092909150565b60008060006060848603121561349157600080fd5b835161349c81612b59565b60208501519093506134ad81612b59565b80925050604084015190509250925092565b600082198211156134d2576134d261313e565b500190565b600061ffff8087168352808616602084015250836040830152608060608301526135046080830184612e49565b9695505050505050565b60008251613520818460208701612e19565b9190910192915050565b61ffff8616815260a06020820152600061354760a0830187612e49565b6001600160401b038616604084015282810360608401526135688186612e49565b9050828103608084015261344c8185612e49565b61ffff8716815260c06020820152600061359960c0830188612e49565b82810360408401526135ab8188612e49565b6001600160a01b0387811660608601528616608085015283810360a085015290506135d68185612e49565b9998505050505050505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b0380841680613613576136136135e3565b92169190910692915050565b60006001600160401b0380841680613639576136396135e3565b9216919091049291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122081a68856b8ed02cba4bc58f7bf4fb33d75d283e0fc5efdc184640bbd7eb4d0cf64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106102715760003560e01c80637533d7881161014f578063baf3292d116100c1578063d5bb7f671161007a578063d5bb7f67146107b8578063df2a5b3b146107d8578063e5711e8b146107f8578063f5ecbdbc14610818578063f822d5aa14610838578063fcc2c0781461085857600080fd5b8063baf3292d1461070e578063c0423b631461072e578063c44618341461074f578063c688d69314610765578063cbed8b9c14610785578063d1deba1f146107a557600080fd5b8063ac0007de11610113578063ac0007de14610666578063ae5b102e14610687578063ae60bda4146106a7578063ae682e2e146106bf578063b301bb0c146106d7578063b353aaa7146106ee57600080fd5b80637533d788146105945780638cfd8f5c146105c1578063950c8a74146105f95780639f38369a14610631578063aaf10f421461065157600080fd5b80633659cfe6116101e85780635b8c41e6116101ac5780635b8c41e61461049857806363bada4f146104e7578063660396711461050757806366ad5c8a14610527578063725f36261461054757806374d5e1001461056757600080fd5b80633659cfe6146103e85780633d8b38f6146104085780633f1f4fa41461043857806342d65a8d146104655780634f1ef2861461048557600080fd5b80632053e03e1161023a5780632053e03e14610329578063205c2878146103495780632834135f1461035c5780632b521416146103925780632d17f8bc146103be5780632e1a7d4d146103d557600080fd5b80621d35671461027657806307e0db17146102985780630df37483146102b857806310ddb137146102d8578063188e3db5146102f8575b600080fd5b34801561028257600080fd5b50610296610291366004612a81565b610878565b005b3480156102a457600080fd5b506102966102b3366004612b14565b610a94565b3480156102c457600080fd5b506102966102d3366004612b2f565b610ac8565b3480156102e457600080fd5b506102966102f3366004612b14565b610afe565b34801561030457600080fd5b5061030f6210000081565b60405163ffffffff90911681526020015b60405180910390f35b34801561033557600080fd5b50610296610344366004612b6e565b610b2f565b610296610357366004612ba5565b610ccb565b34801561036857600080fd5b5061015f5461037f90600160a01b900461ffff1681565b60405161ffff9091168152602001610320565b34801561039e57600080fd5b5030600090815260fb60205260409020545b604051908152602001610320565b3480156103ca57600080fd5b5061030f6201000081565b6102966103e3366004612bc3565b610d3b565b3480156103f457600080fd5b50610296610403366004612bdc565b610d45565b34801561041457600080fd5b50610428610423366004612bf9565b610e0a565b6040519015158152602001610320565b34801561044457600080fd5b506103b0610453366004612b14565b60366020526000908152604090205481565b34801561047157600080fd5b50610296610480366004612bf9565b610ed7565b610296610493366004612d0e565b610f44565b3480156104a457600080fd5b506103b06104b3366004612d5d565b6065602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156104f357600080fd5b50610296610502366004612dba565b610ff9565b34801561051357600080fd5b506103b0610522366004612dd8565b611132565b34801561053357600080fd5b50610296610542366004612a81565b61117c565b34801561055357600080fd5b50610428610562366004612bc3565b611258565b34801561057357600080fd5b506103b0610582366004612bdc565b60fb6020526000908152604090205481565b3480156105a057600080fd5b506105b46105af366004612b14565b611273565b6040516103209190612e75565b3480156105cd57600080fd5b506103b06105dc366004612e88565b603560209081526000928352604080842090915290825290205481565b34801561060557600080fd5b50603754610619906001600160a01b031681565b6040516001600160a01b039091168152602001610320565b34801561063d57600080fd5b506105b461064c366004612b14565b61130d565b34801561065d57600080fd5b5061061961141c565b34801561067257600080fd5b5061015f54610619906001600160a01b031681565b34801561069357600080fd5b506102966106a2366004612ba5565b61142b565b3480156106b357600080fd5b506103b0600160fe1b81565b3480156106cb57600080fd5b506103b0600160ff1b81565b3480156106e357600080fd5b5061030f6220000081565b3480156106fa57600080fd5b50603354610619906001600160a01b031681565b34801561071a57600080fd5b50610296610729366004612bdc565b6114de565b34801561073a57600080fd5b5061016054610619906001600160a01b031681565b34801561075b57600080fd5b506103b061271081565b34801561077157600080fd5b50610428610780366004612ba5565b61150f565b34801561079157600080fd5b506102966107a0366004612ebb565b611531565b6102966107b3366004612a81565b6115a2565b3480156107c457600080fd5b506102966107d3366004612bc3565b6117b8565b3480156107e457600080fd5b506102966107f3366004612f29565b6117c2565b34801561080457600080fd5b50610296610813366004612dd8565b6117f5565b34801561082457600080fd5b506105b4610833366004612f65565b61189f565b34801561084457600080fd5b506103b0610853366004612fb2565b611932565b34801561086457600080fd5b50610428610873366004612bc3565b61195d565b6033546001600160a01b0316336001600160a01b0316146108e05760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff8616600090815260346020526040812080546108fe90612fe7565b80601f016020809104026020016040519081016040528092919081815260200182805461092a90612fe7565b80156109775780601f1061094c57610100808354040283529160200191610977565b820191906000526020600020905b81548152906001019060200180831161095a57829003601f168201915b50505050509050805186869050148015610992575060008151115b80156109ba5750805160208201206040516109b09088908890613021565b6040518091039020145b610a155760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b60648201526084016108d7565b610a8b8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a93509150889088908190840183828082843760009201919091525061196992505050565b50505050505050565b610aa06210000061195d565b610abc5760405162461bcd60e51b81526004016108d790613031565b610ac5816119e2565b50565b610ad46220000061195d565b610af05760405162461bcd60e51b81526004016108d790613031565b610afa8282611a40565b5050565b610b0a6210000061195d565b610b265760405162461bcd60e51b81526004016108d790613031565b610ac581611a93565b610b3a60001961195d565b610b565760405162461bcd60e51b81526004016108d790613031565b8161ffff16600003610b9a5760405162461bcd60e51b815260206004820152600d60248201526c1e995c9bc818da185a5b881251609a1b60448201526064016108d7565b6001600160a01b038116610bdf5760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016108d7565b61015f54600160a01b900461ffff16158015610c055750610160546001600160a01b0316155b610c515760405162461bcd60e51b815260206004820152601760248201527f726f6f742074756e6e656c20616c72656164792073657400000000000000000060448201526064016108d7565b61015f805461ffff60a01b1916600160a01b61ffff85160217905561016080546001600160a01b0319166001600160a01b0383161790556040516bffffffffffffffffffffffff19606083811b8216602084015230901b166034820152610afa908390604801604051602081830303815290604052611ac7565b61015f54604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015610d1857600080fd5b505af1158015610d2c573d6000803e3d6000fd5b50505050610afa338383611b16565b610ac53382610ccb565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d8d5760405162461bcd60e51b81526004016108d790613058565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610dbf611ba7565b6001600160a01b031614610de55760405162461bcd60e51b81526004016108d7906130a4565b610dee81611bd5565b60408051600080825260208201909252610ac591839190611bfe565b61ffff831660009081526034602052604081208054829190610e2b90612fe7565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5790612fe7565b8015610ea45780601f10610e7957610100808354040283529160200191610ea4565b820191906000526020600020905b815481529060010190602001808311610e8757829003601f168201915b505050505090508383604051610ebb929190613021565b60405180910390208180519060200120149150505b9392505050565b610ee36210000061195d565b610eff5760405162461bcd60e51b81526004016108d790613031565b610f3f8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611d4292505050565b505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610f8c5760405162461bcd60e51b81526004016108d790613058565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fbe611ba7565b6001600160a01b031614610fe45760405162461bcd60e51b81526004016108d7906130a4565b610fed82611bd5565b610afa82826001611bfe565b600054610100900460ff166110145760005460ff1615611018565b303b155b6110345760405162461bcd60e51b81526004016108d7906130f0565b600054610100900460ff16158015611056576000805461ffff19166101011790555b6001600160a01b0383166110a25760405162461bcd60e51b8152602060048201526013602482015272131688195b991c1bda5b9d081b9bdd081cd95d606a1b60448201526064016108d7565b6001600160a01b0382166110ee5760405162461bcd60e51b815260206004820152601360248201527218da1a5b19081d1bdad95b881b9bdd081cd95d606a1b60448201526064016108d7565b6110f783611da2565b61015f80546001600160a01b0319166001600160a01b03841617905561111c33611de3565b8015610f3f576000805461ff0019169055505050565b604080516001600160a01b0380861660208301528416918101919091526060810182905260009061117490608001604051602081830303815290604052611eef565b949350505050565b3330146111da5760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b60648201526084016108d7565b6112508686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815289935091508790879081908401838280828437600092019190915250611f8e92505050565b505050505050565b30600090815260fb6020526040812054821682145b92915050565b6034602052600090815260409020805461128c90612fe7565b80601f01602080910402602001604051908101604052809291908181526020018280546112b890612fe7565b80156113055780601f106112da57610100808354040283529160200191611305565b820191906000526020600020905b8154815290600101906020018083116112e857829003601f168201915b505050505081565b61ffff811660009081526034602052604081208054606092919061133090612fe7565b80601f016020809104026020016040519081016040528092919081815260200182805461135c90612fe7565b80156113a95780601f1061137e576101008083540402835291602001916113a9565b820191906000526020600020905b81548152906001019060200180831161138c57829003601f168201915b5050505050905080516000036114015760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f726400000060448201526064016108d7565b610ed06000601483516114149190613154565b83919061219c565b6000611426611ba7565b905090565b611438600160ff1b61195d565b6114545760405162461bcd60e51b81526004016108d790613031565b6001600160a01b038216600090815260fb602052604090205461147990339083611932565b6001600160a01b038316600081815260fb60205260409081902083905551909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f916114d291869190918252602082015260400190565b60405180910390a35050565b6114ea6220000061195d565b6115065760405162461bcd60e51b81526004016108d790613031565b610ac5816122a9565b6001600160a01b038216600090815260fb602052604081205482168214610ed0565b61153d6210000061195d565b6115595760405162461bcd60e51b81526004016108d790613031565b61159b85858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122fd92505050565b5050505050565b61ffff861660009081526065602052604080822090516115c59088908890613021565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806116455760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b60648201526084016108d7565b808383604051611656929190613021565b6040518091039020146116b55760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b60648201526084016108d7565b61ffff871660009081526065602052604080822090516116d89089908990613021565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f88018290048202830182019052868252611770918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a935091508890889081908401838280828437600092019190915250611f8e92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516117a795949392919061316b565b60405180910390a150505050505050565b610ac5308261142b565b6117ce6220000061195d565b6117ea5760405162461bcd60e51b81526004016108d790613031565b610f3f83838361236b565b6118016201000061195d565b61181d5760405162461bcd60e51b81526004016108d790613031565b6040516323b872dd60e01b81523060048201526001600160a01b038381166024830152604482018390528416906323b872dd906064016020604051808303816000875af1158015611872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189691906131bf565b610f3f57600080fd5b603354604051633d7b2f6f60e21b815261ffff808716600483015285166024820152306044820152606481018390526060916001600160a01b03169063f5ecbdbc90608401600060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261192991908101906131e1565b95945050505050565b6001600160a01b0392909216600090815260fb60205260409020546000198084188216189216171690565b600061126d338361150f565b6000806119cc5a60966366ad5c8a60e01b89898989604051602401611991949392919061324e565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091523092919061241d565b91509150816112505761125086868686856124a7565b6033546040516307e0db1760e01b815261ffff831660048201526001600160a01b03909116906307e0db17906024015b600060405180830381600087803b158015611a2c57600080fd5b505af115801561159b573d6000803e3d6000fd5b61ffff8216600081815260366020908152604091829020849055815192835282018390527e76eb44c97d0bddcac380ec996c23db07d6a7227dcacf15643a628ae9d9451291015b60405180910390a15050565b6033546040516310ddb13760e01b815261ffff831660048201526001600160a01b03909116906310ddb13790602401611a12565b61ffff82166000908152603460205260409020611ae482826132dd565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8282604051611a8792919061339c565b604080516001600160a01b03808616602083015284169181019190915260608101829052611b5590608001604051602081830303815290604052612544565b816001600160a01b0316836001600160a01b03167fbb2689ff876f7ef453cf8865dde5ab10349d222e2e1383c5152fbdb083f02da283604051611b9a91815260200190565b60405180910390a3505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b611be2600160fe1b61195d565b610ac55760405162461bcd60e51b81526004016108d790613031565b6000611c08611ba7565b9050611c138461269a565b600083511180611c205750815b15611c3157611c2f848461273f565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661159b57805460ff191660011781556040516001600160a01b0383166024820152611cb090869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b17905261273f565b50805460ff19168155611cc1611ba7565b6001600160a01b0316826001600160a01b031614611d395760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016108d7565b61159b85612821565b6033546040516342d65a8d60e01b81526001600160a01b03909116906342d65a8d90611d74908590859060040161339c565b600060405180830381600087803b158015611d8e57600080fd5b505af1158015611250573d6000803e3d6000fd5b600054610100900460ff16611dc95760405162461bcd60e51b81526004016108d7906133b9565b611dd1612861565b611dda8161288a565b610ac5816128d3565b600054610100900460ff16611dfe5760005460ff1615611e02565b303b155b611e1e5760405162461bcd60e51b81526004016108d7906130f0565b600054610100900460ff16158015611e40576000805461ffff19166101011790555b303b15611e815760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a590818dbdb9d195e1d608a1b60448201526064016108d7565b6001600160a01b038216600081815260fb60209081526040918290206000199081905582518181529182015233917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a38015610afa576000805461ff00191690555050565b60335461015f54604080516020810182526000808252915163040a7bb160e41b8152919384936001600160a01b03909116926340a7bb1092611f4692600160a01b900461ffff169130918991889190600401613404565b6040805180830381865afa158015611f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f869190613458565b509392505050565b61015f5461ffff858116600160a01b9092041614611fee5760405162461bcd60e51b815260206004820152601760248201527f756e657870656374656420726f6f74206e6574776f726b00000000000000000060448201526064016108d7565b60148301516028840151610160546001600160a01b0380841691161461204f5760405162461bcd60e51b81526020600482015260166024820152751d5b995e1c1958dd1959081c9bdbdd081d1d5b9b995b60521b60448201526064016108d7565b6001600160a01b03811630146120a75760405162461bcd60e51b815260206004820152601760248201527f756e6578706563746564206368696c642074756e6e656c00000000000000000060448201526064016108d7565b6120b0846128fa565b6000806000858060200190518101906120c9919061347c565b61015f546040516340c10f1960e01b81526001600160a01b0380851660048301526024820184905294975092955090935091909116906340c10f1990604401600060405180830381600087803b15801561212257600080fd5b505af1158015612136573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b0316886001600160401b03167f0c1e115e86fe3ba5f0221408e27946d65f6693b6341bb78b7b00b692b4e76fef8460405161218991815260200190565b60405180910390a4505050505050505050565b6060816121aa81601f6134bf565b10156121e95760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016108d7565b6121f382846134bf565b845110156122375760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016108d7565b60608215801561225657604051915060008252602082016040526122a0565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561228f578051835260209283019201612277565b5050858452601f01601f1916604052505b50949350505050565b603780546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b9060200160405180910390a150565b6033546040516332fb62e760e21b81526001600160a01b039091169063cbed8b9c906123339087908790879087906004016134d7565b600060405180830381600087803b15801561234d57600080fd5b505af1158015612361573d6000803e3d6000fd5b5050505050505050565b600081116123b35760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b60448201526064016108d7565b61ffff83811660008181526035602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac09060600160405180910390a1505050565b6000606060008060008661ffff166001600160401b0381111561244257612442612c4b565b6040519080825280601f01601f19166020018201604052801561246c576020820181803683370190505b50905060008087516020890160008d8df191503d92508683111561248e578692505b828152826000602083013e909890975095505050505050565b8180519060200120606560008761ffff1661ffff168152602001908152602001600020856040516124d8919061350e565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90612535908790879087908790879061352a565b60405180910390a15050505050565b600061254f82611eef565b9050803410156125945760405162461bcd60e51b815260206004820152601060248201526f1cd95b99081d5b99195c9c1c9a58d95960821b60448201526064016108d7565b60335461015f54610160546040516bffffffffffffffffffffffff19606092831b811660208301523090921b90911660348201526001600160a01b039092169163c5803100918491600160a01b90910461ffff169060480160408051601f19818403018152602083018252600080845291516001600160e01b031960e088901b16815261262a949391928a92339260040161357c565b6000604051808303818588803b15801561264357600080fd5b505af1158015612657573d6000803e3d6000fd5b505050505080341115610afa57336108fc6126728334613154565b6040518115909202916000818181858888f19350505050158015610f3f573d6000803e3d6000fd5b803b6126fe5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108d7565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61279e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016108d7565b600080846001600160a01b0316846040516127b9919061350e565b600060405180830381855af49150503d80600081146127f4576040519150601f19603f3d011682016040523d82523d6000602084013e6127f9565b606091505b50915091506119298282604051806060016040528060278152602001613646602791396129d2565b61282a8161269a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166128885760405162461bcd60e51b81526004016108d7906133b9565b565b600054610100900460ff166128b15760405162461bcd60e51b81526004016108d7906133b9565b603380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff16610ac55760405162461bcd60e51b81526004016108d7906133b9565b612906610100826135f9565b6001600160401b03166001901b610161600061010084612926919061361f565b6001600160401b0316815260200190815260200160002054166000146129835760405162461bcd60e51b81526020600482015260126024820152711b9bdb98d948185b1c9958591e481d5cd95960721b60448201526064016108d7565b61298f610100826135f9565b6001600160401b03166001901b6101616000610100846129af919061361f565b6001600160401b0316815260208101919091526040016000208054909117905550565b606083156129e1575081610ed0565b8251156129f15782518084602001fd5b8160405162461bcd60e51b81526004016108d79190612e75565b803561ffff81168114612a1d57600080fd5b919050565b60008083601f840112612a3457600080fd5b5081356001600160401b03811115612a4b57600080fd5b602083019150836020828501011115612a6357600080fd5b9250929050565b80356001600160401b0381168114612a1d57600080fd5b60008060008060008060808789031215612a9a57600080fd5b612aa387612a0b565b955060208701356001600160401b0380821115612abf57600080fd5b612acb8a838b01612a22565b9097509550859150612adf60408a01612a6a565b94506060890135915080821115612af557600080fd5b50612b0289828a01612a22565b979a9699509497509295939492505050565b600060208284031215612b2657600080fd5b610ed082612a0b565b60008060408385031215612b4257600080fd5b612b4b83612a0b565b946020939093013593505050565b6001600160a01b0381168114610ac557600080fd5b60008060408385031215612b8157600080fd5b612b8a83612a0b565b91506020830135612b9a81612b59565b809150509250929050565b60008060408385031215612bb857600080fd5b8235612b4b81612b59565b600060208284031215612bd557600080fd5b5035919050565b600060208284031215612bee57600080fd5b8135610ed081612b59565b600080600060408486031215612c0e57600080fd5b612c1784612a0b565b925060208401356001600160401b03811115612c3257600080fd5b612c3e86828701612a22565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612c8957612c89612c4b565b604052919050565b60006001600160401b03821115612caa57612caa612c4b565b50601f01601f191660200190565b600082601f830112612cc957600080fd5b8135612cdc612cd782612c91565b612c61565b818152846020838601011115612cf157600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612d2157600080fd5b8235612d2c81612b59565b915060208301356001600160401b03811115612d4757600080fd5b612d5385828601612cb8565b9150509250929050565b600080600060608486031215612d7257600080fd5b612d7b84612a0b565b925060208401356001600160401b03811115612d9657600080fd5b612da286828701612cb8565b925050612db160408501612a6a565b90509250925092565b60008060408385031215612dcd57600080fd5b8235612b8a81612b59565b600080600060608486031215612ded57600080fd5b8335612df881612b59565b92506020840135612e0881612b59565b929592945050506040919091013590565b60005b83811015612e34578181015183820152602001612e1c565b83811115612e43576000848401525b50505050565b60008151808452612e61816020860160208601612e19565b601f01601f19169290920160200192915050565b602081526000610ed06020830184612e49565b60008060408385031215612e9b57600080fd5b612ea483612a0b565b9150612eb260208401612a0b565b90509250929050565b600080600080600060808688031215612ed357600080fd5b612edc86612a0b565b9450612eea60208701612a0b565b93506040860135925060608601356001600160401b03811115612f0c57600080fd5b612f1888828901612a22565b969995985093965092949392505050565b600080600060608486031215612f3e57600080fd5b612f4784612a0b565b9250612f5560208501612a0b565b9150604084013590509250925092565b60008060008060808587031215612f7b57600080fd5b612f8485612a0b565b9350612f9260208601612a0b565b92506040850135612fa281612b59565b9396929550929360600135925050565b600080600060608486031215612fc757600080fd5b8335612fd281612b59565b95602085013595506040909401359392505050565b600181811c90821680612ffb57607f821691505b60208210810361301b57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156131665761316661313e565b500390565b61ffff8616815260806020820152836080820152838560a0830137600060a08583010152600060a0601f19601f87011683010190506001600160401b03841660408301528260608301529695505050505050565b6000602082840312156131d157600080fd5b81518015158114610ed057600080fd5b6000602082840312156131f357600080fd5b81516001600160401b0381111561320957600080fd5b8201601f8101841361321a57600080fd5b8051613228612cd782612c91565b81815285602083850101111561323d57600080fd5b611929826020830160208601612e19565b61ffff8516815260806020820152600061326b6080830186612e49565b6001600160401b0385166040840152828103606084015261328c8185612e49565b979650505050505050565b601f821115610f3f57600081815260208120601f850160051c810160208610156132be5750805b601f850160051c820191505b81811015611250578281556001016132ca565b81516001600160401b038111156132f6576132f6612c4b565b61330a816133048454612fe7565b84613297565b602080601f83116001811461333f57600084156133275750858301515b600019600386901b1c1916600185901b178555611250565b600085815260208120601f198616915b8281101561336e5788860151825594840194600190910190840161334f565b508582101561338c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61ffff831681526040602082015260006111746040830184612e49565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b61ffff861681526001600160a01b038516602082015260a06040820181905260009061343290830186612e49565b8415156060840152828103608084015261344c8185612e49565b98975050505050505050565b6000806040838503121561346b57600080fd5b505080516020909101519092909150565b60008060006060848603121561349157600080fd5b835161349c81612b59565b60208501519093506134ad81612b59565b80925050604084015190509250925092565b600082198211156134d2576134d261313e565b500190565b600061ffff8087168352808616602084015250836040830152608060608301526135046080830184612e49565b9695505050505050565b60008251613520818460208701612e19565b9190910192915050565b61ffff8616815260a06020820152600061354760a0830187612e49565b6001600160401b038616604084015282810360608401526135688186612e49565b9050828103608084015261344c8185612e49565b61ffff8716815260c06020820152600061359960c0830188612e49565b82810360408401526135ab8188612e49565b6001600160a01b0387811660608601528616608085015283810360a085015290506135d68185612e49565b9998505050505050505050565b634e487b7160e01b600052601260045260246000fd5b60006001600160401b0380841680613613576136136135e3565b92169190910692915050565b60006001600160401b0380841680613639576136396135e3565b9216919091049291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122081a68856b8ed02cba4bc58f7bf4fb33d75d283e0fc5efdc184640bbd7eb4d0cf64736f6c634300080f0033",
  "devdoc": {
    "author": "Basil Gorin",
    "details": "see https://github.com/LayerZero-Labs/LayerZerosee https://github.com/LayerZero-Labs/solidity-examples",
    "events": {
      "DepositComplete(uint256,address,address,uint256)": {
        "details": "Fired in `lzReceive` when token deposit completes successfully",
        "params": {
          "from": "token sender address in the root chain (L1)",
          "stateId": "unique tx identifier submitted from the root chain (L1)",
          "to": "token receiver address in the child chain (L2)",
          "value": "amount of tokens deposited"
        }
      },
      "WithdrawalInitiated(address,address,uint256)": {
        "details": "Fired in `withdraw` and `withdrawTo`",
        "params": {
          "from": "token sender address in the child chain (L2)",
          "to": "token receiver address in the root chain (L1)",
          "value": "amount of tokens withdrawn"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "estimateWithdrawalFee(address,address,uint256)": {
        "params": {
          "_from": "token sender in the child chain (in L2)",
          "_to": "token recipient in the root chain (in L1)",
          "_value": "amount of tokens withdrawn"
        },
        "returns": {
          "_0": "token transfer fee in wei"
        }
      },
      "evaluateBy(address,uint256,uint256)": {
        "details": "Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011",
        "params": {
          "desired": "desired set of permissions operator would like to set",
          "operator": "address of the contract operator which is about to set the permissions",
          "target": "input set of permissions to operator is going to modify"
        },
        "returns": {
          "_0": "resulting set of permissions given operator will set"
        }
      },
      "features()": {
        "details": "Effectively reads userRoles role for the contract itself",
        "returns": {
          "_0": "256-bit bitmask of the features enabled"
        }
      },
      "forceResumeReceive(uint16,bytes)": {
        "details": "Requires sender to have ROLE_LZ_CONFIG_MANAGER permission",
        "params": {
          "_srcAddress": "- the contract address of the source contract at the source chain",
          "_srcChainId": "- the chainId of the source chain"
        }
      },
      "getImplementation()": {
        "returns": {
          "_0": "the current implementation address"
        }
      },
      "isFeatureEnabled(uint256)": {
        "params": {
          "required": "set of features to check against"
        },
        "returns": {
          "_0": "true if all the features requested are enabled, false otherwise"
        }
      },
      "isOperatorInRole(address,uint256)": {
        "params": {
          "operator": "address of the user to check role for",
          "required": "set of permissions (role) to check"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isSenderInRole(uint256)": {
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "postConstruct(address,address)": {
        "details": "\"Constructor replacement\" for upgradeable, must be execute immediately after deployment      see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializersInitializes an Non-Ethereum network (L2) exit bound to      LayerZero Endpoint, and child ERC20 tokenLayerZero Endpoint is a helper contract providing      L1/L2 messaging infrastructure, managed by the LayerZero",
        "params": {
          "_childToken": "child ERC20 token address",
          "_lzEndpoint": "LayerZero Endpoint contract address (maintained by LayerZero)"
        }
      },
      "rescueToken(address,address,uint256)": {
        "details": "Restricted access function to rescue accidentally sent tokens,      the tokens are rescued via `transferFrom` function call on the      contract address specified and with the parameters specified:      `_contract.transferFrom(this, _to, _value)`Requires executor to have `ROLE_RESCUE_MANAGER` permission",
        "params": {
          "_contract": "smart contract address to execute `transfer` function on",
          "_to": "to address in `transferFrom(this, _to, _value)`",
          "_value": "value to transfer in `transferFrom(this, _to, _value)`;      this can also be a tokenId for ERC721 transfer"
        }
      },
      "setConfig(uint16,uint16,uint256,bytes)": {
        "details": "Requires sender to have ROLE_LZ_CONFIG_MANAGER permission",
        "params": {
          "_chainId": "- the chainId for the pending config change",
          "_config": "- configuration in the bytes. can encode arbitrary content.",
          "_configType": "- type of configuration. every messaging library has its own convention.",
          "_version": "- messaging library version"
        }
      },
      "setMinDstGas(uint16,uint16,uint256)": {
        "details": "see LzAppUpgradeable"
      },
      "setPayloadSizeLimit(uint16,uint256)": {
        "details": "see LzAppUpgradeable"
      },
      "setPrecrime(address)": {
        "details": "see LzAppUpgradeable"
      },
      "setReceiveVersion(uint16)": {
        "details": "Requires sender to have ROLE_LZ_CONFIG_MANAGER permission",
        "params": {
          "_version": "- new messaging library version"
        }
      },
      "setRootTunnel(uint16,address)": {
        "details": "Sets the rootTunnel if it is not yet set",
        "params": {
          "_rootTunnelAddress": "root tunnel address to set",
          "_rootTunnelChainId": "root tunnel chain ID to set"
        }
      },
      "setSendVersion(uint16)": {
        "details": "Requires sender to have ROLE_LZ_CONFIG_MANAGER permission",
        "params": {
          "_version": "- new messaging library version"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "operator": "address of a user to alter permissions for or zero      to alter global features of the smart contract",
          "role": "bitmask representing a set of permissions to      enable/disable for a user specified"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256)": {
        "params": {
          "_value": "amount of tokens to withdraw"
        }
      },
      "withdrawTo(address,uint256)": {
        "params": {
          "_to": "token recipient in the root chain (L1)",
          "_value": "amount of tokens to withdraw"
        }
      }
    },
    "stateVariables": {
      "ROLE_RESCUE_MANAGER": {
        "details": "Role ROLE_RESCUE_MANAGER allows withdrawing non-bridged ERC20/ERC721      tokens stored on the smart contract balance via `rescueTokens` function"
      },
      "rootTunnelAddress": {
        "details": "Incoming messages must specify this LzERC20RootTunnel address in order to be accepted"
      },
      "rootTunnelChainId": {
        "details": "Incoming messages must specify this chainId in order to be accepted      see https://layerzero.gitbook.io/docs/technical-reference/mainnet/supported-chain-ids      see https://layerzero.gitbook.io/docs/technical-reference/testnet/testnet-addresses"
      },
      "usedNoncesBitmap": {
        "details": "Used nonces storage. We use bitmap map (uint256 => uint256)      instead of (uint256 => bool) map to save on storageThe bit corresponding to nonce `i` is located at the position `i % 256` in the slot number i / 256"
      }
    },
    "title": "LayerZero ERC20 Child Tunnel",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ROLE_ACCESS_MANAGER()": {
        "notice": "Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features"
      },
      "ROLE_LZ_CONFIG_MANAGER()": {
        "notice": "LZ Config Manager is responsible for tunnel configuration, manager is      allowed to access LZ Endpoint configuration functions via the tunnel"
      },
      "ROLE_RESCUE_MANAGER()": {
        "notice": "People do mistakes and may send tokens by mistakeRescue manager is responsible for \"rescuing\" ERC20/ERC721 tokens      accidentally sent to the smart contract"
      },
      "ROLE_TUNNEL_MANAGER()": {
        "notice": "Tunnel Manager is responsible for tunnel setup, manager is      allowed to access tunnel setup related functions"
      },
      "ROLE_UPGRADE_MANAGER()": {
        "notice": "Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable"
      },
      "childToken()": {
        "notice": "Child tunnel is strictly bound to the child ERC20 token"
      },
      "estimateWithdrawalFee(address,address,uint256)": {
        "notice": "Estimates the token transfer fee from L2 to L1; this should be supplied      as a transaction value into withdraw/withdrawTo"
      },
      "evaluateBy(address,uint256,uint256)": {
        "notice": "Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions"
      },
      "features()": {
        "notice": "Retrieves globally set of features enabled"
      },
      "forceResumeReceive(uint16,bytes)": {
        "notice": "Restricted access function to execute `forceResumeReceive` function on the LZ Endpoint      Only when the UA needs to resume the message flow in blocking mode and clear the stored payload"
      },
      "getImplementation()": {
        "notice": "Returns an address of the implementation smart contract,      see ERC1967Upgrade._getImplementation()"
      },
      "isFeatureEnabled(uint256)": {
        "notice": "Checks if requested set of features is enabled globally on the contract"
      },
      "isOperatorInRole(address,uint256)": {
        "notice": "Checks if operator has all the permissions (role) required"
      },
      "isSenderInRole(uint256)": {
        "notice": "Checks if transaction sender `msg.sender` has all the permissions required"
      },
      "rootTunnelAddress()": {
        "notice": "The address of the deployed LzERC20RootTunnel which is bound to this LzERC20ChildTunnel"
      },
      "rootTunnelChainId()": {
        "notice": "LayerZero specific chainId where the LzERC20RootTunnel is deployed"
      },
      "setConfig(uint16,uint16,uint256,bytes)": {
        "notice": "Restricted access function to execute `setConfig` function on the LZ Endpoint      set the configuration of the LayerZero messaging library of the specified version"
      },
      "setReceiveVersion(uint16)": {
        "notice": "Restricted access function to execute `setReceiveVersion` function on the LZ Endpoint      set the lzReceive() LayerZero messaging library version to _version"
      },
      "setSendVersion(uint16)": {
        "notice": "Restricted access function to execute `setSendVersion` function on the LZ Endpoint      set the send() LayerZero messaging library version to _version"
      },
      "updateFeatures(uint256)": {
        "notice": "Updates set of the globally enabled features (`features`),      taking into account sender's permissions"
      },
      "updateRole(address,uint256)": {
        "notice": "Updates set of permissions (role) for a given user,      taking into account sender's permissions."
      },
      "userRoles(address)": {
        "notice": "Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on"
      },
      "withdraw(uint256)": {
        "notice": "L2 Tunnel Entrance.      L2 Tunnel is always open in both directions.Initiates the withdrawal from the child chain (L2) into the root chain (L1)      to the same address which initiated the withdrawal processThe process is finalized in the root chain (L1) via the      `LzERC20RootTunnel.lzReceive` without the user/initiator participationUser pays for the withdrawal message delivery in native currency.      The amount to be payed can be estimated with `estimateWithdrawalFee`Specified amount of tokens is burnt from the sender,      user may need to make sure this amount is approved for transfer/burning"
      },
      "withdrawTo(address,uint256)": {
        "notice": "L2 Tunnel Entrance.      L2 Tunnel is always open in both directions.Initiates the withdrawal from the child chain (L2) into the root chain (L1)The process is finalized in the root chain (L1) via the      `LzERC20RootTunnel.lzReceive` without the user/initiator participationUser pays for the withdrawal message delivery in native currency.      The amount to be payed can be estimated with `estimateWithdrawalFee`Specified amount of tokens is burnt from the sender,      user may need to make sure this amount is approved for transfer/burning"
      }
    },
    "notice": "Non-Ethereum network (child chain - L2) exit of the ERC20 tunnel,      can be used for Non-Ethereum mainnet and testnet networks (ex. Polygon/Mumbai)The tunnel is used to bridge specific ERC20 token between L1/L2;      we call L1 -> L2 bridging a \"deposit\", L2 -> L1 a \"withdrawal\"The tunnel has two entrances and two exits:       LzERC20RootTunnel contains Root/L1 entrance and exit,       and LzERC20ChildTunnel contains Child/L2 entrance and exitAll exits and child entrance are always open, while root entrance      may get paused or even closed permanentlyDeposit flow:      1. The user initiates a deposit on the L1 entrance by executing the deposit function         `LzERC20RootTunnel.deposit` or `LzERC20RootTunnel.depositTo`      2. LayerZero messaging system picks up the event emitted by the `deposit` call         and delivers it to L2 chain      3. The deposit completes on the L2 exit when LayerZero messaging system executes         the `LzERC20ChildTunnel.lzReceive` function      Note: overall, the user executes only one function and then just waits for the bridge         operation to completeWithdrawal flow:      1. The user initiates a withdrawal on the L2 entrance by executing the withdraw function         `LzERC20ChildTunnel.withdraw` or `LzERC20ChildTunnel.withdrawTo`      2. LayerZero messaging system picks up the event emitted by the `withdraw` call         and delivers it to L1 chain      3. The withdrawal completes on the L1 exit when LayerZero messaging system executes         the `LzERC20RootTunnel.lzReceive` function      Note: overall, the user executes only one function and then just waits for the bridge         operation to complete",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2096,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2099,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2562,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 451,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "lzEndpoint",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ILayerZeroEndpointUpgradeable)382"
      },
      {
        "astId": 455,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 461,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 465,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "payloadSizeLimitLookup",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 467,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "precrime",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 988,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1031,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "failedMessages",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 1250,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2078,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2273,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28025,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "userRoles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28030,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8156,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6939,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "childToken",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(MintableBurnableERC20)6497"
      },
      {
        "astId": 6942,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "rootTunnelChainId",
        "offset": 20,
        "slot": "351",
        "type": "t_uint16"
      },
      {
        "astId": 6945,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "rootTunnelAddress",
        "offset": 0,
        "slot": "352",
        "type": "t_address"
      },
      {
        "astId": 6950,
        "contract": "contracts/layer_zero/LzERC20ChildTunnelV1.sol:LzERC20ChildTunnelV1",
        "label": "usedNoncesBitmap",
        "offset": 0,
        "slot": "353",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpointUpgradeable)382": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpointUpgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(MintableBurnableERC20)6497": {
        "encoding": "inplace",
        "label": "contract MintableBurnableERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}