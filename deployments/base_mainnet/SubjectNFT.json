{
  "address": "0x87a841FEd39A6B8A257aD1dF1dC50B7A2Cb3d234",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_oldVal",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_newVal",
          "type": "string"
        }
      ],
      "name": "BaseURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldVal",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newVal",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assigned",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_percentage",
          "type": "uint16"
        }
      ],
      "name": "RoyaltyInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_oldVal",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_newVal",
          "type": "string"
        }
      ],
      "name": "TokenURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_SIZE_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_BURNS_ON_BEHALF",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_OPERATOR_PERMITS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_OWN_BURNS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_PERMITS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_TRANSFERS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_TRANSFERS_ON_BEHALF",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_FOR_ALL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_OWNER_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ROYALTY_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_TOKEN_CREATOR",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_TOKEN_DESTROYER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_URI_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_UID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getRole",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_exp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permitNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyPercentage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "safeMintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeMintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_royaltyPercentage",
          "type": "uint16"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07fc39b45e3998093d8c7f0dc1089677d613792f2e0ab1de984a1bf991130db3",
  "receipt": {
    "to": null,
    "from": "0xc2B38b25d0c74B6b33ce6428BD8667F44cbe0Bf1",
    "contractAddress": "0x87a841FEd39A6B8A257aD1dF1dC50B7A2Cb3d234",
    "transactionIndex": 6,
    "gasUsed": "3364991",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000100000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000004000000000000000000000040000000000000040000000000000000000000000000000000000008000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x508b0e7c28cd03212cefe255a689598c087c1f2abf73f2a425e94cbf81eae550",
    "transactionHash": "0x07fc39b45e3998093d8c7f0dc1089677d613792f2e0ab1de984a1bf991130db3",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 9310755,
        "transactionHash": "0x07fc39b45e3998093d8c7f0dc1089677d613792f2e0ab1de984a1bf991130db3",
        "address": "0x87a841FEd39A6B8A257aD1dF1dC50B7A2Cb3d234",
        "topics": [
          "0xe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4",
          "0x000000000000000000000000c2b38b25d0c74b6b33ce6428bd8667f44cbe0bf1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 27,
        "blockHash": "0x508b0e7c28cd03212cefe255a689598c087c1f2abf73f2a425e94cbf81eae550"
      }
    ],
    "blockNumber": 9310755,
    "cumulativeGasUsed": "4621330",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Decentralized Pre-Trained Transformer",
    "DPT"
  ],
  "numDeployments": 1,
  "solcInputHash": "857a0e1617e77d62922832e5c05de455",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_oldVal\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newVal\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldVal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newVal\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assigned\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_percentage\",\"type\":\"uint16\"}],\"name\":\"RoyaltyInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_oldVal\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newVal\",\"type\":\"string\"}],\"name\":\"TokenURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_SIZE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_BURNS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_OPERATOR_PERMITS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_OWN_BURNS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_PERMITS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_FOR_ALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_OWNER_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ROYALTY_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_CREATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_DESTROYER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_URI_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_UID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permitNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyPercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_royaltyPercentage\",\"type\":\"uint16\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Whitelabel NFT is a Tiny ERC721, it supports minting and burning,      its token ID space is limited to 32 bitsWhitelabel NFT supports EIP-2981 royalties on NFT secondary sales,      and OpenSea royalties\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.\",\"params\":{\"_approved\":\"The new approved NFT controller\",\"_tokenId\":\"The NFT to approve\"}},\"balanceOf(address)\":{\"details\":\"NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.\",\"params\":{\"_owner\":\"An address for whom to query the balance\"},\"returns\":{\"_0\":\"The number of NFTs owned by `_owner`, possibly zero\"}},\"burn(uint256)\":{\"details\":\"Destroys the token with token ID specifiedRequires executor to have `ROLE_TOKEN_DESTROYER` permission      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabledCan be disabled by the contract creator forever by disabling      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking      its own roles to burn tokens and to enable burning features\",\"params\":{\"_tokenId\":\"ID of the token to burn\"}},\"constructor\":{\"details\":\"Constructs/deploys Whitelabel NFT instance      with the name and symbol defined during the deployment\"},\"exists(uint256)\":{\"details\":\"Returns whether the specified token ID has an ownership      information associated with it\",\"params\":{\"_tokenId\":\"ID of the token to query existence for\"},\"returns\":{\"_0\":\"whether the token exists (true - exists, false - doesn't exist)\"}},\"features()\":{\"details\":\"Effectively reads userRoles role for the contract itself\",\"returns\":{\"_0\":\"256-bit bitmask of the features enabled\"}},\"getApproved(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT.\",\"params\":{\"_tokenId\":\"The NFT to find the approved address for\"},\"returns\":{\"_0\":\"The approved address for this NFT, or the zero address if there is none\"}},\"getRole(address)\":{\"details\":\"Having a simple getter instead of making the mapping public      allows enforcing the encapsulation of the mapping and protects from      writing to it directly in the inheriting smart contracts\",\"params\":{\"operator\":\"address of a user to read permissions for,      or self address to read global features of the smart contract\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"The address that acts on behalf of the owner\",\"_owner\":\"The address that owns the NFTs\"},\"returns\":{\"_0\":\"True if `_operator` is an approved operator for `_owner`, false otherwise\"}},\"isFeatureEnabled(uint256)\":{\"params\":{\"required\":\"set of features to check against\"},\"returns\":{\"_0\":\"true if all the features requested are enabled, false otherwise\"}},\"isOperatorInRole(address,uint256)\":{\"params\":{\"operator\":\"address of the user to check role for\",\"required\":\"set of permissions (role) to check\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isOwner(address)\":{\"returns\":{\"_0\":\"true if the caller is the current owner.\"}},\"isSenderInRole(uint256)\":{\"details\":\"Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.\",\"params\":{\"required\":\"set of permissions (role) to check against\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isTransferable(uint256)\":{\"details\":\"Verifies if token is transferable (i.e. can change ownership, allowed to be transferred);      The default behaviour is to always allow transfer if token existsImplementations may modify the default behaviour based on token metadata      if required\",\"params\":{\"_tokenId\":\"ID of the token to check if it's transferable\"},\"returns\":{\"_0\":\"true if token is transferable, false otherwise\"}},\"mint(address,uint256)\":{\"details\":\"Creates new token with token ID specified      and assigns an ownership `_to` for this tokenUnsafe: doesn't execute `onERC721Received` on the receiver.      Prefer the use of `saveMint` instead of `mint`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\"}},\"mintBatch(address,uint256,uint256)\":{\"details\":\"Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Unsafe: doesn't execute `onERC721Received` on the receiver.      Prefer the use of `saveMintBatch` instead of `mintBatch`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_to\":\"an address to mint tokens to\",\"_tokenId\":\"ID of the first token to mint\",\"n\":\"how many tokens to mint, sequentially increasing the _tokenId\"}},\"ownerOf(uint256)\":{\"details\":\"NFTs assigned to zero address are considered invalid, and queries  about them do throw.\",\"params\":{\"_tokenId\":\"The identifier for an NFT\"},\"returns\":{\"_0\":\"The address of the owner of the NFT\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Executes approve(_operator, _tokenId) on behalf of the token owner      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_tokenId` as the allowance of `_operator` over `_owner` token,      given `_owner` EIP-712 signed approvalEmits `Approval` event in the same way as `approve` doesRequires:     - `_operator` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `permitNonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification\",\"params\":{\"_exp\":\"signature expiration time (unix timestamp)\",\"_operator\":\"new approved NFT controller\",\"_owner\":\"owner of the token to set approval on behalf of,      an address which signed the EIP-712 message\",\"_tokenId\":\"token ID to approve\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Executes setApprovalForAll(_operator, _approved) on behalf of the owner      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_operator` as the token operator for `_owner` tokens,      given `_owner` EIP-712 signed approvalEmits `ApprovalForAll` event in the same way as `setApprovalForAll` doesRequires:     - `_operator` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `permitNonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification\",\"params\":{\"_approved\":\"true if the operator is approved, false to revoke approval\",\"_exp\":\"signature expiration time (unix timestamp)\",\"_operator\":\"an address to add to the set of authorized operators, i.e.      an address approved by the token owner to spend tokens on its behalf\",\"_owner\":\"owner of the tokens to set approval on behalf of,      an address which signed the EIP-712 message\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"_salePrice\":\"- the sale price of the NFT asset specified by _tokenId\",\"_tokenId\":\"- the NFT asset queried for royalty information\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for _salePrice\"}},\"safeMint(address,uint256)\":{\"details\":\"Creates new token with token ID specified      and assigns an ownership `_to` for this tokenChecks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\"}},\"safeMint(address,uint256,bytes)\":{\"details\":\"Creates new token with token ID specified      and assigns an ownership `_to` for this tokenChecks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_data\":\"additional data with no specified format, sent in call to `_to`\",\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\"}},\"safeMintBatch(address,uint256,uint256)\":{\"details\":\"Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Checks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\",\"n\":\"how many tokens to mint, sequentially increasing the _tokenId\"}},\"safeMintBatch(address,uint256,uint256,bytes)\":{\"details\":\"Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Checks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_data\":\"additional data with no specified format, sent in call to `_to`\",\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\",\"n\":\"how many tokens to mint, sequentially increasing the _tokenId\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"This works identically to the other function with an extra data parameter,  except this function just sets data to \\\"\\\".\",\"params\":{\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.\",\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}},\"setBaseURI(string)\":{\"details\":\"Restricted access function which updates base URI used to construct      ERC721Metadata.tokenURIRequires executor to have ROLE_URI_MANAGER permission\",\"params\":{\"_baseURI\":\"new base URI to set\"}},\"setContractURI(string)\":{\"details\":\"Restricted access function which updates the contract URIRequires executor to have ROLE_URI_MANAGER permission\",\"params\":{\"_contractURI\":\"new contract URI to set\"}},\"setRoyaltyInfo(address,uint16)\":{\"details\":\"Restricted access function which updates the royalty infoRequires executor to have ROLE_ROYALTY_MANAGER permission\",\"params\":{\"_royaltyPercentage\":\"new royalty percentage to set\",\"_royaltyReceiver\":\"new royalty receiver to set\"}},\"setTokenURI(uint256,string)\":{\"details\":\"Sets the token URI for the token defined by its ID\",\"params\":{\"_tokenId\":\"an ID of the token to set URI for\",\"_tokenURI\":\"token URI to set\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"tokenByIndex(uint256)\":{\"details\":\"Throws if `_index` >= `totalSupply()`.\",\"params\":{\"_index\":\"A counter less than `totalSupply()`\"},\"returns\":{\"_0\":\"The token identifier for the `_index`th NFT,  (sort order not specified)\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Throws if `_index` >= `balanceOf(_owner)` or if  `_owner` is the zero address, representing invalid NFTs.\",\"params\":{\"_index\":\"A counter less than `balanceOf(_owner)`\",\"_owner\":\"An address where we are interested in NFTs owned by them\"},\"returns\":{\"_0\":\"The token identifier for the `_index`th NFT assigned to `_owner`,   (sort order not specified)\"}},\"tokenURI(uint256)\":{\"details\":\"Returns token URI if it was previously set with `setTokenURI`,      otherwise constructs it as base URI + token ID\"},\"totalSupply()\":{\"returns\":{\"_0\":\"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.\",\"params\":{\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}},\"transferOwnership(address)\":{\"details\":\"Restricted access function to set smart contract \\\"owner\\\"      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"Requires executor to have ROLE_OWNER_MANAGER permission\",\"params\":{\"_owner\":\"new \\\"owner\\\" of the smart contract\"}},\"updateFeatures(uint256)\":{\"details\":\"Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions\",\"params\":{\"_mask\":\"bitmask representing a set of features to enable/disable\"}},\"updateRole(address,uint256)\":{\"details\":\"Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission\",\"params\":{\"operator\":\"address of a user to alter permissions for,       or self address to alter global features of the smart contract\",\"role\":\"bitmask representing a set of permissions to      enable/disable for a user specified\"}}},\"stateVariables\":{\"TOKEN_UID\":{\"details\":\"Smart contract unique identifier, a random numberShould be regenerated each time smart contact source code is changed      and changes smart contract itself is to be redeployedGenerated using https://www.random.org/bytes/Example value: 0xdbdd2b4ff38a8516da0b8e7ae93288b5e2fed0c92fb051cee90ccf4e4ec9736e\"}},\"title\":\"Whitelabel NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"EIP-712 contract's domain separator,      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator      note: we specify contract version in its name\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"EIP-712 contract's domain typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"FEATURE_BURNS_ON_BEHALF()\":{\"notice\":\"Enables approved operators to burn tokens on behalf of their owners\"},\"FEATURE_OPERATOR_PERMITS()\":{\"notice\":\"Enables operator approvals on behalf (permits for all via an EIP712 signature)\"},\"FEATURE_OWN_BURNS()\":{\"notice\":\"Enables token owners to burn their own tokens\"},\"FEATURE_PERMITS()\":{\"notice\":\"Enables approvals on behalf (permits via an EIP712 signature)\"},\"FEATURE_TRANSFERS()\":{\"notice\":\"Enables ERC721 transfers of the tokens      (transfer by the token owner himself)\"},\"FEATURE_TRANSFERS_ON_BEHALF()\":{\"notice\":\"Enables ERC721 transfers on behalf      (transfer by someone else on behalf of token owner)\"},\"PERMIT_FOR_ALL_TYPEHASH()\":{\"notice\":\"EIP-712 permitForAll (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"EIP-712 permit (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"ROLE_ACCESS_MANAGER()\":{\"notice\":\"Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features\"},\"ROLE_OWNER_MANAGER()\":{\"notice\":\"Owner manager is responsible for setting/updating an \\\"owner\\\" field\"},\"ROLE_ROYALTY_MANAGER()\":{\"notice\":\"Royalty manager is responsible for managing the EIP2981 royalty info\"},\"ROLE_TOKEN_CREATOR()\":{\"notice\":\"Token creator is responsible for creating (minting)      tokens to an arbitrary address\"},\"ROLE_TOKEN_DESTROYER()\":{\"notice\":\"Token destroyer is responsible for destroying (burning)      tokens owned by an arbitrary address\"},\"ROLE_URI_MANAGER()\":{\"notice\":\"URI manager is responsible for managing base URI      part of the token URI ERC721Metadata interface\"},\"approve(address,uint256)\":{\"notice\":\"Change or reaffirm the approved address for an NFT\"},\"balanceOf(address)\":{\"notice\":\"Count all NFTs assigned to an owner\"},\"contractURI()\":{\"notice\":\"Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata\"},\"decimals()\":{\"notice\":\"Current implementation includes a function `decimals` that returns uint8(0)      to be more compatible with ERC-20\"},\"exists(uint256)\":{\"notice\":\"Checks if specified token exists\"},\"features()\":{\"notice\":\"Retrieves globally set of features enabled\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved address for a single NFT\"},\"getRole(address)\":{\"notice\":\"Reads the permissions (role) for a given user from the `userRoles` mapping      (privileged addresses with defined roles/permissions)In the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Query if an address is an authorized operator for another address\"},\"isFeatureEnabled(uint256)\":{\"notice\":\"Checks if requested set of features is enabled globally on the contract\"},\"isOperatorInRole(address,uint256)\":{\"notice\":\"Checks if operator has all the permissions (role) required\"},\"isOwner(address)\":{\"notice\":\"Checks if the address supplied is an \\\"owner\\\" of the smart contract      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\"},\"isSenderInRole(uint256)\":{\"notice\":\"Checks if transaction sender `msg.sender` has all the permissions required\"},\"name()\":{\"notice\":\"ERC-20 compatible descriptive name for a collection of NFTs in this contract\"},\"ownerOf(uint256)\":{\"notice\":\"Find the owner of an NFT\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Change or reaffirm the approved address for an NFT on behalf\"},\"permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage      all of owner's assets - on behalf\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"EIP-2981 function to calculate royalties for sales in secondary marketplaces.         see https://eips.ethereum.org/EIPS/eip-2981\"},\"royaltyPercentage()\":{\"notice\":\"Percentage of token sale price to be used for EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981\"},\"royaltyReceiver()\":{\"notice\":\"Address to receive EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfers the ownership of an NFT from one address to another address\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers the ownership of an NFT from one address to another address\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage  all of `msg.sender`'s assets\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"symbol()\":{\"notice\":\"ERC-20 compatible abbreviated name for a collection of NFTs in this contract\"},\"tokenByIndex(uint256)\":{\"notice\":\"Enumerate valid NFTs\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Enumerate NFTs assigned to an owner\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"totalSupply()\":{\"notice\":\"Count NFTs tracked by this contract\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST\"},\"updateFeatures(uint256)\":{\"notice\":\"Updates set of the globally enabled features (`features`),      taking into account sender's permissions\"},\"updateRole(address,uint256)\":{\"notice\":\"Updates set of permissions (role) for a given user,      taking into account sender's permissions.\"}},\"notice\":\"Whitelabel NFT is a non-upgradeable ERC721 standard implementation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/WhitelabelNFT.sol\":\"WhitelabelNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/EIP2981Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC165Spec.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface EIP2981 is ERC165 {\\n\\t/// ERC165 bytes to add to interface array - set in parent contract\\n\\t/// implementing this standard\\n\\t///\\n\\t/// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n\\t/// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\t/// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n\\t/// @notice Called with the sale price to determine how much royalty\\n\\t//          is owed and to whom.\\n\\t/// @param _tokenId - the NFT asset queried for royalty information\\n\\t/// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n\\t/// @return receiver - address of who should be sent the royalty payment\\n\\t/// @return royaltyAmount - the royalty payment amount for _salePrice\\n\\tfunction royaltyInfo(\\n\\t\\tuint256 _tokenId,\\n\\t\\tuint256 _salePrice\\n\\t) external view returns (\\n\\t\\taddress receiver,\\n\\t\\tuint256 royaltyAmount\\n\\t);\\n}\\n\",\"keccak256\":\"0x006026c811022bb9c4568ef2a95b1030d2e92fd1ee968894f79aa24eb5ab3a98\",\"license\":\"MIT\"},\"contracts/interfaces/ERC165Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title ERC-165 Standard Interface Detection\\n *\\n * @dev Interface of the ERC165 standard, as defined in the\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * @dev Implementers can declare support of contract interfaces,\\n *      which can then be queried by others.\\n *\\n * @author Christian Reitwie\\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\n */\\ninterface ERC165 {\\n\\t/**\\n\\t * @notice Query if a contract implements an interface\\n\\t *\\n\\t * @dev Interface identification is specified in ERC-165.\\n\\t *      This function uses less than 30,000 gas.\\n\\t *\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\n\\t * @return `true` if the contract implements `interfaceID` and\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9b8e0a0ee2ddff1014108266f62a95dab3f76f08deba2e6177ec2ed251128f9d\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC165Spec.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev Solidity issue #3412: The ERC721 interfaces include explicit mutability guarantees for each function.\\n *      Mutability guarantees are, in order weak to strong: payable, implicit nonpayable, view, and pure.\\n *      Implementation MUST meet the mutability guarantee in this interface and MAY meet a stronger guarantee.\\n *      For example, a payable function in this interface may be implemented as nonpayable\\n *      (no state mutability specified) in implementing contract.\\n *      It is expected a later Solidity release will allow stricter contract to inherit from this interface,\\n *      but current workaround is that we edit this interface to add stricter mutability before inheriting:\\n *      we have removed all \\\"payable\\\" modifiers.\\n *\\n * @dev The ERC-165 identifier for this interface is 0x80ac58cd.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721 is ERC165 {\\n\\t/// @dev This emits when ownership of any NFT changes by any mechanism.\\n\\t///  This event emits when NFTs are created (`from` == 0) and destroyed\\n\\t///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n\\t///  may be created and assigned without emitting Transfer. At the time of\\n\\t///  any transfer, the approved address for that NFT (if any) is reset to none.\\n\\tevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\n\\n\\t/// @dev This emits when the approved address for an NFT is changed or\\n\\t///  reaffirmed. The zero address indicates there is no approved address.\\n\\t///  When a Transfer event emits, this also indicates that the approved\\n\\t///  address for that NFT (if any) is reset to none.\\n\\tevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\n\\n\\t/// @dev This emits when an operator is enabled or disabled for an owner.\\n\\t///  The operator can manage all NFTs of the owner.\\n\\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n\\t/// @notice Count all NFTs assigned to an owner\\n\\t/// @dev NFTs assigned to the zero address are considered invalid, and this\\n\\t///  function throws for queries about the zero address.\\n\\t/// @param _owner An address for whom to query the balance\\n\\t/// @return The number of NFTs owned by `_owner`, possibly zero\\n\\tfunction balanceOf(address _owner) external view returns (uint256);\\n\\n\\t/// @notice Find the owner of an NFT\\n\\t/// @dev NFTs assigned to zero address are considered invalid, and queries\\n\\t///  about them do throw.\\n\\t/// @param _tokenId The identifier for an NFT\\n\\t/// @return The address of the owner of the NFT\\n\\tfunction ownerOf(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n\\t///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t///  `onERC721Received` on `_to` and throws if the return value is not\\n\\t///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\t/// @param _data Additional data with no specified format, sent in call to `_to`\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external /*payable*/;\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev This works identically to the other function with an extra data parameter,\\n\\t///  except this function just sets data to \\\"\\\".\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n\\t///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n\\t///  THEY MAY BE PERMANENTLY LOST\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Change or reaffirm the approved address for an NFT\\n\\t/// @dev The zero address indicates there is no approved address.\\n\\t///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n\\t///  operator of the current owner.\\n\\t/// @param _approved The new approved NFT controller\\n\\t/// @param _tokenId The NFT to approve\\n\\tfunction approve(address _approved, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n\\t///  all of `msg.sender`'s assets\\n\\t/// @dev Emits the ApprovalForAll event. The contract MUST allow\\n\\t///  multiple operators per owner.\\n\\t/// @param _operator Address to add to the set of authorized operators\\n\\t/// @param _approved True if the operator is approved, false to revoke approval\\n\\tfunction setApprovalForAll(address _operator, bool _approved) external;\\n\\n\\t/// @notice Get the approved address for a single NFT\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT.\\n\\t/// @param _tokenId The NFT to find the approved address for\\n\\t/// @return The approved address for this NFT, or the zero address if there is none\\n\\tfunction getApproved(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Query if an address is an authorized operator for another address\\n\\t/// @param _owner The address that owns the NFTs\\n\\t/// @param _operator The address that acts on behalf of the owner\\n\\t/// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n\\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n\\t/// @notice Handle the receipt of an NFT\\n\\t/// @dev The ERC721 smart contract calls this function on the recipient\\n\\t///  after a `transfer`. This function MAY throw to revert and reject the\\n\\t///  transfer. Return of other than the magic value MUST result in the\\n\\t///  transaction being reverted.\\n\\t///  Note: the contract address is always the message sender.\\n\\t/// @param _operator The address which called `safeTransferFrom` function\\n\\t/// @param _from The address which previously owned the token\\n\\t/// @param _tokenId The NFT identifier which is being transferred\\n\\t/// @param _data Additional data with no specified format\\n\\t/// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n\\t///  unless throwing\\n\\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x5b5e139f.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Metadata is ERC721 {\\n\\t/// @notice A descriptive name for a collection of NFTs in this contract\\n\\tfunction name() external view returns (string memory _name);\\n\\n\\t/// @notice An abbreviated name for NFTs in this contract\\n\\tfunction symbol() external view returns (string memory _symbol);\\n\\n\\t/// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n\\t///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n\\t///  Metadata JSON Schema\\\".\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x780e9d63.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Enumerable is ERC721 {\\n\\t/// @notice Count NFTs tracked by this contract\\n\\t/// @return A count of valid NFTs tracked by this contract, where each one of\\n\\t///  them has an assigned and queryable owner not equal to the zero address\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/// @notice Enumerate valid NFTs\\n\\t/// @dev Throws if `_index` >= `totalSupply()`.\\n\\t/// @param _index A counter less than `totalSupply()`\\n\\t/// @return The token identifier for the `_index`th NFT,\\n\\t///  (sort order not specified)\\n\\tfunction tokenByIndex(uint256 _index) external view returns (uint256);\\n\\n\\t/// @notice Enumerate NFTs assigned to an owner\\n\\t/// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\n\\t///  `_owner` is the zero address, representing invalid NFTs.\\n\\t/// @param _owner An address where we are interested in NFTs owned by them\\n\\t/// @param _index A counter less than `balanceOf(_owner)`\\n\\t/// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\n\\t///   (sort order not specified)\\n\\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe57d29caebdb7151575f0644ba5c5865fcc498e87f255aae97523871893f56c2\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721SpecExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Mintable ERC721\\n *\\n * @notice Defines mint capabilities for Alethea ERC721 tokens.\\n *      This interface should be treated as a definition of what mintable means for ERC721\\n */\\ninterface MintableERC721 {\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t *\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `safeMint` instead of `mint`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `safeMintBatch` instead of `mintBatch`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _tokenId ID of the first token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) external;\\n}\\n\\n/**\\n * @title Alethea Burnable ERC721\\n *\\n * @notice Defines burn capabilities for Alethea ERC721 tokens.\\n *      This interface should be treated as a definition of what burnable means for ERC721\\n */\\ninterface BurnableERC721 {\\n\\t/**\\n\\t * @notice Destroys the token with token ID specified\\n\\t *\\n\\t * @dev Should be accessible publicly by token owners.\\n\\t *      May have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _tokenId ID of the token to burn\\n\\t */\\n\\tfunction burn(uint256 _tokenId) external;\\n}\\n\\n/**\\n * @title With Base URI\\n *\\n * @notice A marker interface for the contracts having the baseURI() function\\n *      or public string variable named baseURI\\n *      NFT implementations like TinyERC721, or ShortERC721 are example of such smart contracts\\n */\\ninterface WithBaseURI {\\n\\t/**\\n\\t * @dev Usually used in NFT implementations to construct ERC721Metadata.tokenURI as\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\n\\t *\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\n\\t *      will have an URI https://api.com/token/1\\n\\t */\\n\\tfunction baseURI() external view returns(string memory);\\n}\\n\",\"keccak256\":\"0x75ff18794a52e7befc7611e61bf722dc27fde99035e2c2168477ea062191e1ac\",\"license\":\"MIT\"},\"contracts/lib/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Address Utils\\n *\\n * @dev Utility library of inline functions on addresses\\n *\\n * @dev Copy of the Zeppelin's library:\\n *      https://github.com/gnosis/openzeppelin-solidity/blob/master/contracts/AddressUtils.sol\\n */\\nlibrary AddressUtils {\\n\\n\\t/**\\n\\t * @notice Checks if the target address is a contract\\n\\t *\\n\\t * @dev It is unsafe to assume that an address for which this function returns\\n\\t *      false is an externally-owned account (EOA) and not a contract.\\n\\t *\\n\\t * @dev Among others, `isContract` will return false for the following\\n\\t *      types of addresses:\\n\\t *        - an externally-owned account\\n\\t *        - a contract in construction\\n\\t *        - an address where a contract will be created\\n\\t *        - an address where a contract lived, but was destroyed\\n\\t *\\n\\t * @param addr address to check\\n\\t * @return whether the target address is a contract\\n\\t */\\n\\tfunction isContract(address addr) internal view returns (bool) {\\n\\t\\t// a variable to load `extcodesize` to\\n\\t\\tuint256 size = 0;\\n\\n\\t\\t// XXX Currently there is no better way to check if there is a contract in an address\\n\\t\\t// than to check the size of the code at that address.\\n\\t\\t// See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\\n\\t\\t// TODO: Check this again before the Serenity release, because all addresses will be contracts.\\n\\t\\t// solium-disable-next-line security/no-inline-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// retrieve the size of the code at address `addr`\\n\\t\\t\\tsize := extcodesize(addr)\\n\\t\\t}\\n\\n\\t\\t// positive size indicates a smart contract address\\n\\t\\treturn size > 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe367faf60d308a5e9a11c8c8df7b39d3656d7cfdf711e083384c72c02302ad65\",\"license\":\"MIT\"},\"contracts/lib/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Array Utils\\n *\\n * @notice Solidity doesn't always work with arrays in an optimal way.\\n *      This library collects functions helping to optimize gas usage\\n *      when working with arrays in Solidity.\\n *\\n * @dev One of the most important use cases for arrays is \\\"tight\\\" arrays -\\n *      arrays which store values significantly less than 256-bits numbers\\n */\\nlibrary ArrayUtils {\\n\\t/**\\n\\t * @dev Pushes `n` 32-bits values sequentially into storage allocated array `data`\\n\\t *      starting from the 32-bits value `v0`\\n\\t *\\n\\t * @dev Optimizations comparing to non-assembly implementation:\\n\\t *      - reads+writes to array size slot only once (instead of `n` times)\\n\\t *      - reads from the array data slots only once (instead of `7n/8` times)\\n\\t *      - writes into array data slots `n/8` times (instead of `n` times)\\n\\t *\\n\\t * @dev Maximum gas saving estimate: ~3n sstore, or 15,000 * n\\n\\t *\\n\\t * @param data storage array pointer to an array of 32-bits elements\\n\\t * @param v0 first number to push into the array\\n\\t * @param n number of values to push, pushes [v0, ..., v0 + n - 1]\\n\\t */\\n\\tfunction push32(uint32[] storage data, uint32 v0, uint32 n) internal {\\n\\t\\t// we're going to write 32-bits values into 256-bits storage slots of the array\\n\\t\\t// each 256-slot can store up to 8 32-bits sub-blocks, it can also be partially empty\\n\\t\\tassembly {\\n\\t\\t\\t// for dynamic arrays their slot (array.slot) contains the array length\\n\\t\\t\\t// array data is stored separately in consequent storage slots starting\\n\\t\\t\\t// from the slot with the address keccak256(array.slot)\\n\\n\\t\\t\\t// read the array length into `len` and increase it by `n`\\n\\t\\t\\tlet len := sload(data.slot)\\n\\t\\t\\tsstore(data.slot, add(len, n))\\n\\n\\t\\t\\t// find where to write elements and store this location into `loc`\\n\\t\\t\\t// load array storage slot number into memory onto position 0,\\n\\t\\t\\t// calculate the keccak256 of the slot number (first 32 bytes at position 0)\\n\\t\\t\\t// - this will point to the beginning of the array,\\n\\t\\t\\t// so we add array length divided by 8 to point to the last array slot\\n\\t\\t\\tmstore(0, data.slot)\\n\\t\\t\\tlet loc := add(keccak256(0, 32), div(len, 8))\\n\\n\\t\\t\\t// if we start writing data into already partially occupied slot (`len % 8 != 0`)\\n\\t\\t\\t// we need to modify the contents of that slot: read it and rewrite it\\n\\t\\t\\tlet offset := mod(len, 8)\\n\\t\\t\\tif not(iszero(offset)) {\\n\\t\\t\\t\\t// how many 32-bits sub-blocks left in the slot\\n\\t\\t\\t\\tlet left := sub(8, offset)\\n\\t\\t\\t\\t// update the `left` value not to exceed `n`\\n\\t\\t\\t\\tif gt(left, n) { left := n }\\n\\t\\t\\t\\t// load the contents of the first slot (partially occupied)\\n\\t\\t\\t\\tlet v256 := sload(loc)\\n\\t\\t\\t\\t// write the slot in 32-bits sub-blocks\\n\\t\\t\\t\\tfor { let j := 0 } lt(j, left) { j := add(j, 1) } {\\n\\t\\t\\t\\t\\t// write sub-block `j` at offset: `(j + offset) * 32` bits, length: 32-bits\\n\\t\\t\\t\\t\\t// v256 |= (v0 + j) << (j + offset) * 32\\n\\t\\t\\t\\t\\tv256 := or(v256, shl(mul(add(j, offset), 32), add(v0, j)))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// write first slot back, it can be still partially occupied, it can also be full\\n\\t\\t\\t\\tsstore(loc, v256)\\n\\t\\t\\t\\t// update `loc`: move to the next slot\\n\\t\\t\\t\\tloc := add(loc, 1)\\n\\t\\t\\t\\t// update `v0`: increment by number of values pushed\\n\\t\\t\\t\\tv0 := add(v0, left)\\n\\t\\t\\t\\t// update `n`: decrement by number of values pushed\\n\\t\\t\\t\\tn := sub(n, left)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// rest of the slots (if any) are empty and will be only written to\\n\\t\\t\\t// write the array in 256-bits (8x32) slots\\n\\t\\t\\t// `i` iterates [0, n) with the 256-bits step, which is 8 taken `n` is 32-bits long\\n\\t\\t\\tfor { let i := 0 } lt(i, n) { i := add(i, 8) } {\\n\\t\\t\\t\\t// how many 32-bits sub-blocks left in the slot\\n\\t\\t\\t\\tlet left := 8\\n\\t\\t\\t\\t// update the `left` value not to exceed `n`\\n\\t\\t\\t\\tif gt(left, n) { left := n }\\n\\t\\t\\t\\t// init the 256-bits slot value\\n\\t\\t\\t\\tlet v256 := 0\\n\\t\\t\\t\\t// write the slot in 32-bits sub-blocks\\n\\t\\t\\t\\tfor { let j := 0 } lt(j, left) { j := add(j, 1) } {\\n\\t\\t\\t\\t\\t// write sub-block `j` at offset: `j * 32` bits, length: 32-bits\\n\\t\\t\\t\\t\\t// v256 |= (v0 + i + j) << j * 32\\n\\t\\t\\t\\t\\tv256 := or(v256, shl(mul(j, 32), add(v0, add(i, j))))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// write slot `i / 8`\\n\\t\\t\\t\\tsstore(add(loc, div(i, 8)), v256)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x0f8497017b0ab1d01d104f75abbdc0260c40ef972702c0ee070991715d0da4db\",\"license\":\"MIT\"},\"contracts/lib/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n *\\n * @dev Copy of the Zeppelin's library:\\n *      https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b0cf6fbb7a70f31527f36579ad644e1cf12fdf4e/contracts/utils/cryptography/ECDSA.sol\\n */\\nlibrary ECDSA {\\n\\t/**\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\n\\t * `signature`. This address can then be used for verification purposes.\\n\\t *\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\n\\t * half order, and the `v` value to be either 27 or 28.\\n\\t *\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n\\t * verification to be secure: it is possible to craft signatures that\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n\\t * this is by receiving a hash of the original message (which may otherwise\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\n\\t *\\n\\t * Documentation for signature generation:\\n\\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n\\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n\\t */\\n\\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n\\t\\t// Divide the signature in r, s and v variables\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\tuint8 v;\\n\\n\\t\\t// Check the signature length\\n\\t\\t// - case 65: r,s,v signature (standard)\\n\\t\\t// - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n\\t\\tif (signature.length == 65) {\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\n\\t\\t\\t// currently is to use assembly.\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := mload(add(signature, 0x40))\\n\\t\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse if (signature.length == 64) {\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\n\\t\\t\\t// currently is to use assembly.\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet vs := mload(add(signature, 0x40))\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n\\t\\t\\t\\tv := add(shr(255, vs), 27)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\trevert(\\\"invalid signature length\\\");\\n\\t\\t}\\n\\n\\t\\treturn recover(hash, v, r, s);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal pure returns (address) {\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n\\t\\t// the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n\\t\\t//\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n\\t\\t// these malleable signatures as well.\\n\\t\\trequire(\\n\\t\\t\\tuint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n\\t\\t\\t\\\"invalid signature 's' value\\\"\\n\\t\\t);\\n\\t\\trequire(v == 27 || v == 28, \\\"invalid signature 'v' value\\\");\\n\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\n\\t\\trequire(signer != address(0), \\\"invalid signature\\\");\\n\\n\\t\\treturn signer;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n\\t * produces hash corresponding to the one signed with the\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n\\t * JSON-RPC method as part of EIP-191.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n\\t\\t// 32 is the length in bytes of hash,\\n\\t\\t// enforced by the type signature above\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Typed Data, created from a\\n\\t * `domainSeparator` and a `structHash`. This produces hash corresponding\\n\\t * to the one signed with the\\n\\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n\\t * JSON-RPC method as part of EIP-712.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\t}\\n}\\n\",\"keccak256\":\"0xadc0107053170d40a04da6f2da244286cb84a4dab28f8e50c1b4d386fc597f87\",\"license\":\"MIT\"},\"contracts/lib/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title String Utils Library\\n *\\n * @dev Library for working with strings, primarily converting\\n *      between strings and integer types\\n */\\nlibrary StringUtils {\\n\\t/**\\n\\t * @dev Converts a string to unsigned integer using the specified `base`\\n\\t * @dev Throws on invalid input\\n\\t *      (wrong characters for a given `base`)\\n\\t * @dev Throws if given `base` is not supported\\n\\t * @param a string to convert\\n\\t * @param base number base, one of 2, 8, 10, 16\\n\\t * @return i a number representing given string\\n\\t */\\n\\tfunction atoi(string memory a, uint8 base) internal pure returns (uint256 i) {\\n\\t\\t// check if the base is valid\\n\\t\\trequire(base == 2 || base == 8 || base == 10 || base == 16);\\n\\n\\t\\t// convert string into bytes for convenient iteration\\n\\t\\tbytes memory buf = bytes(a);\\n\\n\\t\\t// iterate over the string (bytes buffer)\\n\\t\\tfor(uint256 p = 0; p < buf.length; p++) {\\n\\t\\t\\t// extract the digit\\n\\t\\t\\tuint8 digit = uint8(buf[p]) - 0x30;\\n\\n\\t\\t\\t// if digit is greater then 10 - mind the gap\\n\\t\\t\\t// see `itoa` function for more details\\n\\t\\t\\tif(digit > 10) {\\n\\t\\t\\t\\t// remove the gap\\n\\t\\t\\t\\tdigit -= 7;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// check if digit meets the base\\n\\t\\t\\trequire(digit < base);\\n\\n\\t\\t\\t// move to the next digit slot\\n\\t\\t\\ti *= base;\\n\\n\\t\\t\\t// add digit to the result\\n\\t\\t\\ti += digit;\\n\\t\\t}\\n\\n\\t\\t// return the result\\n\\t\\treturn i;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts a integer to a string using the specified `base`\\n\\t * @dev Throws if given `base` is not supported\\n\\t * @param i integer to convert\\n\\t * @param base number base, one of 2, 8, 10, 16\\n\\t * @return a a string representing given integer\\n\\t */\\n\\tfunction itoa(uint256 i, uint8 base) internal pure returns (string memory a) {\\n\\t\\t// check if the base is valid\\n\\t\\trequire(base == 2 || base == 8 || base == 10 || base == 16);\\n\\n\\t\\t// for zero input the result is \\\"0\\\" string for any base\\n\\t\\tif(i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\t// bytes buffer to put ASCII characters into\\n\\t\\tbytes memory buf = new bytes(256);\\n\\n\\t\\t// position within a buffer to be used in cycle\\n\\t\\tuint256 p = 0;\\n\\n\\t\\t// extract digits one by one in a cycle\\n\\t\\twhile(i > 0) {\\n\\t\\t\\t// extract current digit\\n\\t\\t\\tuint8 digit = uint8(i % base);\\n\\n\\t\\t\\t// convert it to an ASCII code\\n\\t\\t\\t// 0x20 is \\\" \\\"\\n\\t\\t\\t// 0x30-0x39 is \\\"0\\\"-\\\"9\\\"\\n\\t\\t\\t// 0x41-0x5A is \\\"A\\\"-\\\"Z\\\"\\n\\t\\t\\t// 0x61-0x7A is \\\"a\\\"-\\\"z\\\" (\\\"A\\\"-\\\"Z\\\" XOR \\\" \\\")\\n\\t\\t\\tuint8 ascii = digit + 0x30;\\n\\n\\t\\t\\t// if digit is greater then 10,\\n\\t\\t\\t// fix the 0x3A-0x40 gap of punctuation marks\\n\\t\\t\\t// (7 characters in ASCII table)\\n\\t\\t\\tif(digit >= 10) {\\n\\t\\t\\t\\t// jump through the gap\\n\\t\\t\\t\\tascii += 7;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// write character into the buffer\\n\\t\\t\\tbuf[p++] = bytes1(ascii);\\n\\n\\t\\t\\t// move to the next digit\\n\\t\\t\\ti /= base;\\n\\t\\t}\\n\\n\\t\\t// `p` contains real length of the buffer now,\\n\\t\\t// allocate the resulting buffer of that size\\n\\t\\tbytes memory result = new bytes(p);\\n\\n\\t\\t// copy the buffer in the reversed order\\n\\t\\tfor(p = 0; p < result.length; p++) {\\n\\t\\t\\t// copy from the beginning of the original buffer\\n\\t\\t\\t// to the end of resulting smaller buffer\\n\\t\\t\\tresult[result.length - p - 1] = buf[p];\\n\\t\\t}\\n\\n\\t\\t// construct string and return\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Concatenates two strings `s1` and `s2`, for example, if\\n\\t *      `s1` == `foo` and `s2` == `bar`, the result `s` == `foobar`\\n\\t * @param s1 first string\\n\\t * @param s2 second string\\n\\t * @return s concatenation result s1 + s2\\n\\t */\\n\\tfunction concat(string memory s1, string memory s2) internal pure returns (string memory s) {\\n\\t\\t// an old way of string concatenation (Solidity 0.4) is commented out\\n/*\\n\\t\\t// convert s1 into buffer 1\\n\\t\\tbytes memory buf1 = bytes(s1);\\n\\t\\t// convert s2 into buffer 2\\n\\t\\tbytes memory buf2 = bytes(s2);\\n\\t\\t// create a buffer for concatenation result\\n\\t\\tbytes memory buf = new bytes(buf1.length + buf2.length);\\n\\n\\t\\t// copy buffer 1 into buffer\\n\\t\\tfor(uint256 i = 0; i < buf1.length; i++) {\\n\\t\\t\\tbuf[i] = buf1[i];\\n\\t\\t}\\n\\n\\t\\t// copy buffer 2 into buffer\\n\\t\\tfor(uint256 j = buf1.length; j < buf2.length; j++) {\\n\\t\\t\\tbuf[j] = buf2[j - buf1.length];\\n\\t\\t}\\n\\n\\t\\t// construct string and return\\n\\t\\treturn string(buf);\\n*/\\n\\n\\t\\t// simply use built in function\\n\\t\\treturn string(abi.encodePacked(s1, s2));\\n\\t}\\n}\\n\",\"keccak256\":\"0x46185cc43fdd86e2c4d3dfbaae214eb8d55edc53011a70816ff13aef8302db69\",\"license\":\"MIT\"},\"contracts/token/RoyalERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/EIP2981Spec.sol\\\";\\nimport \\\"./TinyERC721.sol\\\";\\n\\n/**\\n * @title Royal ER721\\n *\\n * @dev Supports EIP-2981 royalties on NFT secondary sales\\n *      Supports OpenSea contract metadata royalties\\n *      Introduces fake \\\"owner\\\" to support OpenSea collections\\n */\\nabstract contract RoyalERC721 is EIP2981, TinyERC721 {\\n\\t/**\\n\\t * @dev OpenSea expects NFTs to be \\\"Ownable\\\", that is having an \\\"owner\\\",\\n\\t *      we introduce a fake \\\"owner\\\" here with no authority\\n\\t */\\n\\taddress public owner;\\n\\n\\t/**\\n\\t * @notice Address to receive EIP-2981 royalties from secondary sales\\n\\t *         see https://eips.ethereum.org/EIPS/eip-2981\\n\\t */\\n\\taddress public royaltyReceiver = address(0x379e2119f6e0D6088537da82968e2a7ea178dDcF);\\n\\n\\t/**\\n\\t * @notice Percentage of token sale price to be used for EIP-2981 royalties from secondary sales\\n\\t *         see https://eips.ethereum.org/EIPS/eip-2981\\n\\t *\\n\\t * @dev Has 2 decimal precision. E.g. a value of 500 would result in a 5% royalty fee\\n\\t */\\n\\tuint16 public royaltyPercentage = 750; // default OpenSea value\\n\\n\\t/**\\n\\t * @notice Contract level metadata to define collection name, description, and royalty fees.\\n\\t *         see https://docs.opensea.io/docs/contract-level-metadata\\n\\t *\\n\\t * @dev Should be set by URI manager. By default only includes royalty information\\n\\t */\\n\\tstring public contractURI = \\\"https://gateway.pinata.cloud/ipfs/QmU92w8iKpcaabCoyHtMg7iivWGqW2gW1hgARDtqCmJUWv\\\";\\n\\n\\t/**\\n\\t * @notice Royalty manager is responsible for managing the EIP2981 royalty info\\n\\t *\\n\\t * @dev Role ROLE_ROYALTY_MANAGER allows updating the royalty information\\n\\t *      (executing `setRoyaltyInfo` function)\\n\\t */\\n\\tuint32 public constant ROLE_ROYALTY_MANAGER = 0x0020_0000;\\n\\n\\t/**\\n\\t * @notice Owner manager is responsible for setting/updating an \\\"owner\\\" field\\n\\t *\\n\\t * @dev Role ROLE_OWNER_MANAGER allows updating the \\\"owner\\\" field\\n\\t *      (executing `transferOwnership` function)\\n\\t */\\n\\tuint32 public constant ROLE_OWNER_MANAGER = 0x0040_0000;\\n\\n\\t/**\\n\\t * @dev Fired in setContractURI()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param _value new contractURI value\\n\\t */\\n\\tevent ContractURIUpdated(address indexed _by, string _value);\\n\\n\\t/**\\n\\t * @dev Fired in setRoyaltyInfo()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param _receiver new royaltyReceiver value\\n\\t * @param _percentage new royaltyPercentage value\\n\\t */\\n\\tevent RoyaltyInfoUpdated(\\n\\t\\taddress indexed _by,\\n\\t\\taddress indexed _receiver,\\n\\t\\tuint16 _percentage\\n\\t);\\n\\n\\t/**\\n\\t * @dev Fired in transferOwnership()\\n\\t *\\n\\t * @param _by an address which set the new \\\"owner\\\"\\n\\t * @param _oldVal previous \\\"owner\\\" address\\n\\t * @param _newVal new \\\"owner\\\" address\\n\\t */\\n\\tevent OwnerUpdated(address indexed _by, address indexed _oldVal, address indexed _newVal);\\n\\n\\t/**\\n\\t * @dev Fired in transferOwnership() - OpenZeppelin Ownable compliant event\\n\\t *\\n\\t * @param previousOwner previous \\\"owner\\\" address\\n\\t * @param newOwner new \\\"owner\\\" address\\n\\t */\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\t/**\\n\\t * @dev Constructs/deploys ERC721 with EIP-2981 instance with the name and symbol specified\\n\\t *\\n\\t * @param _name token name (ERC721Metadata)\\n\\t * @param _symbol token symbol (ERC721Metadata)\\n\\t */\\n\\tconstructor(string memory _name, string memory _symbol) TinyERC721(_name, _symbol) {\\n\\t\\t// initialize the \\\"owner\\\" as a deployer account\\n\\t\\towner = msg.sender;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates the contract URI\\n\\t *\\n\\t * @dev Requires executor to have ROLE_URI_MANAGER permission\\n\\t *\\n\\t * @param _contractURI new contract URI to set\\n\\t */\\n\\tfunction setContractURI(string memory _contractURI) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// update the contract URI\\n\\t\\tcontractURI = _contractURI;\\n\\n\\t\\t// emit an event\\n\\t\\temit ContractURIUpdated(msg.sender, _contractURI);\\n\\t}\\n\\n\\t/**\\n\\t * @notice EIP-2981 function to calculate royalties for sales in secondary marketplaces.\\n\\t *         see https://eips.ethereum.org/EIPS/eip-2981\\n\\t *\\n\\t * @inheritdoc EIP2981\\n\\t */\\n\\tfunction royaltyInfo(\\n\\t\\tuint256,\\n\\t\\tuint256 _salePrice\\n\\t) public view override returns (\\n\\t\\taddress receiver,\\n\\t\\tuint256 royaltyAmount\\n\\t) {\\n\\t\\t// simply calculate the values and return the result\\n\\t\\treturn (royaltyReceiver, _salePrice * royaltyPercentage / 100_00);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates the royalty info\\n\\t *\\n\\t * @dev Requires executor to have ROLE_ROYALTY_MANAGER permission\\n\\t *\\n\\t * @param _royaltyReceiver new royalty receiver to set\\n\\t * @param _royaltyPercentage new royalty percentage to set\\n\\t */\\n\\tfunction setRoyaltyInfo(address _royaltyReceiver, uint16 _royaltyPercentage) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_ROYALTY_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// verify royalty percentage is zero if receiver is also zero\\n\\t\\trequire(_royaltyReceiver != address(0) || _royaltyPercentage == 0, \\\"invalid receiver\\\");\\n\\t\\t// verify royalty percentage doesn't exceed 100%\\n\\t\\trequire(_royaltyPercentage <= 100_00, \\\"royalty percentage exceeds 100%\\\");\\n\\n\\t\\t// update the values\\n\\t\\troyaltyReceiver = _royaltyReceiver;\\n\\t\\troyaltyPercentage = _royaltyPercentage;\\n\\n\\t\\t// emit an event\\n\\t\\temit RoyaltyInfoUpdated(msg.sender, _royaltyReceiver, _royaltyPercentage);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if the address supplied is an \\\"owner\\\" of the smart contract\\n\\t *      Note: an \\\"owner\\\" doesn't have any authority on the smart contract and is \\\"nominal\\\"\\n\\t *\\n\\t * @return true if the caller is the current owner.\\n\\t */\\n\\tfunction isOwner(address _addr) public view returns(bool) {\\n\\t\\t// just evaluate and return the result\\n\\t\\treturn _addr == owner;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Restricted access function to set smart contract \\\"owner\\\"\\n\\t *      Note: an \\\"owner\\\" set doesn't have any authority, and cannot even update \\\"owner\\\"\\n\\t *\\n\\t * @dev Requires executor to have ROLE_OWNER_MANAGER permission\\n\\t *\\n\\t * @param _owner new \\\"owner\\\" of the smart contract\\n\\t */\\n\\tfunction transferOwnership(address _owner) public {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_OWNER_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit OwnerUpdated(msg.sender, owner, _owner);\\n\\n\\t\\t// emit zeppelin ownable-compliant ownership transfer event\\n\\t\\temit OwnershipTransferred(owner, _owner);\\n\\n\\t\\t// update \\\"owner\\\"\\n\\t\\towner = _owner;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC165\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, TinyERC721) returns (bool) {\\n\\t\\t// construct the interface support from EIP-2981 and super interfaces\\n\\t\\treturn interfaceId == type(EIP2981).interfaceId || super.supportsInterface(interfaceId);\\n\\t}\\n}\\n\",\"keccak256\":\"0x27a36e5921d894670ddeb11a4dfdf7b69e206be555b177d72457acab6993e087\",\"license\":\"MIT\"},\"contracts/token/TinyERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC721Spec.sol\\\";\\nimport \\\"../interfaces/ERC721SpecExt.sol\\\";\\nimport \\\"../lib/AddressUtils.sol\\\";\\nimport \\\"../lib/ArrayUtils.sol\\\";\\nimport \\\"../lib/StringUtils.sol\\\";\\nimport \\\"../lib/ECDSA.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\n\\n/**\\n * @title Tiny ERC721\\n *\\n * @notice Tiny ERC721 defines an NFT with a very small (up to 32 bits) ID space.\\n *      ERC721 enumeration support requires additional writes to the storage:\\n *      - when transferring a token in order to update the NFT collections of\\n *        the previous and next owners,\\n *      - when minting/burning a token in order to update global NFT collection\\n *\\n * @notice Reducing NFT ID space to 32 bits allows\\n *      - to eliminate the need to have and to write to two additional storage mappings\\n *        (also achievable with the 48 bits ID space)\\n *      - for batch minting optimization by writing 8 tokens instead of 5 at once into\\n *        global/local collections\\n *\\n * @notice This smart contract is designed to be inherited by concrete implementations,\\n *      which are expected to define token metadata, auxiliary functions to access the metadata,\\n *      and explicitly define token minting interface, which should be built on top\\n *      of current smart contract internal interface\\n *\\n * @notice Fully ERC721-compatible with all optional interfaces implemented (metadata, enumeration),\\n *      see https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev ERC721: contract has passed adopted OpenZeppelin ERC721 tests\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/ERC721.behavior.js\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/extensions/ERC721URIStorage.test.js\\n *\\n * @dev A note on token URI: there are major differences on how token URI behaves comparing to Zeppelin impl:\\n *      1. A token URI can be set for non-existing token for pre-allocation purposes,\\n *         still the URI will be deleted once token is burnt\\n *      2. If token URI is set, base URI has no affect on the token URI, the two are not concatenated,\\n *         base URI is used to construct the token URI only if the latter was not explicitly set\\n *\\n * @dev Supports EIP-712 powered permits - permit() - approve() with signature.\\n *      Supports EIP-712 powered operator permits - permitForAll() - setApprovalForAll() with signature.\\n *\\n * @dev EIP712 Domain:\\n *      name: AliERC721v1\\n *      version: not in use, omitted (name already contains version)\\n *      chainId: EIP-155 chain id\\n *      verifyingContract: deployed contract address\\n *      salt: permitNonces[owner], where owner is an address which allows operation on their tokens\\n *\\n * @dev Permit type:\\n *      owner: address\\n *      operator: address\\n *      tokenId: uint256\\n *      nonce: uint256\\n *      deadline: uint256\\n *\\n * @dev Permit typeHash:\\n *        keccak256(\\\"Permit(address owner,address operator,uint256 tokenId,uint256 nonce,uint256 deadline)\\\")\\n *\\n * @dev PermitForAll type:\\n *      owner: address\\n *      operator: address\\n *      approved: bool\\n *      nonce: uint256\\n *      deadline: uint256\\n *\\n * @dev PermitForAll typeHash:\\n *        keccak256(\\\"PermitForAll(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)\\\")\\n *\\n * @dev See https://eips.ethereum.org/EIPS/eip-712\\n * @dev See usage examples in tests: erc721_permits.js\\n */\\nabstract contract TinyERC721 is ERC721Enumerable, ERC721Metadata, WithBaseURI, MintableERC721, BurnableERC721, AccessControl {\\n\\t// enable push32 optimization for uint32[]\\n\\tusing ArrayUtils for uint32[];\\n\\n\\t/**\\n\\t * @dev Smart contract unique identifier, a random number\\n\\t *\\n\\t * @dev Should be regenerated each time smart contact source code is changed\\n\\t *      and changes smart contract itself is to be redeployed\\n\\t *\\n\\t * @dev Generated using https://www.random.org/bytes/\\n\\t * @dev Example value: 0xdbdd2b4ff38a8516da0b8e7ae93288b5e2fed0c92fb051cee90ccf4e4ec9736e\\n\\t */\\n\\tfunction TOKEN_UID() external view virtual returns(uint256);\\n\\n\\t/**\\n\\t * @notice ERC-20 compatible descriptive name for a collection of NFTs in this contract\\n\\t *\\n\\t * @inheritdoc ERC721Metadata\\n\\t */\\n\\tstring public override name;\\n\\n\\t/**\\n\\t * @notice ERC-20 compatible abbreviated name for a collection of NFTs in this contract\\n\\t *\\n\\t * @inheritdoc ERC721Metadata\\n\\t */\\n\\tstring public override symbol;\\n\\n\\t/**\\n\\t * @notice Current implementation includes a function `decimals` that returns uint8(0)\\n\\t *      to be more compatible with ERC-20\\n\\t *\\n\\t * @dev ERC20 compliant token decimals is equal to zero since ERC721 token is non-fungible\\n\\t *      and therefore non-divisible\\n\\t */\\n\\tuint8 public constant decimals = 0;\\n\\n\\t/**\\n\\t * @notice Ownership information for all the tokens in existence\\n\\t *\\n\\t * @dev Maps `Token ID => Token ID Global Index | Token ID Local Index | Token Owner Address`, where\\n\\t *      - Token ID Global Index denotes Token ID index in the array of all the tokens,\\n\\t *      - Token ID Local Index denotes Token ID index in the array of all the tokens owned by the owner,\\n\\t *      - Token ID indexes are 32 bits long,\\n\\t *      - `|` denotes bitwise concatenation of the values\\n\\t * @dev Token Owner Address for a given Token ID is lower 160 bits of the mapping value\\n\\t */\\n\\tmapping(uint256 => uint256) internal tokens;\\n\\n\\t/**\\n\\t * @notice Enumerated collections of the tokens owned by particular owners\\n\\t *\\n\\t * @dev We call these collections \\\"Local\\\" token collections\\n\\t *\\n\\t * @dev Maps `Token Owner Address => Owned Token IDs Array`\\n\\t *\\n\\t * @dev Token owner balance is the length of their token collection:\\n\\t *      `balanceOf(owner) = collections[owner].length`\\n\\t */\\n\\tmapping(address => uint32[]) internal collections;\\n\\n\\t/**\\n\\t * @notice An array of all the tokens in existence\\n\\t *\\n\\t * @dev We call this collection \\\"Global\\\" token collection\\n\\t *\\n\\t * @dev Array with all Token IDs, used for enumeration\\n\\t *\\n\\t * @dev Total token supply `tokenSupply` is the length of this collection:\\n\\t *      `totalSupply() = allTokens.length`\\n\\t */\\n\\tuint32[] internal allTokens;\\n\\n\\t/**\\n\\t * @notice Addresses approved by token owners to transfer their tokens\\n\\t *\\n\\t * @dev `Maps Token ID => Approved Address`, where\\n\\t *      Approved Address is an address allowed transfer ownership for the token\\n\\t *      defined by Token ID\\n\\t */\\n\\tmapping(uint256 => address) internal approvals;\\n\\n\\t/**\\n\\t * @notice Addresses approved by token owners to transfer all their tokens\\n\\t *\\n\\t * @dev Maps `Token Owner Address => Operator Address => Approval State` - true/false (approved/not), where\\n\\t *      - Token Owner Address is any address which may own tokens or not,\\n\\t *      - Operator Address is any other address which may own tokens or not,\\n\\t *      - Approval State is a flag indicating if Operator Address is allowed to\\n\\t *        transfer tokens owned by Token Owner Address o their behalf\\n\\t */\\n\\tmapping(address => mapping(address => bool)) internal approvedOperators;\\n\\n\\t/**\\n\\t * @dev A record of nonces for signing/validating signatures in EIP-712 based\\n\\t *      `permit` and `permitForAll` functions\\n\\t *\\n\\t * @dev Each time the nonce is used, it is increased by one, meaning reordering\\n\\t *      of the EIP-712 transactions is not possible\\n\\t *\\n\\t * @dev Inspired by EIP-2612 extension for ERC20 token standard\\n\\t *\\n\\t * @dev Maps token owner address => token owner nonce\\n\\t */\\n\\tmapping(address => uint256) public permitNonces;\\n\\n\\t/**\\n\\t * @dev Base URI is used to construct ERC721Metadata.tokenURI as\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\n\\t *\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\n\\t *      will have an URI https://api.com/token/1\\n\\t *\\n\\t * @dev If token URI is set with `setTokenURI()` it will be returned as is via `tokenURI()`\\n\\t */\\n\\tstring public override baseURI = \\\"\\\";\\n\\n\\t/**\\n\\t * @dev Optional mapping for token URIs to be returned as is when `tokenURI()`\\n\\t *      is called; if mapping doesn't exist for token, the URI is constructed\\n\\t *      as `base URI + token ID`, where plus (+) denotes string concatenation\\n\\t */\\n\\tmapping(uint256 => string) internal _tokenURIs;\\n\\n\\t/**\\n\\t * @dev 32 bit token ID space is optimal for batch minting in batches of size 8\\n\\t *      8 * 32 = 256 - single storage slot in global/local collection(s)\\n\\t */\\n\\tuint8 public constant BATCH_SIZE_MULTIPLIER = 8;\\n\\n\\t/**\\n\\t * @notice Enables ERC721 transfers of the tokens\\n\\t *      (transfer by the token owner himself)\\n\\t * @dev Feature FEATURE_TRANSFERS must be enabled in order for\\n\\t *      `transferFrom()` function to succeed when executed by token owner\\n\\t */\\n\\tuint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\\n\\n\\t/**\\n\\t * @notice Enables ERC721 transfers on behalf\\n\\t *      (transfer by someone else on behalf of token owner)\\n\\t * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\\n\\t *      `transferFrom()` function to succeed whe executed by approved operator\\n\\t * @dev Token owner must call `approve()` or `setApprovalForAll()`\\n\\t *      first to authorize the transfer on behalf\\n\\t */\\n\\tuint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\\n\\n\\t/**\\n\\t * @notice Enables token owners to burn their own tokens\\n\\t *\\n\\t * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\n\\t *      `burn()` function to succeed when called by token owner\\n\\t */\\n\\tuint32 public constant FEATURE_OWN_BURNS = 0x0000_0008;\\n\\n\\t/**\\n\\t * @notice Enables approved operators to burn tokens on behalf of their owners\\n\\t *\\n\\t * @dev Feature FEATURE_BURNS_ON_BEHALF must be enabled in order for\\n\\t *      `burn()` function to succeed when called by approved operator\\n\\t */\\n\\tuint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0010;\\n\\n\\t/**\\n\\t * @notice Enables approvals on behalf (permits via an EIP712 signature)\\n\\t * @dev Feature FEATURE_PERMITS must be enabled in order for\\n\\t *      `permit()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_PERMITS = 0x0000_0200;\\n\\n\\t/**\\n\\t * @notice Enables operator approvals on behalf (permits for all via an EIP712 signature)\\n\\t * @dev Feature FEATURE_OPERATOR_PERMITS must be enabled in order for\\n\\t *      `permitForAll()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_OPERATOR_PERMITS = 0x0000_0400;\\n\\n\\t/**\\n\\t * @notice Token creator is responsible for creating (minting)\\n\\t *      tokens to an arbitrary address\\n\\t * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\n\\t *      (calling `mint` function)\\n\\t */\\n\\tuint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\\n\\n\\t/**\\n\\t * @notice Token destroyer is responsible for destroying (burning)\\n\\t *      tokens owned by an arbitrary address\\n\\t * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\\n\\t *      (calling `burn` function)\\n\\t */\\n\\tuint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\\n\\n\\t/**\\n\\t * @notice URI manager is responsible for managing base URI\\n\\t *      part of the token URI ERC721Metadata interface\\n\\t *\\n\\t * @dev Role ROLE_URI_MANAGER allows updating the base URI\\n\\t *      (executing `setBaseURI` function)\\n\\t */\\n\\tuint32 public constant ROLE_URI_MANAGER = 0x0010_0000;\\n\\n\\t/**\\n\\t * @notice EIP-712 contract's domain typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t *\\n\\t * @dev Note: we do not include version into the domain typehash/separator,\\n\\t *      it is implied version is concatenated to the name field, like \\\"AliERC721v1\\\"\\n\\t */\\n\\t// keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\")\\n\\tbytes32 public constant DOMAIN_TYPEHASH = 0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866;\\n\\n\\t/**\\n\\t * @notice EIP-712 contract's domain separator,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\n\\t *      note: we specify contract version in its name\\n\\t */\\n\\tfunction DOMAIN_SEPARATOR() public view returns(bytes32) {\\n\\t\\t// build the EIP-712 contract domain separator, see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\n\\t\\t// note: we specify contract version in its name\\n\\t\\treturn keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\\\"AliERC721v1\\\")), block.chainid, address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice EIP-712 permit (EIP-2612) struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"Permit(address owner,address operator,uint256 tokenId,uint256 nonce,uint256 deadline)\\\")\\n\\tbytes32 public constant PERMIT_TYPEHASH = 0xee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d29;\\n\\n\\t/**\\n\\t * @notice EIP-712 permitForAll (EIP-2612) struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"PermitForAll(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)\\\")\\n\\tbytes32 public constant PERMIT_FOR_ALL_TYPEHASH = 0x47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee;\\n\\n\\t/**\\n\\t * @dev Fired in setBaseURI()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param _oldVal old _baseURI value\\n\\t * @param _newVal new _baseURI value\\n\\t */\\n\\tevent BaseURIUpdated(address indexed _by, string _oldVal, string _newVal);\\n\\n\\t/**\\n\\t * @dev Fired in setTokenURI()\\n\\t *\\n\\t * @param _by an address which executed update\\n\\t * @param _tokenId token ID which URI was updated\\n\\t * @param _oldVal old _baseURI value\\n\\t * @param _newVal new _baseURI value\\n\\t */\\n\\tevent TokenURIUpdated(address indexed _by, uint256 _tokenId, string _oldVal, string _newVal);\\n\\n\\t/**\\n\\t * @dev Constructs/deploys ERC721 instance with the name and symbol specified\\n\\t *\\n\\t * @param _name name of the token to be accessible as `name()`,\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\n\\t * @param _symbol token symbol to be accessible as `symbol()`,\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\n\\t */\\n\\tconstructor(string memory _name, string memory _symbol) {\\n\\t\\t// set the name\\n\\t\\tname = _name;\\n\\n\\t\\t// set the symbol\\n\\t\\tsymbol = _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Verifies if token is transferable (i.e. can change ownership, allowed to be transferred);\\n\\t *      The default behaviour is to always allow transfer if token exists\\n\\t *\\n\\t * @dev Implementations may modify the default behaviour based on token metadata\\n\\t *      if required\\n\\t *\\n\\t * @param _tokenId ID of the token to check if it's transferable\\n\\t * @return true if token is transferable, false otherwise\\n\\t */\\n\\tfunction isTransferable(uint256 _tokenId) public view virtual returns(bool) {\\n\\t\\t// validate token existence\\n\\t\\trequire(exists(_tokenId), \\\"token doesn't exist\\\");\\n\\n\\t\\t// generic implementation returns true if token exists\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t *\\n\\t * @inheritdoc MintableERC721\\n\\t *\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) public override view returns(bool) {\\n\\t\\t// read ownership information and return a check if it's not zero (set)\\n\\t\\treturn tokens[_tokenId] != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC165\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n\\t\\t// construct the interface support from required and optional ERC721 interfaces\\n\\t\\treturn interfaceId == type(ERC165).interfaceId\\n\\t\\t\\t|| interfaceId == type(ERC721).interfaceId\\n\\t\\t\\t|| interfaceId == type(ERC721Metadata).interfaceId\\n\\t\\t\\t|| interfaceId == type(ERC721Enumerable).interfaceId\\n\\t\\t\\t|| interfaceId == type(MintableERC721).interfaceId\\n\\t\\t\\t|| interfaceId == type(BurnableERC721).interfaceId;\\n\\t}\\n\\n\\t// ===== Start: ERC721 Metadata =====\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates base URI used to construct\\n\\t *      ERC721Metadata.tokenURI\\n\\t *\\n\\t * @dev Requires executor to have ROLE_URI_MANAGER permission\\n\\t *\\n\\t * @param _baseURI new base URI to set\\n\\t */\\n\\tfunction setBaseURI(string memory _baseURI) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit BaseURIUpdated(msg.sender, baseURI, _baseURI);\\n\\n\\t\\t// and update base URI\\n\\t\\tbaseURI = _baseURI;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns token URI if it was previously set with `setTokenURI`,\\n\\t *      otherwise constructs it as base URI + token ID\\n\\t *\\n\\t * @inheritdoc ERC721Metadata\\n\\t */\\n\\tfunction tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n\\t\\t// verify token exists\\n\\t\\trequire(exists(_tokenId), \\\"token doesn't exist\\\");\\n\\n\\t\\t// read the token URI for the token specified\\n\\t\\tstring memory _tokenURI = _tokenURIs[_tokenId];\\n\\n\\t\\t// if token URI is set\\n\\t\\tif(bytes(_tokenURI).length > 0) {\\n\\t\\t\\t// just return it\\n\\t\\t\\treturn _tokenURI;\\n\\t\\t}\\n\\n\\t\\t// if base URI is not set\\n\\t\\tif(bytes(baseURI).length == 0) {\\n\\t\\t\\t// return an empty string\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t}\\n\\n\\t\\t// otherwise concatenate base URI + token ID\\n\\t\\treturn StringUtils.concat(baseURI, StringUtils.itoa(_tokenId, 10));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the token URI for the token defined by its ID\\n\\t *\\n\\t * @param _tokenId an ID of the token to set URI for\\n\\t * @param _tokenURI token URI to set\\n\\t */\\n\\tfunction setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// we do not verify token existence: we want to be able to\\n\\t\\t// preallocate token URIs before tokens are actually minted\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit TokenURIUpdated(msg.sender, _tokenId, _tokenURIs[_tokenId], _tokenURI);\\n\\n\\t\\t// and update token URI\\n\\t\\t_tokenURIs[_tokenId] = _tokenURI;\\n\\t}\\n\\n\\t// ===== End: ERC721 Metadata =====\\n\\n\\t// ===== Start: ERC721, ERC721Enumerable Getters (view functions) =====\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction balanceOf(address _owner) public view override returns (uint256) {\\n\\t\\t// check `_owner` address is set\\n\\t\\trequire(_owner != address(0), \\\"zero address\\\");\\n\\n\\t\\t// derive owner balance for the their owned tokens collection\\n\\t\\t// as the length of that collection\\n\\t\\treturn collections[_owner].length;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction ownerOf(uint256 _tokenId) public view override returns (address) {\\n\\t\\t// derive ownership information of the token from the ownership mapping\\n\\t\\t// by extracting lower 160 bits of the mapping value as an address\\n\\t\\taddress owner = address(uint160(tokens[_tokenId]));\\n\\n\\t\\t// verify owner/token exists\\n\\t\\trequire(owner != address(0), \\\"token doesn't exist\\\");\\n\\n\\t\\t// return owner address\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Enumerable\\n\\t */\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\t// derive total supply value from the array of all existing tokens\\n\\t\\t// as the length of this array\\n\\t\\treturn allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Enumerable\\n\\t */\\n\\tfunction tokenByIndex(uint256 _index) public view override returns (uint256) {\\n\\t\\t// index out of bounds check\\n\\t\\trequire(_index < totalSupply(), \\\"index out of bounds\\\");\\n\\n\\t\\t// find the token ID requested and return\\n\\t\\treturn allTokens[_index];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Enumerable\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) public view override returns (uint256) {\\n\\t\\t// index out of bounds check\\n\\t\\trequire(_index < balanceOf(_owner), \\\"index out of bounds\\\");\\n\\n\\t\\t// find the token ID requested and return\\n\\t\\treturn collections[_owner][_index];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction getApproved(uint256 _tokenId) public view override returns (address) {\\n\\t\\t// verify token specified exists\\n\\t\\trequire(exists(_tokenId), \\\"token doesn't exist\\\");\\n\\n\\t\\t// read the approval value and return\\n\\t\\treturn approvals[_tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction isApprovedForAll(address _owner, address _operator) public view override returns (bool) {\\n\\t\\t// read the approval state value and return\\n\\t\\treturn approvedOperators[_owner][_operator];\\n\\t}\\n\\n\\t// ===== End: ERC721, ERC721Enumerable Getters (view functions) =====\\n\\n\\t// ===== Start: ERC721 mutative functions (transfers, approvals) =====\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public override {\\n\\t\\t// delegate call to unsafe transfer on behalf `transferFrom()`\\n\\t\\ttransferFrom(_from, _to, _tokenId);\\n\\n\\t\\t// if receiver `_to` is a smart contract\\n\\t\\tif(AddressUtils.isContract(_to)) {\\n\\t\\t\\t// check it supports ERC721 interface - execute onERC721Received()\\n\\t\\t\\tbytes4 response = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\\n\\n\\t\\t\\t// expected response is ERC721TokenReceiver(_to).onERC721Received.selector\\n\\t\\t\\t// bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n\\t\\t\\trequire(response == ERC721TokenReceiver(_to).onERC721Received.selector, \\\"invalid onERC721Received response\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) public override {\\n\\t\\t// delegate call to overloaded `safeTransferFrom()`, set data to \\\"\\\"\\n\\t\\tsafeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public override {\\n\\t\\t// if `_from` is equal to sender, require transfers feature to be enabled\\n\\t\\t// otherwise require transfers on behalf feature to be enabled\\n\\t\\trequire(_from == msg.sender && isFeatureEnabled(FEATURE_TRANSFERS)\\n\\t\\t     || _from != msg.sender && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\\n\\t\\t        _from == msg.sender? \\\"transfers are disabled\\\": \\\"transfers on behalf are disabled\\\");\\n\\n\\t\\t// validate destination address is set\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\n\\n\\t\\t// validate token ownership, which also\\n\\t\\t// validates token existence under the hood\\n\\t\\trequire(_from == ownerOf(_tokenId), \\\"access denied\\\");\\n\\n\\t\\t// verify operator (transaction sender) is either token owner,\\n\\t\\t// or is approved by the token owner to transfer this particular token,\\n\\t\\t// or is approved by the token owner to transfer any of his tokens\\n\\t\\trequire(_from == msg.sender || msg.sender == getApproved(_tokenId) || isApprovedForAll(_from, msg.sender), \\\"access denied\\\");\\n\\n\\t\\t// transfer is not allowed for a locked token\\n\\t\\trequire(isTransferable(_tokenId), \\\"locked token\\\");\\n\\n\\t\\t// if required, move token ownership,\\n\\t\\t// update old and new owner's token collections accordingly:\\n\\t\\tif(_from != _to) {\\n\\t\\t\\t// remove token from old owner's collection (also clears approval)\\n\\t\\t\\t__removeLocal(_tokenId);\\n\\t\\t\\t// add token to the new owner's collection\\n\\t\\t\\t__addLocal(_tokenId, _to);\\n\\t\\t}\\n\\t\\t// even if no real changes are required, approval needs to be erased\\n\\t\\telse {\\n\\t\\t\\t// clear token approval (also emits an Approval event)\\n\\t\\t\\t__clearApproval(_from, _tokenId);\\n\\t\\t}\\n\\n\\t\\t// fire ERC721 transfer event\\n\\t\\temit Transfer(_from, _to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction approve(address _approved, uint256 _tokenId) public override {\\n\\t\\t// make an internal approve - delegate to `__approve`\\n\\t\\t__approve(msg.sender, _approved, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Powers the meta transaction for `approve` - EIP-712 signed `permit`\\n\\t *\\n\\t * @dev Approves address called `_operator` to transfer token `_tokenId`\\n\\t *      on behalf of the `_owner`\\n\\t *\\n\\t * @dev Zero `_operator` address indicates there is no approved address,\\n\\t *      and effectively removes an approval for the token specified\\n\\t *\\n\\t * @dev `_owner` must own token `_tokenId` to grant the permission\\n\\t * @dev Throws if `_operator` is a self address (`_owner`),\\n\\t *      or if `_tokenId` doesn't exist\\n\\t *\\n\\t * @param _owner owner of the token `_tokenId` to set approval on behalf of\\n\\t * @param _operator an address approved by the token owner\\n\\t *      to spend token `_tokenId` on its behalf\\n\\t * @param _tokenId token ID operator `_approved` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t */\\n\\tfunction __approve(address _owner, address _operator, uint256 _tokenId) private {\\n\\t\\t// get token owner address\\n\\t\\taddress owner = ownerOf(_tokenId);\\n\\n\\t\\t// approving owner address itself doesn't make sense and is not allowed\\n\\t\\trequire(_operator != owner, \\\"self approval\\\");\\n\\n\\t\\t// only token owner or/and approved operator can set the approval\\n\\t\\trequire(_owner == owner || isApprovedForAll(owner, _owner), \\\"access denied\\\");\\n\\n\\t\\t// update the approval\\n\\t\\tapprovals[_tokenId] = _operator;\\n\\n\\t\\t// emit an event\\n\\t\\temit Approval(owner, _operator, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction setApprovalForAll(address _operator, bool _approved) public override {\\n\\t\\t// make an internal approve - delegate to `__approveForAll`\\n\\t\\t__approveForAll(msg.sender, _operator, _approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Powers the meta transaction for `setApprovalForAll` - EIP-712 signed `permitForAll`\\n\\t *\\n\\t * @dev Approves address called `_operator` to transfer any tokens\\n\\t *      on behalf of the `_owner`\\n\\t *\\n\\t * @dev `_owner` must not necessarily own any tokens to grant the permission\\n\\t * @dev Throws if `_operator` is a self address (`_owner`)\\n\\t *\\n\\t * @param _owner owner of the tokens to set approval on behalf of\\n\\t * @param _operator an address to add to the set of authorized operators, i.e.\\n\\t *      an address approved by the token owner to spend tokens on its behalf\\n\\t * @param _approved true if the operator is approved, false to revoke approval\\n\\t */\\n\\tfunction __approveForAll(address _owner, address _operator, bool _approved) private {\\n\\t\\t// approving tx sender address itself doesn't make sense and is not allowed\\n\\t\\trequire(_operator != _owner, \\\"self approval\\\");\\n\\n\\t\\t// update the approval\\n\\t\\tapprovedOperators[_owner][_operator] = _approved;\\n\\n\\t\\t// emit an event\\n\\t\\temit ApprovalForAll(_owner, _operator, _approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Clears approval for a given token owned by a given owner,\\n\\t *      emits an Approval event\\n\\t *\\n\\t * @dev Unsafe: doesn't check the validity of inputs (must be kept private),\\n\\t *      assuming the check is done by the caller\\n\\t *      - token existence\\n\\t *      - token ownership\\n\\t *\\n\\t * @param _owner token owner to be logged into Approved event as is\\n\\t * @param _tokenId token ID to erase approval for and to log into Approved event as is\\n\\t */\\n\\tfunction __clearApproval(address _owner, uint256 _tokenId) internal {\\n\\t\\t// clear token approval\\n\\t\\tdelete approvals[_tokenId];\\n\\t\\t// emit an ERC721 Approval event:\\n\\t\\t// \\\"When a Transfer event emits, this also indicates that the approved\\n\\t\\t// address for that NFT (if any) is reset to none.\\\"\\n\\t\\temit Approval(_owner, address(0), _tokenId);\\n\\t}\\n\\n\\t// ===== End: ERC721 mutative functions (transfers, approvals) =====\\n\\n\\t// ===== Start: Meta-transactions Support =====\\n\\n\\t/**\\n\\t * @notice Change or reaffirm the approved address for an NFT on behalf\\n\\t *\\n\\t * @dev Executes approve(_operator, _tokenId) on behalf of the token owner\\n\\t *      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signer\\n\\t *\\n\\t * @dev Sets the `_tokenId` as the allowance of `_operator` over `_owner` token,\\n\\t *      given `_owner` EIP-712 signed approval\\n\\t *\\n\\t * @dev Emits `Approval` event in the same way as `approve` does\\n\\t *\\n\\t * @dev Requires:\\n\\t *     - `_operator` to be non-zero address\\n\\t *     - `_exp` to be a timestamp in the future\\n\\t *     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`\\n\\t *        over the EIP712-formatted function arguments.\\n\\t *     - the signature to use `_owner` current nonce (see `permitNonces`).\\n\\t *\\n\\t * @dev For more information on the signature format, see the\\n\\t *      https://eips.ethereum.org/EIPS/eip-2612#specification\\n\\t *\\n\\t * @param _owner owner of the token to set approval on behalf of,\\n\\t *      an address which signed the EIP-712 message\\n\\t * @param _operator new approved NFT controller\\n\\t * @param _tokenId token ID to approve\\n\\t * @param _exp signature expiration time (unix timestamp)\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction permit(address _owner, address _operator, uint256 _tokenId, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\\n\\t\\t// verify permits are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_PERMITS), \\\"permits are disabled\\\");\\n\\n\\t\\t// derive signer of the EIP712 Permit message, and\\n\\t\\t// update the nonce for that particular signer to avoid replay attack!!! ----------->>> \\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\n\\t\\taddress signer = __deriveSigner(abi.encode(PERMIT_TYPEHASH, _owner, _operator, _tokenId, permitNonces[_owner]++, _exp), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(signer == _owner, \\\"invalid signature\\\");\\n\\t\\trequire(block.timestamp < _exp, \\\"signature expired\\\");\\n\\n\\t\\t// delegate call to `__approve` - execute the logic required\\n\\t\\t__approve(_owner, _operator, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n\\t *      all of owner's assets - on behalf\\n\\t *\\n\\t * @dev Executes setApprovalForAll(_operator, _approved) on behalf of the owner\\n\\t *      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signer\\n\\t *\\n\\t * @dev Sets the `_operator` as the token operator for `_owner` tokens,\\n\\t *      given `_owner` EIP-712 signed approval\\n\\t *\\n\\t * @dev Emits `ApprovalForAll` event in the same way as `setApprovalForAll` does\\n\\t *\\n\\t * @dev Requires:\\n\\t *     - `_operator` to be non-zero address\\n\\t *     - `_exp` to be a timestamp in the future\\n\\t *     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`\\n\\t *        over the EIP712-formatted function arguments.\\n\\t *     - the signature to use `_owner` current nonce (see `permitNonces`).\\n\\t *\\n\\t * @dev For more information on the signature format, see the\\n\\t *      https://eips.ethereum.org/EIPS/eip-2612#specification\\n\\t *\\n\\t * @param _owner owner of the tokens to set approval on behalf of,\\n\\t *      an address which signed the EIP-712 message\\n\\t * @param _operator an address to add to the set of authorized operators, i.e.\\n\\t *      an address approved by the token owner to spend tokens on its behalf\\n\\t * @param _approved true if the operator is approved, false to revoke approval\\n\\t * @param _exp signature expiration time (unix timestamp)\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction permitForAll(address _owner, address _operator, bool _approved, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\\n\\t\\t// verify permits are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_OPERATOR_PERMITS), \\\"operator permits are disabled\\\");\\n\\n\\t\\t// derive signer of the EIP712 PermitForAll message, and\\n\\t\\t// update the nonce for that particular signer to avoid replay attack!!! --------------------->>> \\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\n\\t\\taddress signer = __deriveSigner(abi.encode(PERMIT_FOR_ALL_TYPEHASH, _owner, _operator, _approved, permitNonces[_owner]++, _exp), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(signer == _owner, \\\"invalid signature\\\");\\n\\t\\trequire(block.timestamp < _exp, \\\"signature expired\\\");\\n\\n\\t\\t// delegate call to `__approve` - execute the logic required\\n\\t\\t__approveForAll(_owner, _operator, _approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to verify structured EIP712 message signature and derive its signer\\n\\t *\\n\\t * @param abiEncodedTypehash abi.encode of the message typehash together with all its parameters\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction __deriveSigner(bytes memory abiEncodedTypehash, uint8 v, bytes32 r, bytes32 s) private view returns(address) {\\n\\t\\t// build the EIP-712 hashStruct of the message\\n\\t\\tbytes32 hashStruct = keccak256(abiEncodedTypehash);\\n\\n\\t\\t// calculate the EIP-712 digest \\\"\\\\x19\\\\x01\\\" \\u2016 domainSeparator \\u2016 hashStruct(message)\\n\\t\\tbytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hashStruct));\\n\\n\\t\\t// recover the address which signed the message with v, r, s\\n\\t\\taddress signer = ECDSA.recover(digest, v, r, s);\\n\\n\\t\\t// check if the signer address isn't invalid\\n\\t\\t// according to EIP3009 spec, zero address must be rejected when using ecrecover\\n\\t\\trequire(signer != address(0), \\\"invalid signature\\\");\\n\\n\\t\\t// return the signer address derived from the signature\\n\\t\\treturn signer;\\n\\t}\\n\\n\\t// ===== End: Meta-transactions Support =====\\n\\n\\t// ===== Start: mint/burn support =====\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) public override {\\n\\t\\t// delegate to unsafe mint\\n\\t\\tmint(_to, _tokenId);\\n\\n\\t\\t// make it safe: execute `onERC721Received`\\n\\n\\t\\t// if receiver `_to` is a smart contract\\n\\t\\tif(AddressUtils.isContract(_to)) {\\n\\t\\t\\t// check it supports ERC721 interface - execute onERC721Received()\\n\\t\\t\\tbytes4 response = ERC721TokenReceiver(_to).onERC721Received(msg.sender, address(0), _tokenId, _data);\\n\\n\\t\\t\\t// expected response is ERC721TokenReceiver(_to).onERC721Received.selector\\n\\t\\t\\t// bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n\\t\\t\\trequire(response == ERC721TokenReceiver(_to).onERC721Received.selector, \\\"invalid onERC721Received response\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) public override {\\n\\t\\t// delegate to `safeMint` with empty data\\n\\t\\tsafeMint(_to, _tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) public override {\\n\\t\\t// delegate to unsafe mint\\n\\t\\tmintBatch(_to, _tokenId, n);\\n\\n\\t\\t// make it safe: execute `onERC721Received`\\n\\n\\t\\t// if receiver `_to` is a smart contract\\n\\t\\tif(AddressUtils.isContract(_to)) {\\n\\t\\t\\t// onERC721Received: for each token minted\\n\\t\\t\\tfor(uint256 i = 0; i < n; i++) {\\n\\t\\t\\t\\t// check it supports ERC721 interface - execute onERC721Received()\\n\\t\\t\\t\\tbytes4 response = ERC721TokenReceiver(_to).onERC721Received(msg.sender, address(0), _tokenId + i, _data);\\n\\n\\t\\t\\t\\t// expected response is ERC721TokenReceiver(_to).onERC721Received.selector\\n\\t\\t\\t\\t// bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n\\t\\t\\t\\trequire(response == ERC721TokenReceiver(_to).onERC721Received.selector, \\\"invalid onERC721Received response\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) public override {\\n\\t\\t// delegate to `safeMint` with empty data\\n\\t\\tsafeMintBatch(_to, _tokenId, n, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMint` instead of `mint`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) public override {\\n\\t\\t// check if caller has sufficient permissions to mint tokens\\n\\t\\trequire(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"access denied\\\");\\n\\n\\t\\t// verify the inputs\\n\\n\\t\\t// verify destination address is set\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\n\\t\\t// verify the token ID is \\\"tiny\\\" (32 bits long at most)\\n\\t\\trequire(uint32(_tokenId) == _tokenId, \\\"token ID overflow\\\");\\n\\n\\t\\t// verify token doesn't yet exist\\n\\t\\trequire(!exists(_tokenId), \\\"already minted\\\");\\n\\n\\t\\t// create token ownership record,\\n\\t\\t// add token to `allTokens` and new owner's collections\\n\\t\\t// add token to both local and global collections (enumerations)\\n\\t\\t__addToken(_tokenId, _to);\\n\\n\\t\\t// fire ERC721 transfer event\\n\\t\\temit Transfer(address(0), _to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMintBatch` instead of `mintBatch`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _tokenId ID of the first token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) public override {\\n\\t\\t// check if caller has sufficient permissions to mint tokens\\n\\t\\trequire(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"access denied\\\");\\n\\n\\t\\t// verify the inputs\\n\\n\\t\\t// verify destination address is set\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\n\\t\\t// verify n is set properly\\n\\t\\trequire(n > 1, \\\"n is too small\\\");\\n\\t\\t// verify the token ID is \\\"tiny\\\" (32 bits long at most)\\n\\t\\trequire(uint32(_tokenId) == _tokenId, \\\"token ID overflow\\\");\\n\\t\\trequire(uint32(_tokenId + n - 1) == _tokenId + n - 1, \\\"n-th token ID overflow\\\");\\n\\n\\t\\t// verification: for each token to be minted\\n\\t\\tfor(uint256 i = 0; i < n; i++) {\\n\\t\\t\\t// verify token doesn't yet exist\\n\\t\\t\\trequire(!exists(_tokenId + i), \\\"already minted\\\");\\n\\t\\t}\\n\\n\\t\\t// create token ownership records,\\n\\t\\t// add tokens to `allTokens` and new owner's collections\\n\\t\\t// add tokens to both local and global collections (enumerations)\\n\\t\\t__addTokens(_to, _tokenId, n);\\n\\n\\t\\t// events: for each token minted\\n\\t\\tfor(uint256 i = 0; i < n; i++) {\\n\\t\\t\\t// fire ERC721 transfer event\\n\\t\\t\\temit Transfer(address(0), _to, _tokenId + i);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys the token with token ID specified\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_DESTROYER` permission\\n\\t *      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabled\\n\\t *\\n\\t * @dev Can be disabled by the contract creator forever by disabling\\n\\t *      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking\\n\\t *      its own roles to burn tokens and to enable burning features\\n\\t *\\n\\t * @param _tokenId ID of the token to burn\\n\\t */\\n\\tfunction burn(uint256 _tokenId) public override {\\n\\t\\t// read token owner data\\n\\t\\t// verifies token exists under the hood\\n\\t\\taddress _from = ownerOf(_tokenId);\\n\\n\\t\\t// check if caller has sufficient permissions to burn tokens\\n\\t\\t// and if not - check for possibility to burn own tokens or to burn on behalf\\n\\t\\tif(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\\n\\t\\t\\t// if `_from` is equal to sender, require own burns feature to be enabled\\n\\t\\t\\t// otherwise require burns on behalf feature to be enabled\\n\\t\\t\\trequire(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\\n\\t\\t\\t     || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\\n\\t\\t\\t        _from == msg.sender? \\\"burns are disabled\\\": \\\"burns on behalf are disabled\\\");\\n\\n\\t\\t\\t// verify sender is either token owner, or approved by the token owner to burn tokens\\n\\t\\t\\trequire(_from == msg.sender || msg.sender == getApproved(_tokenId) || isApprovedForAll(_from, msg.sender), \\\"access denied\\\");\\n\\t\\t}\\n\\n\\t\\t// remove token ownership record (also clears approval),\\n\\t\\t// remove token from both local and global collections\\n\\t\\t__removeToken(_tokenId);\\n\\n\\t\\t// delete token URI mapping\\n\\t\\tdelete _tokenURIs[_tokenId];\\n\\n\\t\\t// fire ERC721 transfer event\\n\\t\\temit Transfer(_from, address(0), _tokenId);\\n\\t}\\n\\n\\t// ===== End: mint/burn support =====\\n\\n\\t// ----- Start: auxiliary internal/private functions -----\\n\\n\\t/**\\n\\t * @dev Adds token to the new owner's collection (local),\\n\\t *      used internally to transfer existing tokens, to mint new\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _tokenId token ID to add\\n\\t * @param _to new owner address to add token to\\n\\t */\\n\\tfunction __addLocal(uint256 _tokenId, address _to) internal virtual {\\n\\t\\t// get a reference to the collection where token goes to\\n\\t\\tuint32[] storage destination = collections[_to];\\n\\n\\t\\t// update local index and ownership, do not change global index\\n\\t\\ttokens[_tokenId] = tokens[_tokenId]\\n\\t\\t\\t//  |unused |global | local | ownership information (address)      |\\n\\t\\t\\t& 0x00000000FFFFFFFF000000000000000000000000000000000000000000000000\\n\\t\\t\\t| uint192(destination.length) << 160 | uint160(_to);\\n\\n\\t\\t// push token into the local collection\\n\\t\\tdestination.push(uint32(_tokenId));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Add token to both local and global collections (enumerations),\\n\\t *      used internally to mint new tokens\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _tokenId token ID to add\\n\\t * @param _to new owner address to add token to\\n\\t */\\n\\tfunction __addToken(uint256 _tokenId, address _to) internal virtual {\\n\\t\\t// get a reference to the collection where token goes to\\n\\t\\tuint32[] storage destination = collections[_to];\\n\\n\\t\\t// update token global and local indexes, ownership\\n\\t\\ttokens[_tokenId] = uint224(allTokens.length) << 192 | uint192(destination.length) << 160 | uint160(_to);\\n\\n\\t\\t// push token into the collection\\n\\t\\tdestination.push(uint32(_tokenId));\\n\\n\\t\\t// push it into the global `allTokens` collection (enumeration)\\n\\t\\tallTokens.push(uint32(_tokenId));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Add tokens to both local and global collections (enumerations),\\n\\t *      used internally to mint new tokens in batches\\n\\t *\\n\\t * @dev Token IDs to be added: [_tokenId, _tokenId + n)\\n\\t *      n is expected to be greater or equal 2, but this is not checked\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _to new owner address to add token to\\n\\t * @param _tokenId first token ID to add\\n\\t * @param n how many tokens to add, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction __addTokens(address _to, uint256 _tokenId, uint256 n) internal virtual {\\n\\t\\t// get a reference to the collection where tokens go to\\n\\t\\tuint32[] storage destination = collections[_to];\\n\\n\\t\\t// for each token to be added\\n\\t\\tfor(uint256 i = 0; i < n; i++) {\\n\\t\\t\\t// update token global and local indexes, ownership\\n\\t\\t\\ttokens[_tokenId + i] = uint224(allTokens.length + i) << 192 | uint192(destination.length + i) << 160 | uint160(_to);\\n\\t\\t}\\n\\n\\t\\t// push tokens into the local collection\\n\\t\\tdestination.push32(uint32(_tokenId), uint32(n));\\n\\t\\t// push tokens into the global `allTokens` collection (enumeration)\\n\\t\\tallTokens.push32(uint32(_tokenId), uint32(n));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Removes token from owner's local collection,\\n\\t *      used internally to transfer or burn existing tokens\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _tokenId token ID to remove\\n\\t */\\n\\tfunction __removeLocal(uint256 _tokenId) internal virtual {\\n\\t\\t// read token data, containing global and local indexes, owner address\\n\\t\\tuint256 token = tokens[_tokenId];\\n\\n\\t\\t// get a reference to the token's owner collection (local)\\n\\t\\tuint32[] storage source = collections[address(uint160(token))];\\n\\n\\t\\t// token index within the collection\\n\\t\\tuint32 i = uint32(token >> 160);\\n\\n\\t\\t// get an ID of the last token in the collection\\n\\t\\tuint32 sourceId = source[source.length - 1];\\n\\n\\t\\t// if the token we're to remove from the collection is not the last one,\\n\\t\\t// we need to move last token in the collection into index `i`\\n\\t\\tif(i != source.length - 1) {\\n\\t\\t\\t// we put the last token in the collection to the position released\\n\\n\\t\\t\\t// update last token local index to point to proper place in the collection\\n\\t\\t\\t// preserve global index and ownership info\\n\\t\\t\\ttokens[sourceId] = tokens[sourceId]\\n\\t\\t\\t\\t//  |unused |global | local | ownership information (address)      |\\n\\t\\t\\t\\t& 0x00000000FFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t\\t\\t\\t| uint192(i) << 160;\\n\\n\\t\\t\\t// put it into the position `i` within the collection\\n\\t\\t\\tsource[i] = sourceId;\\n\\t\\t}\\n\\n\\t\\t// trim the collection by removing last element\\n\\t\\tsource.pop();\\n\\n\\t\\t// clear token approval (also emits an Approval event)\\n\\t\\t__clearApproval(address(uint160(token)), _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Removes token from both local and global collections (enumerations),\\n\\t *      used internally to burn existing tokens\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _tokenId token ID to remove\\n\\t */\\n\\tfunction __removeToken(uint256 _tokenId) internal virtual {\\n\\t\\t// remove token from owner's (local) collection first\\n\\t\\t__removeLocal(_tokenId);\\n\\n\\t\\t// token index within the global collection\\n\\t\\tuint32 i = uint32(tokens[_tokenId] >> 192);\\n\\n\\t\\t// delete the token\\n\\t\\tdelete tokens[_tokenId];\\n\\n\\t\\t// get an ID of the last token in the collection\\n\\t\\tuint32 lastId = allTokens[allTokens.length - 1];\\n\\n\\t\\t// if the token we're to remove from the collection is not the last one,\\n\\t\\t// we need to move last token in the collection into index `i`\\n\\t\\tif(i != allTokens.length - 1) {\\n\\t\\t\\t// we put the last token in the collection to the position released\\n\\n\\t\\t\\t// update last token global index to point to proper place in the collection\\n\\t\\t\\t// preserve local index and ownership info\\n\\t\\t\\ttokens[lastId] = tokens[lastId]\\n\\t\\t\\t\\t//  |unused |global | local | ownership information (address)      |\\n\\t\\t\\t\\t& 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t\\t\\t\\t| uint224(i) << 192;\\n\\n\\t\\t\\t// put it into the position `i` within the collection\\n\\t\\t\\tallTokens[i] = lastId;\\n\\t\\t}\\n\\n\\t\\t// trim the collection by removing last element\\n\\t\\tallTokens.pop();\\n\\t}\\n\\n\\t// ----- End: auxiliary internal/private functions -----\\n}\\n\",\"keccak256\":\"0x07168b9d3bd28bb389cbdc6eed5bd0a07c7dd8e0540372255f6b19aee9c661eb\",\"license\":\"MIT\"},\"contracts/token/WhitelabelNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RoyalERC721.sol\\\";\\n\\n/**\\n * @title Whitelabel NFT\\n *\\n * @notice Whitelabel NFT is a non-upgradeable ERC721 standard implementation\\n *\\n * @dev Whitelabel NFT is a Tiny ERC721, it supports minting and burning,\\n *      its token ID space is limited to 32 bits\\n *\\n * @dev Whitelabel NFT supports EIP-2981 royalties on NFT secondary sales,\\n *      and OpenSea royalties\\n */\\ncontract WhitelabelNFT is RoyalERC721 {\\n\\t/**\\n\\t * @inheritdoc TinyERC721\\n\\t */\\n\\tuint256 public constant override TOKEN_UID = 0x50c16d79fc64e49cf554b52a1bdf271f1a30a6999329cb1b4642bb24597f282f;\\n\\n\\t/**\\n\\t * @dev Constructs/deploys Whitelabel NFT instance\\n\\t *      with the name and symbol defined during the deployment\\n\\t */\\n\\tconstructor(string memory _name, string memory _symbol) RoyalERC721(_name, _symbol) AccessControl(msg.sender) {}\\n}\\n\",\"keccak256\":\"0xd0e6b16c0560bcd7d21e3a9ad04c37603c7bab6a9213669f2246d056317d2032\",\"license\":\"MIT\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22; // require with message (0.4.22), pure/view modifiers (0.4.16), hardhat (0.4.11)\\n\\n/**\\n * @title Role-based Access Control (RBAC)\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice This contract is inherited by other contracts requiring the role-based access control (RBAC)\\n *      protection for the restricted access functions\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n */\\nabstract contract AccessControl {\\n\\t/**\\n\\t * @dev Privileged addresses with defined roles/permissions\\n\\t * @dev In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t *\\n\\t * @dev We keep the mapping private to prevent direct writes to it from the inheriting\\n\\t *      contracts, `getRole()` and `updateRole()` functions should be used instead\\n\\t */\\n\\tmapping(address => uint256) internal userRoles; // TODO: restrict to \\\"private\\\"\\n\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 internal constant FULL_PRIVILEGES_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param operator address which was granted/revoked permissions\\n\\t * @param requested permissions requested\\n\\t * @param assigned permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed operator, uint256 requested, uint256 assigned);\\n\\n\\t/**\\n\\t * @notice Function modifier making a function defined as public behave as restricted\\n\\t *      (so that only a pre-configured set of accounts can execute it)\\n\\t *\\n\\t * @param role the role transaction executor is required to have;\\n\\t *      the function throws an \\\"access denied\\\" exception if this condition is not met\\n\\t */\\n\\tmodifier restrictedTo(uint256 role) {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(role), \\\"access denied\\\");\\n\\n\\t\\t// execute the rest of the function\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Creates an access control instance, setting the contract owner to have full privileges\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges\\n\\t */\\n\\tconstructor(address _owner) internal { // visibility modifier is required to be compilable with 0.6.x\\n\\t\\t// grant owner full privileges\\n\\t\\t__setRole(_owner, FULL_PRIVILEGES_MASK, FULL_PRIVILEGES_MASK);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns (uint256) {\\n\\t\\t// features are stored in 'this' address mapping of `userRoles`\\n\\t\\treturn getRole(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reads the permissions (role) for a given user from the `userRoles` mapping\\n\\t *      (privileged addresses with defined roles/permissions)\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Having a simple getter instead of making the mapping public\\n\\t *      allows enforcing the encapsulation of the mapping and protects from\\n\\t *      writing to it directly in the inheriting smart contracts\\n\\t *\\n\\t * @param operator address of a user to read permissions for,\\n\\t *      or self address to read global features of the smart contract\\n\\t */\\n\\tfunction getRole(address operator) public view returns(uint256) {\\n\\t\\t// read the value from `userRoles` and return\\n\\t\\treturn userRoles[operator];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\t__setRole(operator, role, _evaluateBy(msg.sender, getRole(operator), role));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction _evaluateBy(address operator, uint256 target, uint256 desired) internal view returns (uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = getRole(operator);\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @dev Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(getRole(operator), required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the `assignedRole` role to the operator, logs both `requestedRole` and `actualRole`\\n\\t *\\n\\t * @dev Unsafe:\\n\\t *      provides direct write access to `userRoles` mapping without any security checks,\\n\\t *      doesn't verify the executor (msg.sender) permissions,\\n\\t *      must be kept private at all times\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param requestedRole bitmask representing a set of permissions requested\\n\\t *      to be enabled/disabled for a user specified, used only to be logged into event\\n\\t * @param assignedRole bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified, used to update the mapping and to be logged into event\\n\\t */\\n\\tfunction __setRole(address operator, uint256 requestedRole, uint256 assignedRole) private {\\n\\t\\t// assign the role to the operator\\n\\t\\tuserRoles[operator] = assignedRole;\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(operator, requestedRole, assignedRole);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) private pure returns (bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n}\\n\",\"keccak256\":\"0xead88b7b0eb45d94cc5b4e70c3702c47b8a1728dc806e43e19c1d40e706fa099\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600060809081526009906200001a9082620001eb565b50600c80546001600160b01b0319167502ee379e2119f6e0d6088537da82968e2a7ea178ddcf1790556040805160808101909152605080825262003af26020830139600d906200006b9082620001eb565b503480156200007957600080fd5b5060405162003b4238038062003b428339810160408190526200009c916200036e565b8181818133620000b08160001980620000ee565b506001620000bf8382620001eb565b506002620000ce8282620001eb565b5050600b80546001600160a01b0319163317905550620003d89350505050565b6001600160a01b0383166000818152602081815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200017157607f821691505b6020821081036200019257634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001e657600081815260208120601f850160051c81016020861015620001c15750805b601f850160051c820191505b81811015620001e257828155600101620001cd565b5050505b505050565b81516001600160401b0381111562000207576200020762000146565b6200021f816200021884546200015c565b8462000198565b602080601f8311600181146200025757600084156200023e5750858301515b600019600386901b1c1916600185901b178555620001e2565b600085815260208120601f198616915b82811015620002885788860151825594840194600190910190840162000267565b5085821015620002a75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082601f830112620002c957600080fd5b81516001600160401b0380821115620002e657620002e662000146565b604051601f8301601f19908116603f0116810190828211818310171562000311576200031162000146565b816040528381526020925086838588010111156200032e57600080fd5b600091505b8382101562000352578582018301518183018401529082019062000333565b83821115620003645760008385830101525b9695505050505050565b600080604083850312156200038257600080fd5b82516001600160401b03808211156200039a57600080fd5b620003a886838701620002b7565b93506020850151915080821115620003bf57600080fd5b50620003ce85828601620002b7565b9150509250929050565b61370a80620003e86000396000f3fe608060405234801561001057600080fd5b50600436106103e65760003560e01c8063725f36261161020a578063ae682e2e11610125578063cc2da7ff116100b8578063e8a3d48511610087578063e8a3d485146108ef578063e985e9c5146108f7578063f2fde38b1461090a578063f63c2f821461091d578063fcc2c0781461092557600080fd5b8063cc2da7ff146108b5578063d505accf146108bf578063d5bb7f67146108d2578063e62cac76146108e557600080fd5b8063b88d4fde116100f4578063b88d4fde14610874578063c0d6568d14610887578063c688d6931461088f578063c87b56dd146108a257600080fd5b8063ae682e2e14610839578063af65e2a814610844578063b256456914610857578063b29a2f441461086a57600080fd5b80639032c7261161019d5780639fbc87131161016c5780639fbc8713146107ed578063a144819414610800578063a22cb46514610813578063ae5b102e1461082657600080fd5b80639032c726146107b7578063938e3d7b146107ca57806395d89b41146107dd57806398b622a2146107e557600080fd5b80638a71bb2d116101d95780638a71bb2d1461076a5780638d4e57e6146107925780638da5cb5b1461079c5780638f6fba8c146107af57600080fd5b8063725f362614610714578063768bfc9a146107275780638832e6e3146107305780638a114e131461074357600080fd5b80632f745c59116103055780634f558e7911610298578063615879111161026757806361587911146106c05780636352211e146106d35780636c0360eb146106e657806370a08231146106ee57806372504a241461070157600080fd5b80634f558e79146106515780634f6ccce71461067357806355f804b314610686578063585956d61461069957600080fd5b806340c10f19116102d457806340c10f19146105ef57806342842e0e1461060257806342966c6814610615578063442767331461062857600080fd5b80632f745c591461059357806330adf81f146105a6578063313ce567146105cd5780633644e515146105e757600080fd5b8063191d0ffc1161037d5780632a55205a1161034c5780632a55205a146105175780632b521416146105495780632e81aaea1461055e5780632f54bf6e1461057157600080fd5b8063191d0ffc146104b55780631a0b04ea146104d557806320606b70146104dd57806323b872dd1461050457600080fd5b80630dc5b424116103b95780630dc5b4241461046857806314b7b4e114610486578063162094c41461049057806318160ddd146104a357600080fd5b806301ffc9a7146103eb57806306fdde0314610413578063081812fc14610428578063095ea7b314610453575b600080fd5b6103fe6103f9366004612ce7565b610938565b60405190151581526020015b60405180910390f35b61041b610963565b60405161040a9190612d5c565b61043b610436366004612d6f565b6109f1565b6040516001600160a01b03909116815260200161040a565b610466610461366004612da4565b610a41565b005b61047161020081565b60405163ffffffff909116815260200161040a565b6104716210000081565b61046661049e366004612e71565b610a50565b6005545b60405190815260200161040a565b6104a76104c3366004612eb8565b60086020526000908152604090205481565b610471600881565b6104a77f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b610466610512366004612ed3565b610ae0565b61052a610525366004612f0f565b610da2565b604080516001600160a01b03909316835260208301919091520161040a565b306000908152602081905260409020546104a7565b61046661056c366004612f31565b610de3565b6103fe61057f366004612eb8565b600b546001600160a01b0391821691161490565b6104a76105a1366004612da4565b610ff8565b6104a77fee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d2981565b6105d5600081565b60405160ff909116815260200161040a565b6104a761109d565b6104666105fd366004612da4565b611135565b610466610610366004612ed3565b61131c565b610466610623366004612d6f565b611337565b6104a7610636366004612eb8565b6001600160a01b031660009081526020819052604090205490565b6103fe61065f366004612d6f565b600090815260036020526040902054151590565b6104a7610681366004612d6f565b6114d1565b610466610694366004612f64565b61155d565b6104a77f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee81565b6104666106ce366004612f31565b6115d5565b61043b6106e1366004612d6f565b6115f0565b61041b611625565b6104a76106fc366004612eb8565b611632565b61046661070f366004612fa1565b611676565b6103fe610722366004612d6f565b6117b6565b61047161040081565b61046661073e366004612fdf565b6117d2565b6104a77f50c16d79fc64e49cf554b52a1bdf271f1a30a6999329cb1b4642bb24597f282f81565b600c5461077f90600160a01b900461ffff1681565b60405161ffff909116815260200161040a565b6104716201000081565b600b5461043b906001600160a01b031681565b610471600281565b6104666107c5366004613057565b61188d565b6104666107d8366004612f64565b611a15565b61041b611a8e565b6105d5600881565b600c5461043b906001600160a01b031681565b61046661080e366004612da4565b611a9b565b6104666108213660046130c8565b611ab5565b610466610834366004612da4565b611ac0565b6104a7600160ff1b81565b6104666108523660046130fb565b611b45565b6103fe610865366004612d6f565b611c2e565b6104716220000081565b61046661088236600461315c565b611c61565b610471600181565b6103fe61089d366004612da4565b611d1d565b61041b6108b0366004612d6f565b611d46565b6104716240000081565b6104666108cd3660046131ac565b611ee7565b6104666108e0366004612d6f565b612047565b6104716202000081565b61041b612054565b6103fe6109053660046131fa565b612061565b610466610918366004612eb8565b61208f565b610471601081565b6103fe610933366004612d6f565b61214f565b60006001600160e01b0319821663152a902d60e11b148061095d575061095d8261215b565b92915050565b6001805461097090613224565b80601f016020809104026020016040519081016040528092919081815260200182805461099c90613224565b80156109e95780601f106109be576101008083540402835291602001916109e9565b820191906000526020600020905b8154815290600101906020018083116109cc57829003601f168201915b505050505081565b600081815260036020526040812054610a255760405162461bcd60e51b8152600401610a1c9061325e565b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b610a4c3383836121fd565b5050565b610a5c6210000061214f565b610a785760405162461bcd60e51b8152600401610a1c9061328b565b6000828152600a602052604090819020905133917f7989fff0ffb34805e8b3574b890ed6157f85a384c69b9a0c04991b24cabb825991610abb918691869061332f565b60405180910390a26000828152600a60205260409020610adb82826133b2565b505050565b6001600160a01b03831633148015610afd5750610afd60016117b6565b80610b2157506001600160a01b0383163314801590610b215750610b2160026117b6565b6001600160a01b0384163314610b6c576040518060400160405280602081526020017f7472616e7366657273206f6e20626568616c66206172652064697361626c6564815250610b9c565b604051806040016040528060168152602001751d1c985b9cd9995c9cc8185c9948191a5cd8589b195960521b8152505b90610bba5760405162461bcd60e51b8152600401610a1c9190612d5c565b506001600160a01b038216610be15760405162461bcd60e51b8152600401610a1c90613472565b610bea816115f0565b6001600160a01b0316836001600160a01b031614610c1a5760405162461bcd60e51b8152600401610a1c9061328b565b6001600160a01b038316331480610c4a5750610c35816109f1565b6001600160a01b0316336001600160a01b0316145b80610c5a5750610c5a8333612061565b610c765760405162461bcd60e51b8152600401610a1c9061328b565b610c7f81611c2e565b610cba5760405162461bcd60e51b815260206004820152600c60248201526b3637b1b5b2b2103a37b5b2b760a11b6044820152606401610a1c565b816001600160a01b0316836001600160a01b031614610d6457610cdc816122f9565b6001600160a01b0382166000818152600460208181526040808420805487865260038452918520805460a09390931b63ffffffff60a01b1663ffffffff60c01b90931692909217909517905583546001810185559383529091206008830401805460079093169091026101000a63ffffffff8181021990931692841602919091179055610d6e565b610d6e8382612457565b80826001600160a01b0316846001600160a01b03166000805160206136b583398151915260405160405180910390a4505050565b600c5460009081906001600160a01b0381169061271090610dce90600160a01b900461ffff16866134ae565b610dd891906134e3565b915091509250929050565b610def6201000061214f565b610e0b5760405162461bcd60e51b8152600401610a1c9061328b565b6001600160a01b038316610e315760405162461bcd60e51b8152600401610a1c90613472565b60018111610e725760405162461bcd60e51b815260206004820152600e60248201526d1b881a5cc81d1bdbc81cdb585b1b60921b6044820152606401610a1c565b818263ffffffff1614610ebb5760405162461bcd60e51b8152602060048201526011602482015270746f6b656e204944206f766572666c6f7760781b6044820152606401610a1c565b6001610ec782846134f7565b610ed1919061350f565b6001610edd83856134f7565b610ee7919061350f565b63ffffffff1614610f335760405162461bcd60e51b81526020600482015260166024820152756e2d746820746f6b656e204944206f766572666c6f7760501b6044820152606401610a1c565b60005b81811015610f9b57610f4b61065f82856134f7565b15610f895760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610a1c565b80610f9381613526565b915050610f36565b50610fa78383836124ac565b60005b81811015610ff257610fbc81846134f7565b6040516001600160a01b038616906000906000805160206136b5833981519152908290a480610fea81613526565b915050610faa565b50505050565b600061100383611632565b82106110475760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b6044820152606401610a1c565b6001600160a01b03831660009081526004602052604090208054839081106110715761107161353f565b6000918252602090912060088204015460079091166004026101000a900463ffffffff16905092915050565b604080518082018252600b81526a416c69455243373231763160a81b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f9db81778f201f995555fc8eeb2867a4c0457608d47c4c8fc0fc8052b03664ff681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6111416201000061214f565b61115d5760405162461bcd60e51b8152600401610a1c9061328b565b6001600160a01b0382166111835760405162461bcd60e51b8152600401610a1c90613472565b808163ffffffff16146111cc5760405162461bcd60e51b8152602060048201526011602482015270746f6b656e204944206f766572666c6f7760781b6044820152606401610a1c565b600081815260036020526040902054156112195760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610a1c565b6001600160a01b03821660008181526004602081815260408084208054600580548988526003865293872060a09290921b63ffffffff60a01b1660c09490941b63ffffffff60c01b1693909317909617909555845460018082018755958552918420600880840490910180546007948516860261010090810a63ffffffff81810219909316838c169182021790935584549889018555939096527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db091870491909101805496909316909302900a92830219909316910217905560405181906001600160a01b038416906000906000805160206136b5833981519152908290a45050565b610adb83838360405180602001604052806000815250611c61565b6000611342826115f0565b90506113506202000061214f565b611487576001600160a01b03811633148015611371575061137160086117b6565b8061139557506001600160a01b0381163314801590611395575061139560106117b6565b6001600160a01b03821633146113e0576040518060400160405280601c81526020017f6275726e73206f6e20626568616c66206172652064697361626c65640000000081525061140c565b60405180604001604052806012815260200171189d5c9b9cc8185c9948191a5cd8589b195960721b8152505b9061142a5760405162461bcd60e51b8152600401610a1c9190612d5c565b506001600160a01b03811633148061145b5750611446826109f1565b6001600160a01b0316336001600160a01b0316145b8061146b575061146b8133612061565b6114875760405162461bcd60e51b8152600401610a1c9061328b565b61149082612571565b6000828152600a602052604081206114a791612c83565b60405182906000906001600160a01b038416906000805160206136b5833981519152908390a45050565b60006114dc60055490565b82106115205760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b6044820152606401610a1c565b600582815481106115335761153361353f565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1692915050565b6115696210000061214f565b6115855760405162461bcd60e51b8152600401610a1c9061328b565b336001600160a01b03167fac455070f26733cc10c09e4389a74bf73bdb676d730ee31215c31d20daa880056009836040516115c1929190613555565b60405180910390a26009610a4c82826133b2565b610adb83838360405180602001604052806000815250611b45565b6000818152600360205260408120546001600160a01b03811661095d5760405162461bcd60e51b8152600401610a1c9061325e565b6009805461097090613224565b60006001600160a01b03821661165a5760405162461bcd60e51b8152600401610a1c90613472565b506001600160a01b031660009081526004602052604090205490565b6116826220000061214f565b61169e5760405162461bcd60e51b8152600401610a1c9061328b565b6001600160a01b0382161515806116b7575061ffff8116155b6116f65760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610a1c565b6127108161ffff16111561174c5760405162461bcd60e51b815260206004820152601f60248201527f726f79616c74792070657263656e7461676520657863656564732031303025006044820152606401610a1c565b600c80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff8516908102919091179092556040519182529033907f9ca088b6b695032bcd5d1fa450e8fa2773391294f09e3710ace940c4ae8cffac9060200160405180910390a35050565b3060009081526020819052604081205461095d905b8316831490565b6117dc8383611135565b823b15610adb57604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061181890339085908890889060040161357a565b6020604051808303816000875af1158015611837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185b91906135ad565b90506001600160e01b03198116630a85bd0160e11b14610ff25760405162461bcd60e51b8152600401610a1c906135ca565b6118986104006117b6565b6118e45760405162461bcd60e51b815260206004820152601d60248201527f6f70657261746f72207065726d697473206172652064697361626c65640000006044820152606401610a1c565b6001600160a01b0387166000908152600860205260408120805461198a917f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee918b918b918b918761193483613526565b909155506040805160208101969096526001600160a01b03948516908601529290911660608401521515608083015260a082015260c0810187905260e0015b6040516020818303038152906040528585856126bd565b9050876001600160a01b0316816001600160a01b0316146119bd5760405162461bcd60e51b8152600401610a1c9061360b565b844210611a005760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610a1c565b611a0b888888612749565b5050505050505050565b611a216210000061214f565b611a3d5760405162461bcd60e51b8152600401610a1c9061328b565b600d611a4982826133b2565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed82604051611a839190612d5c565b60405180910390a250565b6002805461097090613224565b610a4c8282604051806020016040528060008152506117d2565b610a4c338383612749565b611acd600160ff1b61214f565b611ae95760405162461bcd60e51b8152600401610a1c9061328b565b610a4c8282611b4033611b11876001600160a01b031660009081526020819052604090205490565b6001600160a01b0391909116600090815260208190526040902054600019808818821618908716919091171690565b612807565b611b50848484610de3565b833b15610ff25760005b82811015611c275760006001600160a01b03861663150b7a023383611b7f868a6134f7565b876040518563ffffffff1660e01b8152600401611b9f949392919061357a565b6020604051808303816000875af1158015611bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be291906135ad565b90506001600160e01b03198116630a85bd0160e11b14611c145760405162461bcd60e51b8152600401610a1c906135ca565b5080611c1f81613526565b915050611b5a565b5050505050565b600081815260036020526040812054611c595760405162461bcd60e51b8152600401610a1c9061325e565b506001919050565b611c6c848484610ae0565b823b15610ff257604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611ca890339089908890889060040161357a565b6020604051808303816000875af1158015611cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ceb91906135ad565b90506001600160e01b03198116630a85bd0160e11b14611c275760405162461bcd60e51b8152600401610a1c906135ca565b6001600160a01b038216600090815260208190526040812054611d3f906117cb565b9392505050565b600081815260036020526040902054606090611d745760405162461bcd60e51b8152600401610a1c9061325e565b6000828152600a602052604081208054611d8d90613224565b80601f0160208091040260200160405190810160405280929190818152602001828054611db990613224565b8015611e065780601f10611ddb57610100808354040283529160200191611e06565b820191906000526020600020905b815481529060010190602001808311611de957829003601f168201915b50505050509050600081511115611e1d5792915050565b60098054611e2a90613224565b9050600003611e49575050604080516020810190915260008152919050565b611d3f60098054611e5990613224565b80601f0160208091040260200160405190810160405280929190818152602001828054611e8590613224565b8015611ed25780601f10611ea757610100808354040283529160200191611ed2565b820191906000526020600020905b815481529060010190602001808311611eb557829003601f168201915b5050505050611ee285600a61285f565b612a45565b611ef26102006117b6565b611f355760405162461bcd60e51b81526020600482015260146024820152731c195c9b5a5d1cc8185c9948191a5cd8589b195960621b6044820152606401610a1c565b6001600160a01b03871660009081526008602052604081208054611fc6917fee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d29918b918b918b9187611f8583613526565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001611973565b9050876001600160a01b0316816001600160a01b031614611ff95760405162461bcd60e51b8152600401610a1c9061360b565b84421061203c5760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610a1c565b611a0b8888886121fd565b6120513082611ac0565b50565b600d805461097090613224565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61209b6240000061214f565b6120b75760405162461bcd60e51b8152600401610a1c9061328b565b600b546040516001600160a01b0380841692169033907fb9312e2100469bd44e3f762c248f4dcc8d7788906fabf34f79db45920c37e26990600090a4600b546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600061095d3383611d1d565b60006001600160e01b031982166301ffc9a760e01b148061218c57506001600160e01b031982166380ac58cd60e01b145b806121a757506001600160e01b03198216635b5e139f60e01b145b806121c257506001600160e01b0319821663780e9d6360e01b145b806121dd57506001600160e01b03198216633197b5d160e21b145b8061095d57506001600160e01b03198216630852cd8d60e31b1492915050565b6000612208826115f0565b9050806001600160a01b0316836001600160a01b03160361225b5760405162461bcd60e51b815260206004820152600d60248201526c1cd95b1988185c1c1c9bdd985b609a1b6044820152606401610a1c565b806001600160a01b0316846001600160a01b0316148061228057506122808185612061565b61229c5760405162461bcd60e51b8152600401610a1c9061328b565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a450505050565b6000818152600360209081526040808320546001600160a01b03811684526004909252822080549192909160a084901c919083906123399060019061350f565b815481106123495761234961353f565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905060018380549050612382919061350f565b8263ffffffff16146124135763ffffffff81811660009081526003602052604090208054600167ffffffff0000000160a01b031663ffffffff60a01b60a086901b161790558354829185919085169081106123df576123df61353f565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505b8280548061242357612423613636565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a02191690559055611c2784865b60008181526006602052604080822080546001600160a01b0319169055518291906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a45050565b6001600160a01b0383166000908152600460205260408120905b828110156125595781546001600160a01b0386169060a0906124e99084906134f7565b6001600160c01b0316901b6001600160c01b031660c08360058054905061251091906134f7565b6001600160e01b0316901b17176001600160e01b031660036000838761253691906134f7565b81526020810191909152604001600020558061255181613526565b9150506124c6565b50612565818484612a71565b610ff260058484612a71565b61257a816122f9565b60008181526003602052604081208054908290556005805460c09290921c92916125a69060019061350f565b815481106125b6576125b661353f565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905060016005805490506125f0919061350f565b8263ffffffff16146126795763ffffffff818116600090815260036020526040902080546001600160c01b031663ffffffff60c01b60c086901b1617905560058054839285169081106126455761264561353f565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505b600580548061268a5761268a613636565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a02191690559055505050565b83516020850120600090816126d061109d565b60405161190160f01b6020820152602281019190915260428101839052606201604051602081830303815290604052805190602001209050600061271682888888612b29565b90506001600160a01b03811661273e5760405162461bcd60e51b8152600401610a1c9061360b565b979650505050505050565b826001600160a01b0316826001600160a01b03160361279a5760405162461bcd60e51b815260206004820152600d60248201526c1cd95b1988185c1c1c9bdd985b609a1b6044820152606401610a1c565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166000818152602081815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b60608160ff166002148061287657508160ff166008145b8061288457508160ff16600a145b8061289257508160ff166010145b61289b57600080fd5b826000036128c157506040805180820190915260018152600360fc1b602082015261095d565b60408051610100808252610120820190925260009160208201818036833701905050905060005b84156129765760006128fd60ff86168761364c565b9050600061290c826030613660565b9050600a8260ff161061292757612924600782613660565b90505b8060f81b84848061293790613526565b9550815181106129495761294961353f565b60200101906001600160f81b031916908160001a90535061296d60ff8716886134e3565b965050506128e8565b60008167ffffffffffffffff81111561299157612991612dce565b6040519080825280601f01601f1916602001820160405280156129bb576020820181803683370190505b509050600091505b8051821015612a3c578282815181106129de576129de61353f565b602001015160f81c60f81b8160018484516129f9919061350f565b612a03919061350f565b81518110612a1357612a1361353f565b60200101906001600160f81b031916908160001a90535081612a3481613526565b9250506129c3565b95945050505050565b60608282604051602001612a5a929190613685565b604051602081830303815290604052905092915050565b82548181018455836000526008810460206000200160088206915081151915612ad6578160080383811115612aa35750825b815460005b82811015612ac7578681018582016020021b9190911790600101612aa8565b50825593840193909203916001015b600091505b82821015611c2757600883811115612af05750825b6000805b82811015612b13578481018701602082021b9190911790600101612af4565b5080600885048401555050600882019150612adb565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612b9b5760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c756500000000006044820152606401610a1c565b8360ff16601b1480612bb057508360ff16601c145b612bfc5760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c756500000000006044820152606401610a1c565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612c50573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612a3c5760405162461bcd60e51b8152600401610a1c9061360b565b508054612c8f90613224565b6000825580601f10612c9f575050565b601f01602090049060005260206000209081019061205191905b80821115612ccd5760008155600101612cb9565b5090565b6001600160e01b03198116811461205157600080fd5b600060208284031215612cf957600080fd5b8135611d3f81612cd1565b60005b83811015612d1f578181015183820152602001612d07565b83811115610ff25750506000910152565b60008151808452612d48816020860160208601612d04565b601f01601f19169290920160200192915050565b602081526000611d3f6020830184612d30565b600060208284031215612d8157600080fd5b5035919050565b80356001600160a01b0381168114612d9f57600080fd5b919050565b60008060408385031215612db757600080fd5b612dc083612d88565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612df557600080fd5b813567ffffffffffffffff80821115612e1057612e10612dce565b604051601f8301601f19908116603f01168101908282118183101715612e3857612e38612dce565b81604052838152866020858801011115612e5157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215612e8457600080fd5b82359150602083013567ffffffffffffffff811115612ea257600080fd5b612eae85828601612de4565b9150509250929050565b600060208284031215612eca57600080fd5b611d3f82612d88565b600080600060608486031215612ee857600080fd5b612ef184612d88565b9250612eff60208501612d88565b9150604084013590509250925092565b60008060408385031215612f2257600080fd5b50508035926020909101359150565b600080600060608486031215612f4657600080fd5b612f4f84612d88565b95602085013595506040909401359392505050565b600060208284031215612f7657600080fd5b813567ffffffffffffffff811115612f8d57600080fd5b612f9984828501612de4565b949350505050565b60008060408385031215612fb457600080fd5b612fbd83612d88565b9150602083013561ffff81168114612fd457600080fd5b809150509250929050565b600080600060608486031215612ff457600080fd5b612ffd84612d88565b925060208401359150604084013567ffffffffffffffff81111561302057600080fd5b61302c86828701612de4565b9150509250925092565b80358015158114612d9f57600080fd5b803560ff81168114612d9f57600080fd5b600080600080600080600060e0888a03121561307257600080fd5b61307b88612d88565b965061308960208901612d88565b955061309760408901613036565b9450606088013593506130ac60808901613046565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156130db57600080fd5b6130e483612d88565b91506130f260208401613036565b90509250929050565b6000806000806080858703121561311157600080fd5b61311a85612d88565b93506020850135925060408501359150606085013567ffffffffffffffff81111561314457600080fd5b61315087828801612de4565b91505092959194509250565b6000806000806080858703121561317257600080fd5b61317b85612d88565b935061318960208601612d88565b925060408501359150606085013567ffffffffffffffff81111561314457600080fd5b600080600080600080600060e0888a0312156131c757600080fd5b6131d088612d88565b96506131de60208901612d88565b955060408801359450606088013593506130ac60808901613046565b6000806040838503121561320d57600080fd5b61321683612d88565b91506130f260208401612d88565b600181811c9082168061323857607f821691505b60208210810361325857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601390820152721d1bdad95b88191bd95cdb89dd08195e1a5cdd606a1b604082015260600190565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b600081546132bf81613224565b8085526020600183811680156132dc57600181146132f657613324565b60ff1985168884015283151560051b880183019550613324565b866000528260002060005b8581101561331c5781548a8201860152908301908401613301565b890184019650505b505050505092915050565b83815260606020820152600061334860608301856132b2565b828103604084015261335a8185612d30565b9695505050505050565b601f821115610adb57600081815260208120601f850160051c8101602086101561338b5750805b601f850160051c820191505b818110156133aa57828155600101613397565b505050505050565b815167ffffffffffffffff8111156133cc576133cc612dce565b6133e0816133da8454613224565b84613364565b602080601f83116001811461341557600084156133fd5750858301515b600019600386901b1c1916600185901b1785556133aa565b600085815260208120601f198616915b8281101561344457888601518255948401946001909101908401613425565b50858210156134625787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156134c8576134c8613498565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826134f2576134f26134cd565b500490565b6000821982111561350a5761350a613498565b500190565b60008282101561352157613521613498565b500390565b60006001820161353857613538613498565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60408152600061356860408301856132b2565b8281036020840152612a3c8185612d30565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061335a90830184612d30565b6000602082840312156135bf57600080fd5b8151611d3f81612cd1565b60208082526021908201527f696e76616c6964206f6e455243373231526563656976656420726573706f6e736040820152606560f81b606082015260800190565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b634e487b7160e01b600052603160045260246000fd5b60008261365b5761365b6134cd565b500690565b600060ff821660ff84168060ff0382111561367d5761367d613498565b019392505050565b60008351613697818460208801612d04565b8351908301906136ab818360208801612d04565b0194935050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220708b1088a9343a85daba404518d31c325078b4ce543e80895c090c7e4c03785264736f6c634300080f003368747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f516d5539327738694b7063616162436f7948744d6737696976574771573267573168674152447471436d4a555776",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103e65760003560e01c8063725f36261161020a578063ae682e2e11610125578063cc2da7ff116100b8578063e8a3d48511610087578063e8a3d485146108ef578063e985e9c5146108f7578063f2fde38b1461090a578063f63c2f821461091d578063fcc2c0781461092557600080fd5b8063cc2da7ff146108b5578063d505accf146108bf578063d5bb7f67146108d2578063e62cac76146108e557600080fd5b8063b88d4fde116100f4578063b88d4fde14610874578063c0d6568d14610887578063c688d6931461088f578063c87b56dd146108a257600080fd5b8063ae682e2e14610839578063af65e2a814610844578063b256456914610857578063b29a2f441461086a57600080fd5b80639032c7261161019d5780639fbc87131161016c5780639fbc8713146107ed578063a144819414610800578063a22cb46514610813578063ae5b102e1461082657600080fd5b80639032c726146107b7578063938e3d7b146107ca57806395d89b41146107dd57806398b622a2146107e557600080fd5b80638a71bb2d116101d95780638a71bb2d1461076a5780638d4e57e6146107925780638da5cb5b1461079c5780638f6fba8c146107af57600080fd5b8063725f362614610714578063768bfc9a146107275780638832e6e3146107305780638a114e131461074357600080fd5b80632f745c59116103055780634f558e7911610298578063615879111161026757806361587911146106c05780636352211e146106d35780636c0360eb146106e657806370a08231146106ee57806372504a241461070157600080fd5b80634f558e79146106515780634f6ccce71461067357806355f804b314610686578063585956d61461069957600080fd5b806340c10f19116102d457806340c10f19146105ef57806342842e0e1461060257806342966c6814610615578063442767331461062857600080fd5b80632f745c591461059357806330adf81f146105a6578063313ce567146105cd5780633644e515146105e757600080fd5b8063191d0ffc1161037d5780632a55205a1161034c5780632a55205a146105175780632b521416146105495780632e81aaea1461055e5780632f54bf6e1461057157600080fd5b8063191d0ffc146104b55780631a0b04ea146104d557806320606b70146104dd57806323b872dd1461050457600080fd5b80630dc5b424116103b95780630dc5b4241461046857806314b7b4e114610486578063162094c41461049057806318160ddd146104a357600080fd5b806301ffc9a7146103eb57806306fdde0314610413578063081812fc14610428578063095ea7b314610453575b600080fd5b6103fe6103f9366004612ce7565b610938565b60405190151581526020015b60405180910390f35b61041b610963565b60405161040a9190612d5c565b61043b610436366004612d6f565b6109f1565b6040516001600160a01b03909116815260200161040a565b610466610461366004612da4565b610a41565b005b61047161020081565b60405163ffffffff909116815260200161040a565b6104716210000081565b61046661049e366004612e71565b610a50565b6005545b60405190815260200161040a565b6104a76104c3366004612eb8565b60086020526000908152604090205481565b610471600881565b6104a77f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b610466610512366004612ed3565b610ae0565b61052a610525366004612f0f565b610da2565b604080516001600160a01b03909316835260208301919091520161040a565b306000908152602081905260409020546104a7565b61046661056c366004612f31565b610de3565b6103fe61057f366004612eb8565b600b546001600160a01b0391821691161490565b6104a76105a1366004612da4565b610ff8565b6104a77fee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d2981565b6105d5600081565b60405160ff909116815260200161040a565b6104a761109d565b6104666105fd366004612da4565b611135565b610466610610366004612ed3565b61131c565b610466610623366004612d6f565b611337565b6104a7610636366004612eb8565b6001600160a01b031660009081526020819052604090205490565b6103fe61065f366004612d6f565b600090815260036020526040902054151590565b6104a7610681366004612d6f565b6114d1565b610466610694366004612f64565b61155d565b6104a77f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee81565b6104666106ce366004612f31565b6115d5565b61043b6106e1366004612d6f565b6115f0565b61041b611625565b6104a76106fc366004612eb8565b611632565b61046661070f366004612fa1565b611676565b6103fe610722366004612d6f565b6117b6565b61047161040081565b61046661073e366004612fdf565b6117d2565b6104a77f50c16d79fc64e49cf554b52a1bdf271f1a30a6999329cb1b4642bb24597f282f81565b600c5461077f90600160a01b900461ffff1681565b60405161ffff909116815260200161040a565b6104716201000081565b600b5461043b906001600160a01b031681565b610471600281565b6104666107c5366004613057565b61188d565b6104666107d8366004612f64565b611a15565b61041b611a8e565b6105d5600881565b600c5461043b906001600160a01b031681565b61046661080e366004612da4565b611a9b565b6104666108213660046130c8565b611ab5565b610466610834366004612da4565b611ac0565b6104a7600160ff1b81565b6104666108523660046130fb565b611b45565b6103fe610865366004612d6f565b611c2e565b6104716220000081565b61046661088236600461315c565b611c61565b610471600181565b6103fe61089d366004612da4565b611d1d565b61041b6108b0366004612d6f565b611d46565b6104716240000081565b6104666108cd3660046131ac565b611ee7565b6104666108e0366004612d6f565b612047565b6104716202000081565b61041b612054565b6103fe6109053660046131fa565b612061565b610466610918366004612eb8565b61208f565b610471601081565b6103fe610933366004612d6f565b61214f565b60006001600160e01b0319821663152a902d60e11b148061095d575061095d8261215b565b92915050565b6001805461097090613224565b80601f016020809104026020016040519081016040528092919081815260200182805461099c90613224565b80156109e95780601f106109be576101008083540402835291602001916109e9565b820191906000526020600020905b8154815290600101906020018083116109cc57829003601f168201915b505050505081565b600081815260036020526040812054610a255760405162461bcd60e51b8152600401610a1c9061325e565b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b610a4c3383836121fd565b5050565b610a5c6210000061214f565b610a785760405162461bcd60e51b8152600401610a1c9061328b565b6000828152600a602052604090819020905133917f7989fff0ffb34805e8b3574b890ed6157f85a384c69b9a0c04991b24cabb825991610abb918691869061332f565b60405180910390a26000828152600a60205260409020610adb82826133b2565b505050565b6001600160a01b03831633148015610afd5750610afd60016117b6565b80610b2157506001600160a01b0383163314801590610b215750610b2160026117b6565b6001600160a01b0384163314610b6c576040518060400160405280602081526020017f7472616e7366657273206f6e20626568616c66206172652064697361626c6564815250610b9c565b604051806040016040528060168152602001751d1c985b9cd9995c9cc8185c9948191a5cd8589b195960521b8152505b90610bba5760405162461bcd60e51b8152600401610a1c9190612d5c565b506001600160a01b038216610be15760405162461bcd60e51b8152600401610a1c90613472565b610bea816115f0565b6001600160a01b0316836001600160a01b031614610c1a5760405162461bcd60e51b8152600401610a1c9061328b565b6001600160a01b038316331480610c4a5750610c35816109f1565b6001600160a01b0316336001600160a01b0316145b80610c5a5750610c5a8333612061565b610c765760405162461bcd60e51b8152600401610a1c9061328b565b610c7f81611c2e565b610cba5760405162461bcd60e51b815260206004820152600c60248201526b3637b1b5b2b2103a37b5b2b760a11b6044820152606401610a1c565b816001600160a01b0316836001600160a01b031614610d6457610cdc816122f9565b6001600160a01b0382166000818152600460208181526040808420805487865260038452918520805460a09390931b63ffffffff60a01b1663ffffffff60c01b90931692909217909517905583546001810185559383529091206008830401805460079093169091026101000a63ffffffff8181021990931692841602919091179055610d6e565b610d6e8382612457565b80826001600160a01b0316846001600160a01b03166000805160206136b583398151915260405160405180910390a4505050565b600c5460009081906001600160a01b0381169061271090610dce90600160a01b900461ffff16866134ae565b610dd891906134e3565b915091509250929050565b610def6201000061214f565b610e0b5760405162461bcd60e51b8152600401610a1c9061328b565b6001600160a01b038316610e315760405162461bcd60e51b8152600401610a1c90613472565b60018111610e725760405162461bcd60e51b815260206004820152600e60248201526d1b881a5cc81d1bdbc81cdb585b1b60921b6044820152606401610a1c565b818263ffffffff1614610ebb5760405162461bcd60e51b8152602060048201526011602482015270746f6b656e204944206f766572666c6f7760781b6044820152606401610a1c565b6001610ec782846134f7565b610ed1919061350f565b6001610edd83856134f7565b610ee7919061350f565b63ffffffff1614610f335760405162461bcd60e51b81526020600482015260166024820152756e2d746820746f6b656e204944206f766572666c6f7760501b6044820152606401610a1c565b60005b81811015610f9b57610f4b61065f82856134f7565b15610f895760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610a1c565b80610f9381613526565b915050610f36565b50610fa78383836124ac565b60005b81811015610ff257610fbc81846134f7565b6040516001600160a01b038616906000906000805160206136b5833981519152908290a480610fea81613526565b915050610faa565b50505050565b600061100383611632565b82106110475760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b6044820152606401610a1c565b6001600160a01b03831660009081526004602052604090208054839081106110715761107161353f565b6000918252602090912060088204015460079091166004026101000a900463ffffffff16905092915050565b604080518082018252600b81526a416c69455243373231763160a81b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f9db81778f201f995555fc8eeb2867a4c0457608d47c4c8fc0fc8052b03664ff681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b6111416201000061214f565b61115d5760405162461bcd60e51b8152600401610a1c9061328b565b6001600160a01b0382166111835760405162461bcd60e51b8152600401610a1c90613472565b808163ffffffff16146111cc5760405162461bcd60e51b8152602060048201526011602482015270746f6b656e204944206f766572666c6f7760781b6044820152606401610a1c565b600081815260036020526040902054156112195760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610a1c565b6001600160a01b03821660008181526004602081815260408084208054600580548988526003865293872060a09290921b63ffffffff60a01b1660c09490941b63ffffffff60c01b1693909317909617909555845460018082018755958552918420600880840490910180546007948516860261010090810a63ffffffff81810219909316838c169182021790935584549889018555939096527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db091870491909101805496909316909302900a92830219909316910217905560405181906001600160a01b038416906000906000805160206136b5833981519152908290a45050565b610adb83838360405180602001604052806000815250611c61565b6000611342826115f0565b90506113506202000061214f565b611487576001600160a01b03811633148015611371575061137160086117b6565b8061139557506001600160a01b0381163314801590611395575061139560106117b6565b6001600160a01b03821633146113e0576040518060400160405280601c81526020017f6275726e73206f6e20626568616c66206172652064697361626c65640000000081525061140c565b60405180604001604052806012815260200171189d5c9b9cc8185c9948191a5cd8589b195960721b8152505b9061142a5760405162461bcd60e51b8152600401610a1c9190612d5c565b506001600160a01b03811633148061145b5750611446826109f1565b6001600160a01b0316336001600160a01b0316145b8061146b575061146b8133612061565b6114875760405162461bcd60e51b8152600401610a1c9061328b565b61149082612571565b6000828152600a602052604081206114a791612c83565b60405182906000906001600160a01b038416906000805160206136b5833981519152908390a45050565b60006114dc60055490565b82106115205760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b6044820152606401610a1c565b600582815481106115335761153361353f565b6000918252602090912060088204015460079091166004026101000a900463ffffffff1692915050565b6115696210000061214f565b6115855760405162461bcd60e51b8152600401610a1c9061328b565b336001600160a01b03167fac455070f26733cc10c09e4389a74bf73bdb676d730ee31215c31d20daa880056009836040516115c1929190613555565b60405180910390a26009610a4c82826133b2565b610adb83838360405180602001604052806000815250611b45565b6000818152600360205260408120546001600160a01b03811661095d5760405162461bcd60e51b8152600401610a1c9061325e565b6009805461097090613224565b60006001600160a01b03821661165a5760405162461bcd60e51b8152600401610a1c90613472565b506001600160a01b031660009081526004602052604090205490565b6116826220000061214f565b61169e5760405162461bcd60e51b8152600401610a1c9061328b565b6001600160a01b0382161515806116b7575061ffff8116155b6116f65760405162461bcd60e51b815260206004820152601060248201526f34b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610a1c565b6127108161ffff16111561174c5760405162461bcd60e51b815260206004820152601f60248201527f726f79616c74792070657263656e7461676520657863656564732031303025006044820152606401610a1c565b600c80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff8516908102919091179092556040519182529033907f9ca088b6b695032bcd5d1fa450e8fa2773391294f09e3710ace940c4ae8cffac9060200160405180910390a35050565b3060009081526020819052604081205461095d905b8316831490565b6117dc8383611135565b823b15610adb57604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061181890339085908890889060040161357a565b6020604051808303816000875af1158015611837573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185b91906135ad565b90506001600160e01b03198116630a85bd0160e11b14610ff25760405162461bcd60e51b8152600401610a1c906135ca565b6118986104006117b6565b6118e45760405162461bcd60e51b815260206004820152601d60248201527f6f70657261746f72207065726d697473206172652064697361626c65640000006044820152606401610a1c565b6001600160a01b0387166000908152600860205260408120805461198a917f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee918b918b918b918761193483613526565b909155506040805160208101969096526001600160a01b03948516908601529290911660608401521515608083015260a082015260c0810187905260e0015b6040516020818303038152906040528585856126bd565b9050876001600160a01b0316816001600160a01b0316146119bd5760405162461bcd60e51b8152600401610a1c9061360b565b844210611a005760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610a1c565b611a0b888888612749565b5050505050505050565b611a216210000061214f565b611a3d5760405162461bcd60e51b8152600401610a1c9061328b565b600d611a4982826133b2565b50336001600160a01b03167f1ca91f64ead03abb06ea28975dfbf18044ac06f9fa1cb62a54ccc905df1028ed82604051611a839190612d5c565b60405180910390a250565b6002805461097090613224565b610a4c8282604051806020016040528060008152506117d2565b610a4c338383612749565b611acd600160ff1b61214f565b611ae95760405162461bcd60e51b8152600401610a1c9061328b565b610a4c8282611b4033611b11876001600160a01b031660009081526020819052604090205490565b6001600160a01b0391909116600090815260208190526040902054600019808818821618908716919091171690565b612807565b611b50848484610de3565b833b15610ff25760005b82811015611c275760006001600160a01b03861663150b7a023383611b7f868a6134f7565b876040518563ffffffff1660e01b8152600401611b9f949392919061357a565b6020604051808303816000875af1158015611bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be291906135ad565b90506001600160e01b03198116630a85bd0160e11b14611c145760405162461bcd60e51b8152600401610a1c906135ca565b5080611c1f81613526565b915050611b5a565b5050505050565b600081815260036020526040812054611c595760405162461bcd60e51b8152600401610a1c9061325e565b506001919050565b611c6c848484610ae0565b823b15610ff257604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611ca890339089908890889060040161357a565b6020604051808303816000875af1158015611cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ceb91906135ad565b90506001600160e01b03198116630a85bd0160e11b14611c275760405162461bcd60e51b8152600401610a1c906135ca565b6001600160a01b038216600090815260208190526040812054611d3f906117cb565b9392505050565b600081815260036020526040902054606090611d745760405162461bcd60e51b8152600401610a1c9061325e565b6000828152600a602052604081208054611d8d90613224565b80601f0160208091040260200160405190810160405280929190818152602001828054611db990613224565b8015611e065780601f10611ddb57610100808354040283529160200191611e06565b820191906000526020600020905b815481529060010190602001808311611de957829003601f168201915b50505050509050600081511115611e1d5792915050565b60098054611e2a90613224565b9050600003611e49575050604080516020810190915260008152919050565b611d3f60098054611e5990613224565b80601f0160208091040260200160405190810160405280929190818152602001828054611e8590613224565b8015611ed25780601f10611ea757610100808354040283529160200191611ed2565b820191906000526020600020905b815481529060010190602001808311611eb557829003601f168201915b5050505050611ee285600a61285f565b612a45565b611ef26102006117b6565b611f355760405162461bcd60e51b81526020600482015260146024820152731c195c9b5a5d1cc8185c9948191a5cd8589b195960621b6044820152606401610a1c565b6001600160a01b03871660009081526008602052604081208054611fc6917fee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d29918b918b918b9187611f8583613526565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001611973565b9050876001600160a01b0316816001600160a01b031614611ff95760405162461bcd60e51b8152600401610a1c9061360b565b84421061203c5760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610a1c565b611a0b8888886121fd565b6120513082611ac0565b50565b600d805461097090613224565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61209b6240000061214f565b6120b75760405162461bcd60e51b8152600401610a1c9061328b565b600b546040516001600160a01b0380841692169033907fb9312e2100469bd44e3f762c248f4dcc8d7788906fabf34f79db45920c37e26990600090a4600b546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600061095d3383611d1d565b60006001600160e01b031982166301ffc9a760e01b148061218c57506001600160e01b031982166380ac58cd60e01b145b806121a757506001600160e01b03198216635b5e139f60e01b145b806121c257506001600160e01b0319821663780e9d6360e01b145b806121dd57506001600160e01b03198216633197b5d160e21b145b8061095d57506001600160e01b03198216630852cd8d60e31b1492915050565b6000612208826115f0565b9050806001600160a01b0316836001600160a01b03160361225b5760405162461bcd60e51b815260206004820152600d60248201526c1cd95b1988185c1c1c9bdd985b609a1b6044820152606401610a1c565b806001600160a01b0316846001600160a01b0316148061228057506122808185612061565b61229c5760405162461bcd60e51b8152600401610a1c9061328b565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a450505050565b6000818152600360209081526040808320546001600160a01b03811684526004909252822080549192909160a084901c919083906123399060019061350f565b815481106123495761234961353f565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905060018380549050612382919061350f565b8263ffffffff16146124135763ffffffff81811660009081526003602052604090208054600167ffffffff0000000160a01b031663ffffffff60a01b60a086901b161790558354829185919085169081106123df576123df61353f565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505b8280548061242357612423613636565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a02191690559055611c2784865b60008181526006602052604080822080546001600160a01b0319169055518291906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a45050565b6001600160a01b0383166000908152600460205260408120905b828110156125595781546001600160a01b0386169060a0906124e99084906134f7565b6001600160c01b0316901b6001600160c01b031660c08360058054905061251091906134f7565b6001600160e01b0316901b17176001600160e01b031660036000838761253691906134f7565b81526020810191909152604001600020558061255181613526565b9150506124c6565b50612565818484612a71565b610ff260058484612a71565b61257a816122f9565b60008181526003602052604081208054908290556005805460c09290921c92916125a69060019061350f565b815481106125b6576125b661353f565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16905060016005805490506125f0919061350f565b8263ffffffff16146126795763ffffffff818116600090815260036020526040902080546001600160c01b031663ffffffff60c01b60c086901b1617905560058054839285169081106126455761264561353f565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505b600580548061268a5761268a613636565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a02191690559055505050565b83516020850120600090816126d061109d565b60405161190160f01b6020820152602281019190915260428101839052606201604051602081830303815290604052805190602001209050600061271682888888612b29565b90506001600160a01b03811661273e5760405162461bcd60e51b8152600401610a1c9061360b565b979650505050505050565b826001600160a01b0316826001600160a01b03160361279a5760405162461bcd60e51b815260206004820152600d60248201526c1cd95b1988185c1c1c9bdd985b609a1b6044820152606401610a1c565b6001600160a01b03838116600081815260076020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166000818152602081815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b60608160ff166002148061287657508160ff166008145b8061288457508160ff16600a145b8061289257508160ff166010145b61289b57600080fd5b826000036128c157506040805180820190915260018152600360fc1b602082015261095d565b60408051610100808252610120820190925260009160208201818036833701905050905060005b84156129765760006128fd60ff86168761364c565b9050600061290c826030613660565b9050600a8260ff161061292757612924600782613660565b90505b8060f81b84848061293790613526565b9550815181106129495761294961353f565b60200101906001600160f81b031916908160001a90535061296d60ff8716886134e3565b965050506128e8565b60008167ffffffffffffffff81111561299157612991612dce565b6040519080825280601f01601f1916602001820160405280156129bb576020820181803683370190505b509050600091505b8051821015612a3c578282815181106129de576129de61353f565b602001015160f81c60f81b8160018484516129f9919061350f565b612a03919061350f565b81518110612a1357612a1361353f565b60200101906001600160f81b031916908160001a90535081612a3481613526565b9250506129c3565b95945050505050565b60608282604051602001612a5a929190613685565b604051602081830303815290604052905092915050565b82548181018455836000526008810460206000200160088206915081151915612ad6578160080383811115612aa35750825b815460005b82811015612ac7578681018582016020021b9190911790600101612aa8565b50825593840193909203916001015b600091505b82821015611c2757600883811115612af05750825b6000805b82811015612b13578481018701602082021b9190911790600101612af4565b5080600885048401555050600882019150612adb565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612b9b5760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c756500000000006044820152606401610a1c565b8360ff16601b1480612bb057508360ff16601c145b612bfc5760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c756500000000006044820152606401610a1c565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612c50573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612a3c5760405162461bcd60e51b8152600401610a1c9061360b565b508054612c8f90613224565b6000825580601f10612c9f575050565b601f01602090049060005260206000209081019061205191905b80821115612ccd5760008155600101612cb9565b5090565b6001600160e01b03198116811461205157600080fd5b600060208284031215612cf957600080fd5b8135611d3f81612cd1565b60005b83811015612d1f578181015183820152602001612d07565b83811115610ff25750506000910152565b60008151808452612d48816020860160208601612d04565b601f01601f19169290920160200192915050565b602081526000611d3f6020830184612d30565b600060208284031215612d8157600080fd5b5035919050565b80356001600160a01b0381168114612d9f57600080fd5b919050565b60008060408385031215612db757600080fd5b612dc083612d88565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112612df557600080fd5b813567ffffffffffffffff80821115612e1057612e10612dce565b604051601f8301601f19908116603f01168101908282118183101715612e3857612e38612dce565b81604052838152866020858801011115612e5157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215612e8457600080fd5b82359150602083013567ffffffffffffffff811115612ea257600080fd5b612eae85828601612de4565b9150509250929050565b600060208284031215612eca57600080fd5b611d3f82612d88565b600080600060608486031215612ee857600080fd5b612ef184612d88565b9250612eff60208501612d88565b9150604084013590509250925092565b60008060408385031215612f2257600080fd5b50508035926020909101359150565b600080600060608486031215612f4657600080fd5b612f4f84612d88565b95602085013595506040909401359392505050565b600060208284031215612f7657600080fd5b813567ffffffffffffffff811115612f8d57600080fd5b612f9984828501612de4565b949350505050565b60008060408385031215612fb457600080fd5b612fbd83612d88565b9150602083013561ffff81168114612fd457600080fd5b809150509250929050565b600080600060608486031215612ff457600080fd5b612ffd84612d88565b925060208401359150604084013567ffffffffffffffff81111561302057600080fd5b61302c86828701612de4565b9150509250925092565b80358015158114612d9f57600080fd5b803560ff81168114612d9f57600080fd5b600080600080600080600060e0888a03121561307257600080fd5b61307b88612d88565b965061308960208901612d88565b955061309760408901613036565b9450606088013593506130ac60808901613046565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156130db57600080fd5b6130e483612d88565b91506130f260208401613036565b90509250929050565b6000806000806080858703121561311157600080fd5b61311a85612d88565b93506020850135925060408501359150606085013567ffffffffffffffff81111561314457600080fd5b61315087828801612de4565b91505092959194509250565b6000806000806080858703121561317257600080fd5b61317b85612d88565b935061318960208601612d88565b925060408501359150606085013567ffffffffffffffff81111561314457600080fd5b600080600080600080600060e0888a0312156131c757600080fd5b6131d088612d88565b96506131de60208901612d88565b955060408801359450606088013593506130ac60808901613046565b6000806040838503121561320d57600080fd5b61321683612d88565b91506130f260208401612d88565b600181811c9082168061323857607f821691505b60208210810361325857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601390820152721d1bdad95b88191bd95cdb89dd08195e1a5cdd606a1b604082015260600190565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b600081546132bf81613224565b8085526020600183811680156132dc57600181146132f657613324565b60ff1985168884015283151560051b880183019550613324565b866000528260002060005b8581101561331c5781548a8201860152908301908401613301565b890184019650505b505050505092915050565b83815260606020820152600061334860608301856132b2565b828103604084015261335a8185612d30565b9695505050505050565b601f821115610adb57600081815260208120601f850160051c8101602086101561338b5750805b601f850160051c820191505b818110156133aa57828155600101613397565b505050505050565b815167ffffffffffffffff8111156133cc576133cc612dce565b6133e0816133da8454613224565b84613364565b602080601f83116001811461341557600084156133fd5750858301515b600019600386901b1c1916600185901b1785556133aa565b600085815260208120601f198616915b8281101561344457888601518255948401946001909101908401613425565b50858210156134625787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156134c8576134c8613498565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826134f2576134f26134cd565b500490565b6000821982111561350a5761350a613498565b500190565b60008282101561352157613521613498565b500390565b60006001820161353857613538613498565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60408152600061356860408301856132b2565b8281036020840152612a3c8185612d30565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061335a90830184612d30565b6000602082840312156135bf57600080fd5b8151611d3f81612cd1565b60208082526021908201527f696e76616c6964206f6e455243373231526563656976656420726573706f6e736040820152606560f81b606082015260800190565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b634e487b7160e01b600052603160045260246000fd5b60008261365b5761365b6134cd565b500690565b600060ff821660ff84168060ff0382111561367d5761367d613498565b019392505050565b60008351613697818460208801612d04565b8351908301906136ab818360208801612d04565b0194935050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220708b1088a9343a85daba404518d31c325078b4ce543e80895c090c7e4c03785264736f6c634300080f0033",
  "devdoc": {
    "details": "Whitelabel NFT is a Tiny ERC721, it supports minting and burning,      its token ID space is limited to 32 bitsWhitelabel NFT supports EIP-2981 royalties on NFT secondary sales,      and OpenSea royalties",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.",
        "params": {
          "_approved": "The new approved NFT controller",
          "_tokenId": "The NFT to approve"
        }
      },
      "balanceOf(address)": {
        "details": "NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.",
        "params": {
          "_owner": "An address for whom to query the balance"
        },
        "returns": {
          "_0": "The number of NFTs owned by `_owner`, possibly zero"
        }
      },
      "burn(uint256)": {
        "details": "Destroys the token with token ID specifiedRequires executor to have `ROLE_TOKEN_DESTROYER` permission      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabledCan be disabled by the contract creator forever by disabling      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking      its own roles to burn tokens and to enable burning features",
        "params": {
          "_tokenId": "ID of the token to burn"
        }
      },
      "constructor": {
        "details": "Constructs/deploys Whitelabel NFT instance      with the name and symbol defined during the deployment"
      },
      "exists(uint256)": {
        "details": "Returns whether the specified token ID has an ownership      information associated with it",
        "params": {
          "_tokenId": "ID of the token to query existence for"
        },
        "returns": {
          "_0": "whether the token exists (true - exists, false - doesn't exist)"
        }
      },
      "features()": {
        "details": "Effectively reads userRoles role for the contract itself",
        "returns": {
          "_0": "256-bit bitmask of the features enabled"
        }
      },
      "getApproved(uint256)": {
        "details": "Throws if `_tokenId` is not a valid NFT.",
        "params": {
          "_tokenId": "The NFT to find the approved address for"
        },
        "returns": {
          "_0": "The approved address for this NFT, or the zero address if there is none"
        }
      },
      "getRole(address)": {
        "details": "Having a simple getter instead of making the mapping public      allows enforcing the encapsulation of the mapping and protects from      writing to it directly in the inheriting smart contracts",
        "params": {
          "operator": "address of a user to read permissions for,      or self address to read global features of the smart contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "The address that acts on behalf of the owner",
          "_owner": "The address that owns the NFTs"
        },
        "returns": {
          "_0": "True if `_operator` is an approved operator for `_owner`, false otherwise"
        }
      },
      "isFeatureEnabled(uint256)": {
        "params": {
          "required": "set of features to check against"
        },
        "returns": {
          "_0": "true if all the features requested are enabled, false otherwise"
        }
      },
      "isOperatorInRole(address,uint256)": {
        "params": {
          "operator": "address of the user to check role for",
          "required": "set of permissions (role) to check"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isOwner(address)": {
        "returns": {
          "_0": "true if the caller is the current owner."
        }
      },
      "isSenderInRole(uint256)": {
        "details": "Used in smart contracts only. Off-chain clients should use `isOperatorInRole`.",
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isTransferable(uint256)": {
        "details": "Verifies if token is transferable (i.e. can change ownership, allowed to be transferred);      The default behaviour is to always allow transfer if token existsImplementations may modify the default behaviour based on token metadata      if required",
        "params": {
          "_tokenId": "ID of the token to check if it's transferable"
        },
        "returns": {
          "_0": "true if token is transferable, false otherwise"
        }
      },
      "mint(address,uint256)": {
        "details": "Creates new token with token ID specified      and assigns an ownership `_to` for this tokenUnsafe: doesn't execute `onERC721Received` on the receiver.      Prefer the use of `saveMint` instead of `mint`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint"
        }
      },
      "mintBatch(address,uint256,uint256)": {
        "details": "Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Unsafe: doesn't execute `onERC721Received` on the receiver.      Prefer the use of `saveMintBatch` instead of `mintBatch`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_to": "an address to mint tokens to",
          "_tokenId": "ID of the first token to mint",
          "n": "how many tokens to mint, sequentially increasing the _tokenId"
        }
      },
      "ownerOf(uint256)": {
        "details": "NFTs assigned to zero address are considered invalid, and queries  about them do throw.",
        "params": {
          "_tokenId": "The identifier for an NFT"
        },
        "returns": {
          "_0": "The address of the owner of the NFT"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Executes approve(_operator, _tokenId) on behalf of the token owner      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_tokenId` as the allowance of `_operator` over `_owner` token,      given `_owner` EIP-712 signed approvalEmits `Approval` event in the same way as `approve` doesRequires:     - `_operator` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `permitNonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification",
        "params": {
          "_exp": "signature expiration time (unix timestamp)",
          "_operator": "new approved NFT controller",
          "_owner": "owner of the token to set approval on behalf of,      an address which signed the EIP-712 message",
          "_tokenId": "token ID to approve",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)": {
        "details": "Executes setApprovalForAll(_operator, _approved) on behalf of the owner      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_operator` as the token operator for `_owner` tokens,      given `_owner` EIP-712 signed approvalEmits `ApprovalForAll` event in the same way as `setApprovalForAll` doesRequires:     - `_operator` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `permitNonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification",
        "params": {
          "_approved": "true if the operator is approved, false to revoke approval",
          "_exp": "signature expiration time (unix timestamp)",
          "_operator": "an address to add to the set of authorized operators, i.e.      an address approved by the token owner to spend tokens on its behalf",
          "_owner": "owner of the tokens to set approval on behalf of,      an address which signed the EIP-712 message",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "_salePrice": "- the sale price of the NFT asset specified by _tokenId",
          "_tokenId": "- the NFT asset queried for royalty information"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for _salePrice"
        }
      },
      "safeMint(address,uint256)": {
        "details": "Creates new token with token ID specified      and assigns an ownership `_to` for this tokenChecks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint"
        }
      },
      "safeMint(address,uint256,bytes)": {
        "details": "Creates new token with token ID specified      and assigns an ownership `_to` for this tokenChecks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_data": "additional data with no specified format, sent in call to `_to`",
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint"
        }
      },
      "safeMintBatch(address,uint256,uint256)": {
        "details": "Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Checks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint",
          "n": "how many tokens to mint, sequentially increasing the _tokenId"
        }
      },
      "safeMintBatch(address,uint256,uint256,bytes)": {
        "details": "Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Checks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_data": "additional data with no specified format, sent in call to `_to`",
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint",
          "n": "how many tokens to mint, sequentially increasing the _tokenId"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "This works identically to the other function with an extra data parameter,  except this function just sets data to \"\".",
        "params": {
          "_from": "The current owner of the NFT",
          "_to": "The new owner",
          "_tokenId": "The NFT to transfer"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "The current owner of the NFT",
          "_to": "The new owner",
          "_tokenId": "The NFT to transfer"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.",
        "params": {
          "_approved": "True if the operator is approved, false to revoke approval",
          "_operator": "Address to add to the set of authorized operators"
        }
      },
      "setBaseURI(string)": {
        "details": "Restricted access function which updates base URI used to construct      ERC721Metadata.tokenURIRequires executor to have ROLE_URI_MANAGER permission",
        "params": {
          "_baseURI": "new base URI to set"
        }
      },
      "setContractURI(string)": {
        "details": "Restricted access function which updates the contract URIRequires executor to have ROLE_URI_MANAGER permission",
        "params": {
          "_contractURI": "new contract URI to set"
        }
      },
      "setRoyaltyInfo(address,uint16)": {
        "details": "Restricted access function which updates the royalty infoRequires executor to have ROLE_ROYALTY_MANAGER permission",
        "params": {
          "_royaltyPercentage": "new royalty percentage to set",
          "_royaltyReceiver": "new royalty receiver to set"
        }
      },
      "setTokenURI(uint256,string)": {
        "details": "Sets the token URI for the token defined by its ID",
        "params": {
          "_tokenId": "an ID of the token to set URI for",
          "_tokenURI": "token URI to set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Throws if `_index` >= `totalSupply()`.",
        "params": {
          "_index": "A counter less than `totalSupply()`"
        },
        "returns": {
          "_0": "The token identifier for the `_index`th NFT,  (sort order not specified)"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Throws if `_index` >= `balanceOf(_owner)` or if  `_owner` is the zero address, representing invalid NFTs.",
        "params": {
          "_index": "A counter less than `balanceOf(_owner)`",
          "_owner": "An address where we are interested in NFTs owned by them"
        },
        "returns": {
          "_0": "The token identifier for the `_index`th NFT assigned to `_owner`,   (sort order not specified)"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns token URI if it was previously set with `setTokenURI`,      otherwise constructs it as base URI + token ID"
      },
      "totalSupply()": {
        "returns": {
          "_0": "A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.",
        "params": {
          "_from": "The current owner of the NFT",
          "_to": "The new owner",
          "_tokenId": "The NFT to transfer"
        }
      },
      "transferOwnership(address)": {
        "details": "Restricted access function to set smart contract \"owner\"      Note: an \"owner\" set doesn't have any authority, and cannot even update \"owner\"Requires executor to have ROLE_OWNER_MANAGER permission",
        "params": {
          "_owner": "new \"owner\" of the smart contract"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "operator": "address of a user to alter permissions for,       or self address to alter global features of the smart contract",
          "role": "bitmask representing a set of permissions to      enable/disable for a user specified"
        }
      }
    },
    "stateVariables": {
      "TOKEN_UID": {
        "details": "Smart contract unique identifier, a random numberShould be regenerated each time smart contact source code is changed      and changes smart contract itself is to be redeployedGenerated using https://www.random.org/bytes/Example value: 0xdbdd2b4ff38a8516da0b8e7ae93288b5e2fed0c92fb051cee90ccf4e4ec9736e"
      }
    },
    "title": "Whitelabel NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "EIP-712 contract's domain separator,      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator      note: we specify contract version in its name"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "EIP-712 contract's domain typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "FEATURE_BURNS_ON_BEHALF()": {
        "notice": "Enables approved operators to burn tokens on behalf of their owners"
      },
      "FEATURE_OPERATOR_PERMITS()": {
        "notice": "Enables operator approvals on behalf (permits for all via an EIP712 signature)"
      },
      "FEATURE_OWN_BURNS()": {
        "notice": "Enables token owners to burn their own tokens"
      },
      "FEATURE_PERMITS()": {
        "notice": "Enables approvals on behalf (permits via an EIP712 signature)"
      },
      "FEATURE_TRANSFERS()": {
        "notice": "Enables ERC721 transfers of the tokens      (transfer by the token owner himself)"
      },
      "FEATURE_TRANSFERS_ON_BEHALF()": {
        "notice": "Enables ERC721 transfers on behalf      (transfer by someone else on behalf of token owner)"
      },
      "PERMIT_FOR_ALL_TYPEHASH()": {
        "notice": "EIP-712 permitForAll (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "EIP-712 permit (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "ROLE_ACCESS_MANAGER()": {
        "notice": "Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features"
      },
      "ROLE_OWNER_MANAGER()": {
        "notice": "Owner manager is responsible for setting/updating an \"owner\" field"
      },
      "ROLE_ROYALTY_MANAGER()": {
        "notice": "Royalty manager is responsible for managing the EIP2981 royalty info"
      },
      "ROLE_TOKEN_CREATOR()": {
        "notice": "Token creator is responsible for creating (minting)      tokens to an arbitrary address"
      },
      "ROLE_TOKEN_DESTROYER()": {
        "notice": "Token destroyer is responsible for destroying (burning)      tokens owned by an arbitrary address"
      },
      "ROLE_URI_MANAGER()": {
        "notice": "URI manager is responsible for managing base URI      part of the token URI ERC721Metadata interface"
      },
      "approve(address,uint256)": {
        "notice": "Change or reaffirm the approved address for an NFT"
      },
      "balanceOf(address)": {
        "notice": "Count all NFTs assigned to an owner"
      },
      "contractURI()": {
        "notice": "Contract level metadata to define collection name, description, and royalty fees.         see https://docs.opensea.io/docs/contract-level-metadata"
      },
      "decimals()": {
        "notice": "Current implementation includes a function `decimals` that returns uint8(0)      to be more compatible with ERC-20"
      },
      "exists(uint256)": {
        "notice": "Checks if specified token exists"
      },
      "features()": {
        "notice": "Retrieves globally set of features enabled"
      },
      "getApproved(uint256)": {
        "notice": "Get the approved address for a single NFT"
      },
      "getRole(address)": {
        "notice": "Reads the permissions (role) for a given user from the `userRoles` mapping      (privileged addresses with defined roles/permissions)In the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Query if an address is an authorized operator for another address"
      },
      "isFeatureEnabled(uint256)": {
        "notice": "Checks if requested set of features is enabled globally on the contract"
      },
      "isOperatorInRole(address,uint256)": {
        "notice": "Checks if operator has all the permissions (role) required"
      },
      "isOwner(address)": {
        "notice": "Checks if the address supplied is an \"owner\" of the smart contract      Note: an \"owner\" doesn't have any authority on the smart contract and is \"nominal\""
      },
      "isSenderInRole(uint256)": {
        "notice": "Checks if transaction sender `msg.sender` has all the permissions required"
      },
      "name()": {
        "notice": "ERC-20 compatible descriptive name for a collection of NFTs in this contract"
      },
      "ownerOf(uint256)": {
        "notice": "Find the owner of an NFT"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Change or reaffirm the approved address for an NFT on behalf"
      },
      "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage      all of owner's assets - on behalf"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "EIP-2981 function to calculate royalties for sales in secondary marketplaces.         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "royaltyPercentage()": {
        "notice": "Percentage of token sale price to be used for EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "royaltyReceiver()": {
        "notice": "Address to receive EIP-2981 royalties from secondary sales         see https://eips.ethereum.org/EIPS/eip-2981"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfers the ownership of an NFT from one address to another address"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfers the ownership of an NFT from one address to another address"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "symbol()": {
        "notice": "ERC-20 compatible abbreviated name for a collection of NFTs in this contract"
      },
      "tokenByIndex(uint256)": {
        "notice": "Enumerate valid NFTs"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Enumerate NFTs assigned to an owner"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "totalSupply()": {
        "notice": "Count NFTs tracked by this contract"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"
      },
      "updateFeatures(uint256)": {
        "notice": "Updates set of the globally enabled features (`features`),      taking into account sender's permissions"
      },
      "updateRole(address,uint256)": {
        "notice": "Updates set of permissions (role) for a given user,      taking into account sender's permissions."
      }
    },
    "notice": "Whitelabel NFT is a non-upgradeable ERC721 standard implementation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32275,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "userRoles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30432,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 30436,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 30445,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 30451,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "collections",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint32)dyn_storage)"
      },
      {
        "astId": 30455,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "allTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 30460,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "approvals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 30467,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "approvedOperators",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 30472,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "permitNonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30477,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 30482,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 28561,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 28568,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "royaltyReceiver",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 28572,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "royaltyPercentage",
        "offset": 20,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 28576,
        "contract": "contracts/token/WhitelabelNFT.sol:WhitelabelNFT",
        "label": "contractURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}