{
  "address": "0x6a0426233BC2965e99F2441Ed1b20C9E7e773B1C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_actual",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CANCEL_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_MINTING_WITH_AUTH",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_FACTORY_MINTER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "authorizationState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "desired",
          "type": "uint256"
        }
      ],
      "name": "evaluateBy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintableErc721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintableErc721",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "mintWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc30d8bd7d3e9c9d38817caa2178a2adea13b300dc597bdc86bf5d8f00ed38dab",
  "receipt": {
    "to": null,
    "from": "0x5F185Da55f7BBD9217E3b3CeE06b180721FA6d34",
    "contractAddress": "0x6a0426233BC2965e99F2441Ed1b20C9E7e773B1C",
    "transactionIndex": 3,
    "gasUsed": "853006",
    "logsBloom": "0x
    "blockHash": "0xe42b170c81bbebfc5556fd9e29d60191ee90f2c0e64c29004c44948e96059d68",
    "transactionHash": "0xc30d8bd7d3e9c9d38817caa2178a2adea13b300dc597bdc86bf5d8f00ed38dab",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 30042411,
        "transactionHash": "0xc30d8bd7d3e9c9d38817caa2178a2adea13b300dc597bdc86bf5d8f00ed38dab",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f185da55f7bbd9217e3b3cee06b180721fa6d34",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000048bb4e76e9200000000000000000000000000000000000000000000000000105fc935a0d9d37e000000000000000000000000000000000000000000000990548d9570169d1713000000000000000000000000000000000000000000000000105b3d80b96b417e00000000000000000000000000000000000000000000099054922124fe0ba913",
        "logIndex": 9,
        "blockHash": "0xe42b170c81bbebfc5556fd9e29d60191ee90f2c0e64c29004c44948e96059d68"
      }
    ],
    "blockNumber": 30042411,
    "cumulativeGasUsed": "1085806",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4642d0ce5c6ae40db7036751ccc3c917",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_MINTING_WITH_AUTH\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_FACTORY_MINTER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"desired\",\"type\":\"uint256\"}],\"name\":\"evaluateBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintableErc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintableErc721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mintWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Basil Gorin\",\"details\":\"The signature is constructed via EIP-712 similar to EIP-2612, or EIP-3009Target ERC721 contract(s) must allow helper to mint the tokens, this should be configured      as part of the deployment or setup processes\",\"events\":{\"AuthorizationCanceled(address,bytes32)\":{\"details\":\"Fired whenever the nonce gets cancelled (ex.: `cancelAuthorization`)Both `AuthorizationUsed` and `AuthorizationCanceled` imply the nonce      cannot be longer used, the only difference is that `AuthorizationCanceled`      implies no smart contract state change made (except the nonce marked as cancelled)\",\"params\":{\"authorizer\":\"an address which has cancelled the nonce\",\"nonce\":\"the nonce cancelled\"}},\"AuthorizationUsed(address,bytes32)\":{\"details\":\"Fired whenever the nonce gets used (ex.: `transferWithAuthorization`, `receiveWithAuthorization`)\",\"params\":{\"authorizer\":\"an address which has used the nonce\",\"nonce\":\"the nonce used\"}},\"Minted(address,address,uint256)\":{\"details\":\"Fired in mint() and mintWithAuthorization() after an NFT is minted\",\"params\":{\"erc721Address\":\"ERC721 contract address which was minted\",\"to\":\"an address NFT was minted to\",\"tokenId\":\"NFT ID which was minted\"}}},\"kind\":\"dev\",\"methods\":{\"authorizationState(address,bytes32)\":{\"details\":\"Nonces are expected to be client-side randomly generated 32-byte data      unique to the authorizer's address\",\"params\":{\"_authorizer\":\"Authorizer's address\",\"_nonce\":\"Nonce of the authorization\"},\"returns\":{\"_0\":\"true if the nonce is used\"}},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_authorizer\":\"transaction authorizer\",\"_nonce\":\"unique random nonce to cancel (mark as used)\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"cancelAuthorization(bytes32)\":{\"params\":{\"_nonce\":\"unique random nonce to cancel (mark as used)\"}},\"evaluateBy(address,uint256,uint256)\":{\"details\":\"Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011\",\"params\":{\"desired\":\"desired set of permissions operator would like to set\",\"operator\":\"address of the contract operator which is about to set the permissions\",\"target\":\"input set of permissions to operator is going to modify\"},\"returns\":{\"_0\":\"resulting set of permissions given operator will set\"}},\"features()\":{\"details\":\"Effectively reads userRoles role for the contract itself\",\"returns\":{\"_0\":\"256-bit bitmask of the features enabled\"}},\"isFeatureEnabled(uint256)\":{\"params\":{\"required\":\"set of features to check against\"},\"returns\":{\"_0\":\"true if all the features requested are enabled, false otherwise\"}},\"isOperatorInRole(address,uint256)\":{\"params\":{\"operator\":\"address of the user to check role for\",\"required\":\"set of permissions (role) to check\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isSenderInRole(uint256)\":{\"params\":{\"required\":\"set of permissions (role) to check against\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"mint(address,address,uint256)\":{\"details\":\"Doesn't allow minting the token with ID zeroRequires an executor to have ROLE_MINTER permissionRequires target ERC721 contract to be mintable (`MintableERC721`)Requires target ERC721 contract instance to allow minting via helper\",\"params\":{\"_mintableErc721\":\"target ERC721 contract instance to mint token on,      compatible with `MintableERC721`\",\"_to\":\"an address to mint token to\",\"_tokenId\":\"target ERC721 token ID to mint\"}},\"mintWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"_mintableErc721\":\"target ERC721 contract instance to mint token on,      compatible with `MintableERC721`\",\"_nonce\":\"unique random nonce\",\"_to\":\"an address to mint token to\",\"_tokenId\":\"target ERC721 token ID to mint\",\"_validAfter\":\"signature valid after time (unix timestamp)\",\"_validBefore\":\"signature valid before time (unix timestamp)\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"updateFeatures(uint256)\":{\"details\":\"Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions\",\"params\":{\"_mask\":\"bitmask representing a set of features to enable/disable\"}},\"updateRole(address,uint256)\":{\"details\":\"Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission\",\"params\":{\"operator\":\"address of a user to alter permissions for or zero      to alter global features of the smart contract\",\"role\":\"bitmask representing a set of permissions to      enable/disable for a user specified\"}}},\"stateVariables\":{\"DOMAIN_TYPEHASH\":{\"details\":\"Note: we do not include version into the domain typehash/separator,      it is implied version is concatenated to the name field, like \\\"NFTFactoryV2\\\"\"},\"FEATURE_MINTING_WITH_AUTH\":{\"details\":\"Feature FEATURE_MINTING_WITH_AUTH must be enabled in order for      `mintWithAuthorization()` function to succeed\"},\"ROLE_FACTORY_MINTER\":{\"details\":\"Role ROLE_FACTORY_MINTER allows minting tokens      (executing `mint` function)\"},\"usedNonces\":{\"details\":\"A record of used nonces for EIP-712 transactionsA record of used nonces for signing/validating signatures      in `mintWithAuthorization` for every mintMaps authorizer address => nonce => true/false (used unused)\"}},\"title\":\"Alethea NFT Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CANCEL_AUTHORIZATION_TYPEHASH()\":{\"notice\":\"EIP-712 CancelAuthorization struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"DOMAIN_SEPARATOR()\":{\"notice\":\"EIP-712 contract's domain separator,      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"EIP-712 contract's domain typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"FEATURE_MINTING_WITH_AUTH()\":{\"notice\":\"Enables meta transaction minting (minting with an authorization      via an EIP712 signature)\"},\"MINT_WITH_AUTHORIZATION_TYPEHASH()\":{\"notice\":\"EIP-712 MintWithAuthorization struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"ROLE_ACCESS_MANAGER()\":{\"notice\":\"Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features\"},\"ROLE_FACTORY_MINTER()\":{\"notice\":\"Factory minter is responsible for creating (minting)      tokens to an arbitrary address\"},\"authorizationState(address,bytes32)\":{\"notice\":\"Returns the state of an authorization, more specifically      if the specified nonce was already used by the address specified\"},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Cancels the authorization (using EIP-712 signature)\"},\"cancelAuthorization(bytes32)\":{\"notice\":\"Cancels the authorization\"},\"constructor\":{\"notice\":\"Deploys the helper contract and initializes DOMAIN_SEPARATOR using the created smart contract address\"},\"evaluateBy(address,uint256,uint256)\":{\"notice\":\"Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions\"},\"features()\":{\"notice\":\"Retrieves globally set of features enabled\"},\"isFeatureEnabled(uint256)\":{\"notice\":\"Checks if requested set of features is enabled globally on the contract\"},\"isOperatorInRole(address,uint256)\":{\"notice\":\"Checks if operator has all the permissions (role) required\"},\"isSenderInRole(uint256)\":{\"notice\":\"Checks if transaction sender `msg.sender` has all the permissions required\"},\"mint(address,address,uint256)\":{\"notice\":\"Restricted access function to mint an NFT\"},\"mintWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Executes a mint function with a signed authorization\"},\"updateFeatures(uint256)\":{\"notice\":\"Updates set of the globally enabled features (`features`),      taking into account sender's permissions\"},\"updateRole(address,uint256)\":{\"notice\":\"Updates set of permissions (role) for a given user,      taking into account sender's permissions.\"},\"userRoles(address)\":{\"notice\":\"Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on\"}},\"notice\":\"NFT Factory is a helper smart contract responsible for minting arbitrary NFTsIt supports two mechanisms:      - minting delegation: authorized address executes mint function on the helper,        and helper executes minting function on the target ERC721 contract as an internal transaction      - meta transaction minting or minting with an authorization: authorized address signs        the minting authorization message and any address executes mint function on the helperSecond mechanism allows to shift the gas costs for the transaction to any address      (usually this is the NFT beneficiary - an address which receives an NFT)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/NFTFactory.sol\":\"NFTFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/ERC721SpecExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Mintable ERC721\\n *\\n * @notice Defines mint capabilities for Alethea ERC721 tokens.\\n *      This interface should be treated as a definition of what mintable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface MintableERC721 {\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t *\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMint` instead of `mint`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMintBatch` instead of `mintBatch`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _tokenId ID of the first token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) external;\\n}\\n\\n/**\\n * @title Alethea Burnable ERC721\\n *\\n * @notice Defines burn capabilities for Alethea ERC721 tokens.\\n *      This interface should be treated as a definition of what burnable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface BurnableERC721 {\\n\\t/**\\n\\t * @notice Destroys the token with token ID specified\\n\\t *\\n\\t * @dev Should be accessible publicly by token owners.\\n\\t *      May have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _tokenId ID of the token to burn\\n\\t */\\n\\tfunction burn(uint256 _tokenId) external;\\n}\\n\\n/**\\n * @title With Base URI\\n *\\n * @notice A marker interface for the contracts having the baseURI() function\\n *      or public string variable named baseURI\\n *      NFT implementations like TinyERC721, or ShortERC721 are example of such smart contracts\\n *\\n * @author Basil Gorin\\n */\\ninterface WithBaseURI {\\n\\t/**\\n\\t * @dev Usually used in NFT implementations to construct ERC721Metadata.tokenURI as\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\n\\t *\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\n\\t *      will have an URI https://api.com/token/1\\n\\t */\\n\\tfunction baseURI() external view returns(string memory);\\n}\\n\",\"keccak256\":\"0xe6ec34852d09cb5b47a3711cac1315d217af81b504492a5f19d3250ef29620b2\",\"license\":\"MIT\"},\"contracts/lib/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n *\\n * @dev Copy of the Zeppelin's library:\\n *      https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b0cf6fbb7a70f31527f36579ad644e1cf12fdf4e/contracts/utils/cryptography/ECDSA.sol\\n */\\nlibrary ECDSA {\\n\\t/**\\n\\t * @dev Returns the address that signed a hashed message (`hash`) with\\n\\t * `signature`. This address can then be used for verification purposes.\\n\\t *\\n\\t * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n\\t * this function rejects them by requiring the `s` value to be in the lower\\n\\t * half order, and the `v` value to be either 27 or 28.\\n\\t *\\n\\t * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n\\t * verification to be secure: it is possible to craft signatures that\\n\\t * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n\\t * this is by receiving a hash of the original message (which may otherwise\\n\\t * be too long), and then calling {toEthSignedMessageHash} on it.\\n\\t *\\n\\t * Documentation for signature generation:\\n\\t * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n\\t * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n\\t */\\n\\tfunction recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n\\t\\t// Divide the signature in r, s and v variables\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\tuint8 v;\\n\\n\\t\\t// Check the signature length\\n\\t\\t// - case 65: r,s,v signature (standard)\\n\\t\\t// - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n\\t\\tif (signature.length == 65) {\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\n\\t\\t\\t// currently is to use assembly.\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := mload(add(signature, 0x40))\\n\\t\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse if (signature.length == 64) {\\n\\t\\t\\t// ecrecover takes the signature parameters, and the only way to get them\\n\\t\\t\\t// currently is to use assembly.\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet vs := mload(add(signature, 0x40))\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n\\t\\t\\t\\tv := add(shr(255, vs), 27)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\trevert(\\\"invalid signature length\\\");\\n\\t\\t}\\n\\n\\t\\treturn recover(hash, v, r, s);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal pure returns (address) {\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n\\t\\t// the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n\\t\\t//\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n\\t\\t// these malleable signatures as well.\\n\\t\\trequire(\\n\\t\\t\\tuint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n\\t\\t\\t\\\"invalid signature 's' value\\\"\\n\\t\\t);\\n\\t\\trequire(v == 27 || v == 28, \\\"invalid signature 'v' value\\\");\\n\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\n\\t\\trequire(signer != address(0), \\\"invalid signature\\\");\\n\\n\\t\\treturn signer;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n\\t * produces hash corresponding to the one signed with the\\n\\t * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n\\t * JSON-RPC method as part of EIP-191.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n\\t\\t// 32 is the length in bytes of hash,\\n\\t\\t// enforced by the type signature above\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an Ethereum Signed Typed Data, created from a\\n\\t * `domainSeparator` and a `structHash`. This produces hash corresponding\\n\\t * to the one signed with the\\n\\t * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n\\t * JSON-RPC method as part of EIP-712.\\n\\t *\\n\\t * See {recover}.\\n\\t */\\n\\tfunction toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\t}\\n}\\n\",\"keccak256\":\"0xadc0107053170d40a04da6f2da244286cb84a4dab28f8e50c1b4d386fc597f87\",\"license\":\"MIT\"},\"contracts/protocol/NFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC721SpecExt.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"../lib/ECDSA.sol\\\";\\n\\n/**\\n * @title Alethea NFT Factory\\n *\\n * @notice NFT Factory is a helper smart contract responsible for minting arbitrary NFTs\\n *\\n * @notice It supports two mechanisms:\\n *      - minting delegation: authorized address executes mint function on the helper,\\n *        and helper executes minting function on the target ERC721 contract as an internal transaction\\n *      - meta transaction minting or minting with an authorization: authorized address signs\\n *        the minting authorization message and any address executes mint function on the helper\\n *\\n * @notice Second mechanism allows to shift the gas costs for the transaction to any address\\n *      (usually this is the NFT beneficiary - an address which receives an NFT)\\n *\\n * @dev The signature is constructed via EIP-712 similar to EIP-2612, or EIP-3009\\n *\\n * @dev Target ERC721 contract(s) must allow helper to mint the tokens, this should be configured\\n *      as part of the deployment or setup processes\\n *\\n * @author Basil Gorin\\n */\\ncontract NFTFactory is AccessControl {\\n\\t/**\\n\\t * @dev A record of used nonces for EIP-712 transactions\\n\\t *\\n\\t * @dev A record of used nonces for signing/validating signatures\\n\\t *      in `mintWithAuthorization` for every mint\\n\\t *\\n\\t * @dev Maps authorizer address => nonce => true/false (used unused)\\n\\t */\\n\\tmapping(address => mapping(bytes32 => bool)) private usedNonces;\\n\\n\\t/**\\n\\t * @notice EIP-712 contract's domain separator,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\n\\t */\\n\\tbytes32 public immutable DOMAIN_SEPARATOR;\\n\\n\\t/**\\n\\t * @notice EIP-712 contract's domain typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t *\\n\\t * @dev Note: we do not include version into the domain typehash/separator,\\n\\t *      it is implied version is concatenated to the name field, like \\\"NFTFactoryV2\\\"\\n\\t */\\n\\t// keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\")\\n\\tbytes32 public constant DOMAIN_TYPEHASH = 0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866;\\n\\n\\t/**\\n\\t * @notice EIP-712 MintWithAuthorization struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"MintWithAuthorization(address contract,address to,uint256 tokenId,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n\\tbytes32 public constant MINT_WITH_AUTHORIZATION_TYPEHASH = 0x495835d970a03ff092657fca9abde67d34a0bb73a0bba258a5fa90c4ce4340f6;\\n\\n\\t/**\\n\\t * @notice EIP-712 CancelAuthorization struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"CancelAuthorization(address authorizer,bytes32 nonce)\\\")\\n\\tbytes32 public constant CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\\n\\n\\t/**\\n\\t * @notice Enables meta transaction minting (minting with an authorization\\n\\t *      via an EIP712 signature)\\n\\t * @dev Feature FEATURE_MINTING_WITH_AUTH must be enabled in order for\\n\\t *      `mintWithAuthorization()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_MINTING_WITH_AUTH = 0x0000_0001;\\n\\n\\t/**\\n\\t * @notice Factory minter is responsible for creating (minting)\\n\\t *      tokens to an arbitrary address\\n\\t * @dev Role ROLE_FACTORY_MINTER allows minting tokens\\n\\t *      (executing `mint` function)\\n\\t */\\n\\tuint32 public constant ROLE_FACTORY_MINTER = 0x0001_0000;\\n\\n\\t/**\\n\\t * @dev Fired in mint() and mintWithAuthorization() after an NFT is minted\\n\\t *\\n\\t * @param erc721Address ERC721 contract address which was minted\\n\\t * @param to an address NFT was minted to\\n\\t * @param tokenId NFT ID which was minted\\n\\t */\\n\\tevent Minted(address indexed erc721Address, address indexed to, uint256 indexed tokenId);\\n\\n\\t/**\\n\\t * @dev Fired whenever the nonce gets used (ex.: `transferWithAuthorization`, `receiveWithAuthorization`)\\n\\t *\\n\\t * @param authorizer an address which has used the nonce\\n\\t * @param nonce the nonce used\\n\\t */\\n\\tevent AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n\\n\\t/**\\n\\t * @dev Fired whenever the nonce gets cancelled (ex.: `cancelAuthorization`)\\n\\t *\\n\\t * @dev Both `AuthorizationUsed` and `AuthorizationCanceled` imply the nonce\\n\\t *      cannot be longer used, the only difference is that `AuthorizationCanceled`\\n\\t *      implies no smart contract state change made (except the nonce marked as cancelled)\\n\\t *\\n\\t * @param authorizer an address which has cancelled the nonce\\n\\t * @param nonce the nonce cancelled\\n\\t */\\n\\tevent AuthorizationCanceled(address indexed authorizer, bytes32 indexed nonce);\\n\\n\\t/**\\n\\t * Deploys the helper contract and initializes DOMAIN_SEPARATOR using the created smart contract address\\n\\t */\\n\\tconstructor() {\\n\\t\\t// build the EIP-712 contract domain separator, see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\n\\t\\t// note: we specify contract version in its name\\n\\t\\tDOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\\\"NFTFactoryV1\\\")), block.chainid, address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Restricted access function to mint an NFT\\n\\t *\\n\\t * @dev Doesn't allow minting the token with ID zero\\n\\t * @dev Requires an executor to have ROLE_MINTER permission\\n\\t * @dev Requires target ERC721 contract to be mintable (`MintableERC721`)\\n\\t * @dev Requires target ERC721 contract instance to allow minting via helper\\n\\t *\\n\\t * @param _mintableErc721 target ERC721 contract instance to mint token on,\\n\\t *      compatible with `MintableERC721`\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId target ERC721 token ID to mint\\n\\t */\\n\\tfunction mint(address _mintableErc721, address _to, uint256 _tokenId) public {\\n\\t\\t// delegate to _mint()\\n\\t\\t__mint(msg.sender, _mintableErc721, _to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary internally used function to mint an NFT\\n\\t *\\n\\t * @dev Unsafe: doesn't verify real tx executor (msg.sender) permissions, but the permissions of\\n\\t *      the address specified as an executor, must be kept private at all times\\n\\t *\\n\\t * @dev Doesn't allow minting the token with ID zero\\n\\t * @dev Requires an executor to have ROLE_MINTER permission\\n\\t * @dev Requires target ERC721 contract to be mintable (`MintableERC721`)\\n\\t * @dev Requires target ERC721 contract instance to allow minting via helper\\n\\t *\\n\\t * @param _executor an address on which behalf the operation is executed,\\n\\t *      this is usually `msg.sender` but this can be different address for\\n\\t *      the EIP-712 like transactions (mint with authorization)\\n\\t * @param _mintableErc721 target ERC721 contract instance to mint token on,\\n\\t *      compatible with `MintableERC721`\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId target ERC721 token ID to mint\\n\\t */\\n\\tfunction __mint(address _executor, address _mintableErc721, address _to, uint256 _tokenId) private {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isOperatorInRole(_executor, ROLE_FACTORY_MINTER), \\\"access denied\\\");\\n\\n\\t\\t// verify the inputs\\n\\t\\trequire(_mintableErc721 != address(0), \\\"ERC721 instance addr is not set\\\");\\n\\t\\trequire(_to != address(0), \\\"NFT receiver addr is not set\\\");\\n\\t\\trequire(_tokenId != 0, \\\"token ID is not set\\\");\\n\\n\\t\\t// delegate to the target ERC721 contract\\n\\t\\tMintableERC721(_mintableErc721).safeMint(_to, _tokenId);\\n\\n\\t\\t// emit an event\\n\\t\\temit Minted(_mintableErc721, _to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Executes a mint function with a signed authorization\\n\\t *\\n\\t * @param _mintableErc721 target ERC721 contract instance to mint token on,\\n\\t *      compatible with `MintableERC721`\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId target ERC721 token ID to mint\\n\\t * @param _validAfter signature valid after time (unix timestamp)\\n\\t * @param _validBefore signature valid before time (unix timestamp)\\n\\t * @param _nonce unique random nonce\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction mintWithAuthorization(\\n\\t\\taddress _mintableErc721,\\n\\t\\taddress _to,\\n\\t\\tuint256 _tokenId,\\n\\t\\tuint256 _validAfter,\\n\\t\\tuint256 _validBefore,\\n\\t\\tbytes32 _nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public {\\n\\t\\t// ensure EIP-712 minting with authorization is enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_MINTING_WITH_AUTH), \\\"minting with auth is disabled\\\");\\n\\n\\t\\t// derive signer of the EIP712 MintWithAuthorization message\\n\\t\\taddress signer = __deriveSigner(\\n\\t\\t\\tabi.encode(MINT_WITH_AUTHORIZATION_TYPEHASH, _mintableErc721, _to, _tokenId, _validAfter, _validBefore, _nonce),\\n\\t\\t\\tv,\\n\\t\\t\\tr,\\n\\t\\t\\ts\\n\\t\\t);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(block.timestamp > _validAfter, \\\"signature not yet valid\\\");\\n\\t\\trequire(block.timestamp < _validBefore, \\\"signature expired\\\");\\n\\n\\t\\t// use the nonce supplied (verify, mark as used, emit event)\\n\\t\\t__useNonce(signer, _nonce, false);\\n\\n\\t\\t// delegate call to `_mint` - execute the logic required\\n\\t\\t__mint(signer, _mintableErc721, _to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the state of an authorization, more specifically\\n\\t *      if the specified nonce was already used by the address specified\\n\\t *\\n\\t * @dev Nonces are expected to be client-side randomly generated 32-byte data\\n\\t *      unique to the authorizer's address\\n\\t *\\n\\t * @param _authorizer Authorizer's address\\n\\t * @param _nonce Nonce of the authorization\\n\\t * @return true if the nonce is used\\n\\t */\\n\\tfunction authorizationState(\\n\\t\\taddress _authorizer,\\n\\t\\tbytes32 _nonce\\n\\t) external view returns (bool) {\\n\\t\\t// simply return the value from the mapping\\n\\t\\treturn usedNonces[_authorizer][_nonce];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancels the authorization (using EIP-712 signature)\\n\\t *\\n\\t * @param _authorizer transaction authorizer\\n\\t * @param _nonce unique random nonce to cancel (mark as used)\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction cancelAuthorization(\\n\\t\\taddress _authorizer,\\n\\t\\tbytes32 _nonce,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) public {\\n\\t\\t// derive signer of the EIP712 ReceiveWithAuthorization message\\n\\t\\taddress signer = __deriveSigner(abi.encode(CANCEL_AUTHORIZATION_TYPEHASH, _authorizer, _nonce), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(signer == _authorizer, \\\"invalid signature\\\");\\n\\n\\t\\t// cancel the nonce supplied (verify, mark as used, emit event)\\n\\t\\t__useNonce(_authorizer, _nonce, true);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancels the authorization\\n\\t *\\n\\t * @param _nonce unique random nonce to cancel (mark as used)\\n\\t */\\n\\tfunction cancelAuthorization(bytes32 _nonce) public {\\n\\t\\t// cancel the nonce supplied (verify, mark as used, emit event)\\n\\t\\t__useNonce(msg.sender, _nonce, true);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to verify structured EIP712 message signature and derive its signer\\n\\t *\\n\\t * @param abiEncodedTypehash abi.encode of the message typehash together with all its parameters\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction __deriveSigner(bytes memory abiEncodedTypehash, uint8 v, bytes32 r, bytes32 s) private view returns(address) {\\n\\t\\t// build the EIP-712 hashStruct of the message\\n\\t\\tbytes32 hashStruct = keccak256(abiEncodedTypehash);\\n\\n\\t\\t// calculate the EIP-712 digest \\\"\\\\x19\\\\x01\\\" \\u2016 domainSeparator \\u2016 hashStruct(message)\\n\\t\\tbytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, hashStruct));\\n\\n\\t\\t// recover the address which signed the message with v, r, s\\n\\t\\taddress signer = ECDSA.recover(digest, v, r, s);\\n\\n\\t\\t// return the signer address derived from the signature\\n\\t\\treturn signer;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to use/cancel the nonce supplied for a given authorizer:\\n\\t *      1. Verifies the nonce was not used before\\n\\t *      2. Marks the nonce as used\\n\\t *      3. Emits an event that the nonce was used/cancelled\\n\\t *\\n\\t * @dev Set `_cancellation` to false (default) to use nonce,\\n\\t *      set `_cancellation` to true to cancel nonce\\n\\t *\\n\\t * @dev It is expected that the nonce supplied is a randomly\\n\\t *      generated uint256 generated by the client\\n\\t *\\n\\t * @param _authorizer an address to use/cancel nonce for\\n\\t * @param _nonce random nonce to use\\n\\t * @param _cancellation true to emit `AuthorizationCancelled`, false to emit `AuthorizationUsed` event\\n\\t */\\n\\tfunction __useNonce(address _authorizer, bytes32 _nonce, bool _cancellation) private {\\n\\t\\t// verify nonce was not used before\\n\\t\\trequire(!usedNonces[_authorizer][_nonce], \\\"invalid nonce\\\");\\n\\n\\t\\t// update the nonce state to \\\"used\\\" for that particular signer to avoid replay attack\\n\\t\\tusedNonces[_authorizer][_nonce] = true;\\n\\n\\t\\t// depending on the usage type (use/cancel)\\n\\t\\tif(_cancellation) {\\n\\t\\t\\t// emit an event regarding the nonce cancelled\\n\\t\\t\\temit AuthorizationCanceled(_authorizer, _nonce);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\t// emit an event regarding the nonce used\\n\\t\\t\\temit AuthorizationUsed(_authorizer, _nonce);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x7c56c352f6126603df73326205bfd25488b57afa1c2c8ef8fdbe002e1df532d0\",\"license\":\"MIT\"},\"contracts/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Access Control List\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if specific operation is permitted globally and/or\\n *      if particular user has a permission to execute it.\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable specific\\n *      functions (public functions) of the smart contract for everyone.\\n * @notice User roles are designed to restrict access to specific\\n *      functions (restricted functions) of the smart contract to some users.\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @author Basil Gorin\\n */\\ncontract AccessControl {\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n\\t/**\\n\\t * @notice Privileged addresses with defined roles/permissions\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t */\\n\\tmapping(address => uint256) public userRoles;\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param _by operator which called the function\\n\\t * @param _to address which was granted/revoked permissions\\n\\t * @param _requested permissions requested\\n\\t * @param _actual permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\n\\n\\t/**\\n\\t * @notice Creates an access control instance,\\n\\t *      setting contract creator to have full privileges\\n\\t */\\n\\tconstructor() {\\n\\t\\t// contract creator has full privileges\\n\\t\\tuserRoles[msg.sender] = FULL_PRIVILEGES_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns(uint256) {\\n\\t\\t// features are stored in 'this' address  mapping of `userRoles` structure\\n\\t\\treturn userRoles[address(this)];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for or zero\\n\\t *      to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\tuserRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = userRoles[operator];\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns(bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(userRoles[operator], required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n}\\n\",\"keccak256\":\"0x3b216515c25652b94bce7984346b8deee3ce00fd8c2b3b7b8d3015fa349908d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503360009081526020818152604091829020600019905581518083018352600c81526b4e4654466163746f7279563160a01b9082015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866918101919091527f06df569e81a0cee0d4bf93bcbb32cd170bf15a994570fea8a3c8e631cc4b61719181019190915246606082015230608082015260a00160408051601f198184030181529190528051602090910120608052608051610e056100e460003960008181610185015261072a0152610e056000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063c688d693116100ad578063d916948711610071578063d9169487146102a3578063e94a0102146102ca578063f822d5aa14610303578063fcc2c07814610316578063ff2642cf1461032957600080fd5b8063c688d6931461024d578063c6c3bbe614610260578063ce8b3a5814610273578063d1333c981461027d578063d5bb7f671461029057600080fd5b806374d5e100116100f457806374d5e100146101df578063845ab94f146101ff578063ae5b102e14610212578063ae682e2e14610225578063c4d029c61461023057600080fd5b806320606b70146101315780632b5214161461016b5780633644e515146101805780635a049a70146101a7578063725f3626146101bc575b600080fd5b6101587f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6040519081526020015b60405180910390f35b30600090815260208190526040902054610158565b6101587f000000000000000000000000000000000000000000000000000000000000000081565b6101ba6101b5366004610c36565b610350565b005b6101cf6101ca366004610c84565b610424565b6040519015158152602001610162565b6101586101ed366004610c9d565b60006020819052908152604090205481565b6101ba61020d366004610c84565b61043f565b6101ba610220366004610cb8565b61044e565b610158600160ff1b81565b610238600181565b60405163ffffffff9091168152602001610162565b6101cf61025b366004610cb8565b610518565b6101ba61026e366004610ce2565b61053d565b6102386201000081565b6101ba61028b366004610d1e565b61054e565b6101ba61029e366004610c84565b6106cc565b6101587f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742981565b6101cf6102d8366004610cb8565b6001600160a01b03919091166000908152600160209081526040808320938352929052205460ff1690565b610158610311366004610d9c565b6106d6565b6101cf610324366004610c84565b610701565b6101587f495835d970a03ff092657fca9abde67d34a0bb73a0bba258a5fa90c4ce4340f681565b604080517f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742960208201526001600160a01b03871691810191909152606081018590526000906103b4906080015b60405160208183030381529060405285858561070d565b9050856001600160a01b0316816001600160a01b0316146104105760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b60448201526064015b60405180910390fd5b61041c8686600161078f565b505050505050565b30600090815260208190526040812054821682145b92915050565b61044b3382600161078f565b50565b61045b600160ff1b610701565b6104975760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b6044820152606401610407565b6001600160a01b0382166000908152602081905260409020546104bc903390836106d6565b6001600160a01b03831660008181526020818152604091829020849055815185815290810193909352909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a35050565b6001600160a01b038216600090815260208190526040812054821682145b9392505050565b6105493384848461089e565b505050565b6105586001610424565b6105a45760405162461bcd60e51b815260206004820152601d60248201527f6d696e74696e67207769746820617574682069732064697361626c65640000006044820152606401610407565b604080517f495835d970a03ff092657fca9abde67d34a0bb73a0bba258a5fa90c4ce4340f660208201526001600160a01b03808c169282019290925290891660608201526080810188905260a0810187905260c0810186905260e08101859052600090610614906101000161039d565b90508642116106655760405162461bcd60e51b815260206004820152601760248201527f7369676e6174757265206e6f74207965742076616c69640000000000000000006044820152606401610407565b8542106106a85760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610407565b6106b48186600061078f565b6106c0818b8b8b61089e565b50505050505050505050565b61044b308261044e565b6001600160a01b03929092166000908152602081905260409020546000198084188216189216171690565b60006104393383610518565b835160208086019190912060405161190160f01b928101929092527f00000000000000000000000000000000000000000000000000000000000000006022830152604282018190526000918290606201604051602081830303815290604052805190602001209050600061078382888888610a82565b98975050505050505050565b6001600160a01b038316600090815260016020908152604080832085845290915290205460ff16156107f35760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b6044820152606401610407565b6001600160a01b0383166000908152600160208181526040808420868552909152909120805460ff1916909117905580156108635760405182906001600160a01b038516907f1cdd46ff242716cdaa72d159d339a485b3438398348d68f09d7c8c0a59353d8190600090a3505050565b60405182906001600160a01b038516907f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a590600090a3505050565b6108ab8462010000610518565b6108e75760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b6044820152606401610407565b6001600160a01b03831661093d5760405162461bcd60e51b815260206004820152601f60248201527f45524337323120696e7374616e63652061646472206973206e6f7420736574006044820152606401610407565b6001600160a01b0382166109935760405162461bcd60e51b815260206004820152601c60248201527f4e46542072656365697665722061646472206973206e6f7420736574000000006044820152606401610407565b806000036109d95760405162461bcd60e51b81526020600482015260136024820152721d1bdad95b881251081a5cc81b9bdd081cd95d606a1b6044820152606401610407565b604051632851206560e21b81526001600160a01b0383811660048301526024820183905284169063a144819490604401600060405180830381600087803b158015610a2357600080fd5b505af1158015610a37573d6000803e3d6000fd5b5050505080826001600160a01b0316846001600160a01b03167f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f060405160405180910390a450505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610af45760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c756500000000006044820152606401610407565b8360ff16601b1480610b0957508360ff16601c145b610b555760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c756500000000006044820152606401610407565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015610ba9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c005760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610407565b95945050505050565b80356001600160a01b0381168114610c2057600080fd5b919050565b803560ff81168114610c2057600080fd5b600080600080600060a08688031215610c4e57600080fd5b610c5786610c09565b945060208601359350610c6c60408701610c25565b94979396509394606081013594506080013592915050565b600060208284031215610c9657600080fd5b5035919050565b600060208284031215610caf57600080fd5b61053682610c09565b60008060408385031215610ccb57600080fd5b610cd483610c09565b946020939093013593505050565b600080600060608486031215610cf757600080fd5b610d0084610c09565b9250610d0e60208501610c09565b9150604084013590509250925092565b60008060008060008060008060006101208a8c031215610d3d57600080fd5b610d468a610c09565b9850610d5460208b01610c09565b975060408a0135965060608a0135955060808a0135945060a08a01359350610d7e60c08b01610c25565b925060e08a013591506101008a013590509295985092959850929598565b600080600060608486031215610db157600080fd5b610dba84610c09565b9560208501359550604090940135939250505056fea26469706673582212200144cfcb34f9fa320e88213e0236ea2dd9f8d4172fac7b2395faa65bad65b48464736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063c688d693116100ad578063d916948711610071578063d9169487146102a3578063e94a0102146102ca578063f822d5aa14610303578063fcc2c07814610316578063ff2642cf1461032957600080fd5b8063c688d6931461024d578063c6c3bbe614610260578063ce8b3a5814610273578063d1333c981461027d578063d5bb7f671461029057600080fd5b806374d5e100116100f457806374d5e100146101df578063845ab94f146101ff578063ae5b102e14610212578063ae682e2e14610225578063c4d029c61461023057600080fd5b806320606b70146101315780632b5214161461016b5780633644e515146101805780635a049a70146101a7578063725f3626146101bc575b600080fd5b6101587f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6040519081526020015b60405180910390f35b30600090815260208190526040902054610158565b6101587f000000000000000000000000000000000000000000000000000000000000000081565b6101ba6101b5366004610c36565b610350565b005b6101cf6101ca366004610c84565b610424565b6040519015158152602001610162565b6101586101ed366004610c9d565b60006020819052908152604090205481565b6101ba61020d366004610c84565b61043f565b6101ba610220366004610cb8565b61044e565b610158600160ff1b81565b610238600181565b60405163ffffffff9091168152602001610162565b6101cf61025b366004610cb8565b610518565b6101ba61026e366004610ce2565b61053d565b6102386201000081565b6101ba61028b366004610d1e565b61054e565b6101ba61029e366004610c84565b6106cc565b6101587f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742981565b6101cf6102d8366004610cb8565b6001600160a01b03919091166000908152600160209081526040808320938352929052205460ff1690565b610158610311366004610d9c565b6106d6565b6101cf610324366004610c84565b610701565b6101587f495835d970a03ff092657fca9abde67d34a0bb73a0bba258a5fa90c4ce4340f681565b604080517f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742960208201526001600160a01b03871691810191909152606081018590526000906103b4906080015b60405160208183030381529060405285858561070d565b9050856001600160a01b0316816001600160a01b0316146104105760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b60448201526064015b60405180910390fd5b61041c8686600161078f565b505050505050565b30600090815260208190526040812054821682145b92915050565b61044b3382600161078f565b50565b61045b600160ff1b610701565b6104975760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b6044820152606401610407565b6001600160a01b0382166000908152602081905260409020546104bc903390836106d6565b6001600160a01b03831660008181526020818152604091829020849055815185815290810193909352909133917f5a10526456f5116c0b7b80582c217d666243fd51b6a2d92c8011e601c2462e5f910160405180910390a35050565b6001600160a01b038216600090815260208190526040812054821682145b9392505050565b6105493384848461089e565b505050565b6105586001610424565b6105a45760405162461bcd60e51b815260206004820152601d60248201527f6d696e74696e67207769746820617574682069732064697361626c65640000006044820152606401610407565b604080517f495835d970a03ff092657fca9abde67d34a0bb73a0bba258a5fa90c4ce4340f660208201526001600160a01b03808c169282019290925290891660608201526080810188905260a0810187905260c0810186905260e08101859052600090610614906101000161039d565b90508642116106655760405162461bcd60e51b815260206004820152601760248201527f7369676e6174757265206e6f74207965742076616c69640000000000000000006044820152606401610407565b8542106106a85760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610407565b6106b48186600061078f565b6106c0818b8b8b61089e565b50505050505050505050565b61044b308261044e565b6001600160a01b03929092166000908152602081905260409020546000198084188216189216171690565b60006104393383610518565b835160208086019190912060405161190160f01b928101929092527f00000000000000000000000000000000000000000000000000000000000000006022830152604282018190526000918290606201604051602081830303815290604052805190602001209050600061078382888888610a82565b98975050505050505050565b6001600160a01b038316600090815260016020908152604080832085845290915290205460ff16156107f35760405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964206e6f6e636560981b6044820152606401610407565b6001600160a01b0383166000908152600160208181526040808420868552909152909120805460ff1916909117905580156108635760405182906001600160a01b038516907f1cdd46ff242716cdaa72d159d339a485b3438398348d68f09d7c8c0a59353d8190600090a3505050565b60405182906001600160a01b038516907f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a590600090a3505050565b6108ab8462010000610518565b6108e75760405162461bcd60e51b815260206004820152600d60248201526c1858d8d95cdcc819195b9a5959609a1b6044820152606401610407565b6001600160a01b03831661093d5760405162461bcd60e51b815260206004820152601f60248201527f45524337323120696e7374616e63652061646472206973206e6f7420736574006044820152606401610407565b6001600160a01b0382166109935760405162461bcd60e51b815260206004820152601c60248201527f4e46542072656365697665722061646472206973206e6f7420736574000000006044820152606401610407565b806000036109d95760405162461bcd60e51b81526020600482015260136024820152721d1bdad95b881251081a5cc81b9bdd081cd95d606a1b6044820152606401610407565b604051632851206560e21b81526001600160a01b0383811660048301526024820183905284169063a144819490604401600060405180830381600087803b158015610a2357600080fd5b505af1158015610a37573d6000803e3d6000fd5b5050505080826001600160a01b0316846001600160a01b03167f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f060405160405180910390a450505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610af45760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c756500000000006044820152606401610407565b8360ff16601b1480610b0957508360ff16601c145b610b555760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c756500000000006044820152606401610407565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015610ba9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c005760405162461bcd60e51b8152602060048201526011602482015270696e76616c6964207369676e617475726560781b6044820152606401610407565b95945050505050565b80356001600160a01b0381168114610c2057600080fd5b919050565b803560ff81168114610c2057600080fd5b600080600080600060a08688031215610c4e57600080fd5b610c5786610c09565b945060208601359350610c6c60408701610c25565b94979396509394606081013594506080013592915050565b600060208284031215610c9657600080fd5b5035919050565b600060208284031215610caf57600080fd5b61053682610c09565b60008060408385031215610ccb57600080fd5b610cd483610c09565b946020939093013593505050565b600080600060608486031215610cf757600080fd5b610d0084610c09565b9250610d0e60208501610c09565b9150604084013590509250925092565b60008060008060008060008060006101208a8c031215610d3d57600080fd5b610d468a610c09565b9850610d5460208b01610c09565b975060408a0135965060608a0135955060808a0135945060a08a01359350610d7e60c08b01610c25565b925060e08a013591506101008a013590509295985092959850929598565b600080600060608486031215610db157600080fd5b610dba84610c09565b9560208501359550604090940135939250505056fea26469706673582212200144cfcb34f9fa320e88213e0236ea2dd9f8d4172fac7b2395faa65bad65b48464736f6c634300080f0033",
  "devdoc": {
    "author": "Basil Gorin",
    "details": "The signature is constructed via EIP-712 similar to EIP-2612, or EIP-3009Target ERC721 contract(s) must allow helper to mint the tokens, this should be configured      as part of the deployment or setup processes",
    "events": {
      "AuthorizationCanceled(address,bytes32)": {
        "details": "Fired whenever the nonce gets cancelled (ex.: `cancelAuthorization`)Both `AuthorizationUsed` and `AuthorizationCanceled` imply the nonce      cannot be longer used, the only difference is that `AuthorizationCanceled`      implies no smart contract state change made (except the nonce marked as cancelled)",
        "params": {
          "authorizer": "an address which has cancelled the nonce",
          "nonce": "the nonce cancelled"
        }
      },
      "AuthorizationUsed(address,bytes32)": {
        "details": "Fired whenever the nonce gets used (ex.: `transferWithAuthorization`, `receiveWithAuthorization`)",
        "params": {
          "authorizer": "an address which has used the nonce",
          "nonce": "the nonce used"
        }
      },
      "Minted(address,address,uint256)": {
        "details": "Fired in mint() and mintWithAuthorization() after an NFT is minted",
        "params": {
          "erc721Address": "ERC721 contract address which was minted",
          "to": "an address NFT was minted to",
          "tokenId": "NFT ID which was minted"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "authorizationState(address,bytes32)": {
        "details": "Nonces are expected to be client-side randomly generated 32-byte data      unique to the authorizer's address",
        "params": {
          "_authorizer": "Authorizer's address",
          "_nonce": "Nonce of the authorization"
        },
        "returns": {
          "_0": "true if the nonce is used"
        }
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_authorizer": "transaction authorizer",
          "_nonce": "unique random nonce to cancel (mark as used)",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "cancelAuthorization(bytes32)": {
        "params": {
          "_nonce": "unique random nonce to cancel (mark as used)"
        }
      },
      "evaluateBy(address,uint256,uint256)": {
        "details": "Calculated based on:      1) operator's own permission set read from userRoles[operator]      2) target permission set - what is already set on the target      3) desired permission set - what do we want set target toCorner cases:      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:        `desired` bitset is returned regardless of the `target` permission set value        (what operator sets is what they get)      2) Operator with no permissions (zero bitset):        `target` bitset is returned regardless of the `desired` value        (operator has no authority and cannot modify anything)Example:      Consider an operator with the permissions bitmask     00001111      is about to modify the target permission set          01010101      Operator wants to set that permission set to          00110011      Based on their role, an operator has the permissions      to update only lowest 4 bits on the target, meaning that      high 4 bits of the target set in this example is left      unchanged and low 4 bits get changed as desired:      01010011",
        "params": {
          "desired": "desired set of permissions operator would like to set",
          "operator": "address of the contract operator which is about to set the permissions",
          "target": "input set of permissions to operator is going to modify"
        },
        "returns": {
          "_0": "resulting set of permissions given operator will set"
        }
      },
      "features()": {
        "details": "Effectively reads userRoles role for the contract itself",
        "returns": {
          "_0": "256-bit bitmask of the features enabled"
        }
      },
      "isFeatureEnabled(uint256)": {
        "params": {
          "required": "set of features to check against"
        },
        "returns": {
          "_0": "true if all the features requested are enabled, false otherwise"
        }
      },
      "isOperatorInRole(address,uint256)": {
        "params": {
          "operator": "address of the user to check role for",
          "required": "set of permissions (role) to check"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isSenderInRole(uint256)": {
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "mint(address,address,uint256)": {
        "details": "Doesn't allow minting the token with ID zeroRequires an executor to have ROLE_MINTER permissionRequires target ERC721 contract to be mintable (`MintableERC721`)Requires target ERC721 contract instance to allow minting via helper",
        "params": {
          "_mintableErc721": "target ERC721 contract instance to mint token on,      compatible with `MintableERC721`",
          "_to": "an address to mint token to",
          "_tokenId": "target ERC721 token ID to mint"
        }
      },
      "mintWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "_mintableErc721": "target ERC721 contract instance to mint token on,      compatible with `MintableERC721`",
          "_nonce": "unique random nonce",
          "_to": "an address to mint token to",
          "_tokenId": "target ERC721 token ID to mint",
          "_validAfter": "signature valid after time (unix timestamp)",
          "_validBefore": "signature valid before time (unix timestamp)",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "operator": "address of a user to alter permissions for or zero      to alter global features of the smart contract",
          "role": "bitmask representing a set of permissions to      enable/disable for a user specified"
        }
      }
    },
    "stateVariables": {
      "DOMAIN_TYPEHASH": {
        "details": "Note: we do not include version into the domain typehash/separator,      it is implied version is concatenated to the name field, like \"NFTFactoryV2\""
      },
      "FEATURE_MINTING_WITH_AUTH": {
        "details": "Feature FEATURE_MINTING_WITH_AUTH must be enabled in order for      `mintWithAuthorization()` function to succeed"
      },
      "ROLE_FACTORY_MINTER": {
        "details": "Role ROLE_FACTORY_MINTER allows minting tokens      (executing `mint` function)"
      },
      "usedNonces": {
        "details": "A record of used nonces for EIP-712 transactionsA record of used nonces for signing/validating signatures      in `mintWithAuthorization` for every mintMaps authorizer address => nonce => true/false (used unused)"
      }
    },
    "title": "Alethea NFT Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CANCEL_AUTHORIZATION_TYPEHASH()": {
        "notice": "EIP-712 CancelAuthorization struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "DOMAIN_SEPARATOR()": {
        "notice": "EIP-712 contract's domain separator,      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "EIP-712 contract's domain typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "FEATURE_MINTING_WITH_AUTH()": {
        "notice": "Enables meta transaction minting (minting with an authorization      via an EIP712 signature)"
      },
      "MINT_WITH_AUTHORIZATION_TYPEHASH()": {
        "notice": "EIP-712 MintWithAuthorization struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "ROLE_ACCESS_MANAGER()": {
        "notice": "Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features"
      },
      "ROLE_FACTORY_MINTER()": {
        "notice": "Factory minter is responsible for creating (minting)      tokens to an arbitrary address"
      },
      "authorizationState(address,bytes32)": {
        "notice": "Returns the state of an authorization, more specifically      if the specified nonce was already used by the address specified"
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Cancels the authorization (using EIP-712 signature)"
      },
      "cancelAuthorization(bytes32)": {
        "notice": "Cancels the authorization"
      },
      "constructor": {
        "notice": "Deploys the helper contract and initializes DOMAIN_SEPARATOR using the created smart contract address"
      },
      "evaluateBy(address,uint256,uint256)": {
        "notice": "Determines the permission bitmask an operator can set on the      target permission setUsed to calculate the permission bitmask to be set when requested     in `updateRole` and `updateFeatures` functions"
      },
      "features()": {
        "notice": "Retrieves globally set of features enabled"
      },
      "isFeatureEnabled(uint256)": {
        "notice": "Checks if requested set of features is enabled globally on the contract"
      },
      "isOperatorInRole(address,uint256)": {
        "notice": "Checks if operator has all the permissions (role) required"
      },
      "isSenderInRole(uint256)": {
        "notice": "Checks if transaction sender `msg.sender` has all the permissions required"
      },
      "mint(address,address,uint256)": {
        "notice": "Restricted access function to mint an NFT"
      },
      "mintWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Executes a mint function with a signed authorization"
      },
      "updateFeatures(uint256)": {
        "notice": "Updates set of the globally enabled features (`features`),      taking into account sender's permissions"
      },
      "updateRole(address,uint256)": {
        "notice": "Updates set of permissions (role) for a given user,      taking into account sender's permissions."
      },
      "userRoles(address)": {
        "notice": "Privileged addresses with defined roles/permissionsIn the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on"
      }
    },
    "notice": "NFT Factory is a helper smart contract responsible for minting arbitrary NFTsIt supports two mechanisms:      - minting delegation: authorized address executes mint function on the helper,        and helper executes minting function on the target ERC721 contract as an internal transaction      - meta transaction minting or minting with an authorization: authorized address signs        the minting authorization message and any address executes mint function on the helperSecond mechanism allows to shift the gas costs for the transaction to any address      (usually this is the NFT beneficiary - an address which receives an NFT)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19416,
        "contract": "contracts/protocol/NFTFactory.sol:NFTFactory",
        "label": "userRoles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11524,
        "contract": "contracts/protocol/NFTFactory.sol:NFTFactory",
        "label": "usedNonces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}